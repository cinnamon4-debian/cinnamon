Description: photoframe desklet: fix mega leak, don't cache all images,
 destroy old images.
Author: Michael Webster <miketwebster@gmail.com>
Origin: upstream - 2f15a99773302db75f8ad1a60a21e7954218f9c6
---
 .../desklets/photoframe@cinnamon.org/desklet.js    | 99 +++++++++++++---------
 1 file changed, 57 insertions(+), 42 deletions(-)

Index: cinnamon/files/usr/share/cinnamon/desklets/photoframe@cinnamon.org/desklet.js
===================================================================
--- cinnamon.orig/files/usr/share/cinnamon/desklets/photoframe@cinnamon.org/desklet.js	2014-09-27 14:59:30.621794888 +0200
+++ cinnamon/files/usr/share/cinnamon/desklets/photoframe@cinnamon.org/desklet.js	2014-11-21 21:58:14.173417652 +0100
@@ -92,6 +92,8 @@
             Mainloop.source_remove(this.update_id);
         this.update_id = null;
         this._setup_dir_monitor();
+        if (this.currentPicture)
+            this.currentPicture.destroy();
         this._photoFrame.destroy();
         this.setup_display();
     },
@@ -142,12 +144,12 @@
         }
 
         if (this.dir_file.query_exists(null)) {
-            let fileEnum = this.dir_file.enumerate_children('standard::*', Gio.FileQueryInfoFlags.NONE, null);
+            let fileEnum = this.dir_file.enumerate_children('standard::type,standard::name', Gio.FileQueryInfoFlags.NONE, null);
             let info;
             while ((info = fileEnum.next_file(null)) != null) {
                 let fileType = info.get_file_type();
                 if (fileType != Gio.FileType.DIRECTORY) {
-                    this._loadImage(this.dir + "/" + info.get_name());
+                    this._images.push(this.dir + "/" + info.get_name());
                 }
             }
 
@@ -170,14 +172,21 @@
         }
         this.updateInProgress = true;
         try {
-            let image;
+            let image_path;
             if (!this.shuffle){
-                image = this._images.shift();
-                this._images.push(image);
+                image_path = this._images.shift();
+                this._images.push(image_path);
             } else {
-                image = this._images[Math.floor(Math.random() * this._images.length)];
+                image_path = this._images[Math.floor(Math.random() * this._images.length)];
             }
 
+            if (!image_path) {
+                this.updateInProgress = false;
+                return;
+            }
+
+            let image = this._loadImage(image_path);
+
             if (image){
                 let height, width;
                 let imageRatio = image.width/image.height;
@@ -193,6 +202,7 @@
 
                 image.set_size(width, height);
 
+                let old_pic = this.currentPicture;
                 this.currentPicture = image;
                 if (this.fade_delay > 0) {
                     Tweener.addTween(this._bin,
@@ -211,7 +221,7 @@
                 } else {
                     this._bin.set_child(this.currentPicture);
                 }
-                
+                old_pic.destroy();
             }
         } catch (e) {
             global.logError(e);
@@ -241,10 +251,10 @@
 
             let image = St.TextureCache.get_default().load_uri_async(uri, this.width, this.height);
 
-            image._path = filePath;
-            this._images.push(image);
+            return image;
         } catch (x) {
-            // Do nothing. Probably a non-image is in the folder
+            // Probably a non-image is in the folder
+            return null;
         }
     },
 }
