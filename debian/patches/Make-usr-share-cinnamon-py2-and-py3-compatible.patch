From: Maximiliano Curia <maxy@gnuservers.com.ar>
Date: Tue, 27 Mar 2018 09:13:22 +0200
Subject: Make /usr/share/cinnamon py2 and py3 compatible

---
 .../cinnamon-desktop-editor.py                     |  24 +--
 .../cinnamon-json-makepot/cinnamon-json-makepot.py |  45 +++---
 .../cinnamon-looking-glass.py                      |  85 ++++++----
 .../cinnamon-looking-glass/lookingglass_proxy.py   |  26 ++--
 .../cinnamon-looking-glass/page_extensions.py      |   9 +-
 .../cinnamon-looking-glass/page_inspect.py         |  13 +-
 .../cinnamon/cinnamon-looking-glass/page_log.py    |  39 +++--
 .../cinnamon/cinnamon-looking-glass/page_memory.py |  15 +-
 .../cinnamon-looking-glass/page_results.py         |  13 +-
 .../cinnamon-looking-glass/page_windows.py         |  15 +-
 .../cinnamon/cinnamon-looking-glass/pageutils.py   |  15 +-
 .../cinnamon-menu-editor/cme/MainWindow.py         |  65 ++++----
 .../cinnamon-menu-editor/cme/MenuEditor.py         |  52 ++++---
 .../cinnamon/cinnamon-menu-editor/cme/util.py      |  24 ++-
 .../cinnamon-settings-users.py                     | 134 ++++++++--------
 .../cinnamon-settings/bin/ChooserButtonWidgets.py  |  75 ++++++---
 .../cinnamon-settings/bin/CinnamonGtkSettings.py   |  22 ++-
 .../cinnamon-settings/bin/ExtensionCore.py         |  77 ++++++----
 .../cinnamon-settings/bin/GSettingsWidgets.py      |  36 +++--
 .../cinnamon-settings/bin/JsonSettingsWidgets.py   |  55 ++++---
 .../cinnamon-settings/bin/KeybindingWidgets.py     |  49 +++---
 .../cinnamon-settings/bin/SettingsWidgets.py       | 105 +++++++++----
 .../share/cinnamon/cinnamon-settings/bin/Spices.py | 116 +++++++-------
 .../cinnamon-settings/bin/TreeListWidgets.py       |  55 +++----
 .../share/cinnamon/cinnamon-settings/bin/capi.py   |   9 +-
 .../cinnamon/cinnamon-settings/bin/eyedropper.py   |  22 ++-
 .../cinnamon/cinnamon-settings/bin/imtools.py      | 171 +++++----------------
 .../cinnamon-settings/bin/proxygsettings.py        |  11 +-
 .../cinnamon-settings/bin/tweenEquations.py        |  19 +--
 .../cinnamon-settings/cinnamon-settings.py         |  59 +++----
 .../cinnamon-settings/modules/cs_accessibility.py  |  54 ++++---
 .../cinnamon-settings/modules/cs_applets.py        |  11 +-
 .../cinnamon-settings/modules/cs_backgrounds.py    | 111 +++++++------
 .../cinnamon-settings/modules/cs_calendar.py       |  14 +-
 .../cinnamon-settings/modules/cs_default.py        | 158 ++++++++++---------
 .../cinnamon-settings/modules/cs_desklets.py       |  13 +-
 .../cinnamon-settings/modules/cs_desktop.py        |  10 +-
 .../cinnamon-settings/modules/cs_effects.py        |  23 ++-
 .../cinnamon-settings/modules/cs_extensions.py     |  11 +-
 .../cinnamon/cinnamon-settings/modules/cs_fonts.py |  12 +-
 .../cinnamon-settings/modules/cs_general.py        |  10 +-
 .../cinnamon-settings/modules/cs_hotcorner.py      |  64 ++++----
 .../cinnamon/cinnamon-settings/modules/cs_info.py  |  15 +-
 .../cinnamon-settings/modules/cs_keyboard.py       |  64 ++++----
 .../cinnamon/cinnamon-settings/modules/cs_mouse.py |  12 +-
 .../cinnamon-settings/modules/cs_notifications.py  |  14 +-
 .../modules/cs_online_accounts.py                  |  15 +-
 .../cinnamon/cinnamon-settings/modules/cs_panel.py |  49 ++++--
 .../cinnamon/cinnamon-settings/modules/cs_power.py |  55 ++++---
 .../cinnamon-settings/modules/cs_privacy.py        |  12 +-
 .../cinnamon-settings/modules/cs_screensaver.py    |  37 +++--
 .../cinnamon/cinnamon-settings/modules/cs_sound.py | 115 ++++++++------
 .../cinnamon-settings/modules/cs_startup.py        |  65 +++++---
 .../cinnamon-settings/modules/cs_themes.py         |  48 +++---
 .../cinnamon-settings/modules/cs_tiling.py         |  12 +-
 .../cinnamon/cinnamon-settings/modules/cs_user.py  |  44 +++---
 .../cinnamon-settings/modules/cs_windows.py        |  21 ++-
 .../cinnamon-settings/modules/cs_workspaces.py     |  10 +-
 .../cinnamon/cinnamon-settings/xlet-settings.py    |  75 ++++-----
 .../cinnamon-slideshow/cinnamon-slideshow.py       |  38 +++--
 60 files changed, 1547 insertions(+), 1100 deletions(-)

diff --git a/files/usr/share/cinnamon/cinnamon-desktop-editor/cinnamon-desktop-editor.py b/files/usr/share/cinnamon/cinnamon-desktop-editor/cinnamon-desktop-editor.py
index a5fab34..c616078 100755
--- a/files/usr/share/cinnamon/cinnamon-desktop-editor/cinnamon-desktop-editor.py
+++ b/files/usr/share/cinnamon/cinnamon-desktop-editor/cinnamon-desktop-editor.py
@@ -1,5 +1,7 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
 import sys
 import os
 import gettext
@@ -8,14 +10,14 @@ from optparse import OptionParser
 import shutil
 
 import gi
-gi.require_version("Gtk", "3.0")
-gi.require_version("CMenu", "3.0")
+gi.require_version("Gtk", "3.0")   # noqa
+gi.require_version("CMenu", "3.0")   # noqa
 from gi.repository import GLib, Gtk, Gio, CMenu, GdkPixbuf
 
-sys.path.insert(0, '/usr/share/cinnamon/cinnamon-menu-editor')
+sys.path.insert(0, '/usr/share/cinnamon/cinnamon-menu-editor')  # noqa
 from cme import util
 
-sys.path.insert(0, '/usr/share/cinnamon/cinnamon-settings')
+sys.path.insert(0, '/usr/share/cinnamon/cinnamon-settings')  # noqa
 from bin import JsonSettingsWidgets
 
 # i18n
@@ -30,6 +32,7 @@ EXTENSIONS = (".png", ".xpm", ".svg")
 
 DEFAULT_ICON_NAME = "cinnamon-panel-launcher"
 
+
 def escape_space(string):
     return string.replace(" ", "\ ")
 
@@ -108,6 +111,7 @@ DESKTOP_GROUP = GLib.KEY_FILE_DESKTOP_GROUP
 
 
 class IconPicker(object):
+
     def __init__(self, dialog, button, image):
         self.dialog = dialog
         self.button = button
@@ -128,11 +132,11 @@ class IconPicker(object):
             else:
                 theme = Gtk.IconTheme.get_default()
                 icon_info = theme.lookup_icon(fn, 64, 0)
-                icon_info_fn = icon_info.get_filename() if icon_info != None else None
+                icon_info_fn = icon_info.get_filename() if icon_info is not None else None
                 if icon_info_fn:
                     chooser.set_filename(icon_info_fn)
         filter = Gtk.FileFilter()
-        filter.add_pixbuf_formats ()
+        filter.add_pixbuf_formats()
         chooser.set_filter(filter)
 
         preview = Gtk.Image()
@@ -141,7 +145,7 @@ class IconPicker(object):
 
         response = chooser.run()
         if response == Gtk.ResponseType.ACCEPT:
-            set_icon_string (self.image, chooser.get_filename())
+            set_icon_string(self.image, chooser.get_filename())
         chooser.destroy()
 
     def update_icon_preview_cb(self, chooser, preview):
@@ -211,7 +215,7 @@ class ItemEditor(object):
             success, parsed = GLib.shell_parse_argv(string)
             if GLib.find_program_in_path(parsed[0]) or ((not os.path.isdir(parsed[0])) and os.access(parsed[0], os.X_OK)):
                 return True
-        except:
+        except Exception:
             pass
         return False
 
@@ -424,6 +428,7 @@ class CinnamonLauncherEditor(ItemEditor):
 
 
 class Main:
+
     def __init__(self):
         parser = OptionParser()
         parser.add_option("-o", "--original", dest="original_desktop_file", help="Path of original .desktop file", metavar="ORIG_FILE")
@@ -470,7 +475,7 @@ class Main:
             editor = LauncherEditor(self.orig_file, self.nemo_launcher_cb, self.dest_dir)
             editor.dialog.show_all()
         else:
-            print "Invalid args"
+            print("Invalid args")
 
     def directory_cb(self, success, dest_path):
         self.end()
@@ -531,6 +536,7 @@ class Main:
     def end(self):
         Gtk.main_quit()
 
+
 if __name__ == "__main__":
     Gtk.Window.set_default_icon_name(DEFAULT_ICON_NAME)
     Main()
diff --git a/files/usr/share/cinnamon/cinnamon-json-makepot/cinnamon-json-makepot.py b/files/usr/share/cinnamon/cinnamon-json-makepot/cinnamon-json-makepot.py
index 6b0bb38..19390d4 100755
--- a/files/usr/share/cinnamon/cinnamon-json-makepot/cinnamon-json-makepot.py
+++ b/files/usr/share/cinnamon/cinnamon-json-makepot/cinnamon-json-makepot.py
@@ -1,6 +1,7 @@
 #!/usr/bin/python2
 
-import sys
+from __future__ import print_function
+
 import os
 import json
 import subprocess
@@ -11,14 +12,14 @@ from gi.repository import GLib
 
 try:
     import polib
-except:
-    print """
+except Exception:
+    print("""
 
     Module "polib" not available.
 
     Please install the package "python-polib" and try again
 
-    """
+    """)
     quit()
 
 home = os.path.expanduser("~")
@@ -40,11 +41,12 @@ def remove_empty_folders(path):
     # if folder empty, delete it
     files = os.listdir(path)
     if len(files) == 0:
-        print "Removing empty folder:", path
+        print("Removing empty folder:", path)
         os.rmdir(path)
 
 
 class Main:
+
     def __init__(self):
 
         usage = """
@@ -124,13 +126,12 @@ class Main:
 
         if options.js:
             try:
-                import subprocess
                 subprocess.call(["xgettext", "--version"])
             except OSError:
-                print "xgettext not found, you may need to install the gettext package"
+                print("xgettext not found, you may need to install the gettext package")
                 quit()
-            print " "
-            print "Running xgettext on JavaScript files..."
+            print(" ")
+            print("Running xgettext on JavaScript files...")
 
             tmp = tempfile.NamedTemporaryFile(prefix="cinnamon-json-makepot-")
             try:
@@ -153,7 +154,7 @@ class Main:
         else:
             self.po = polib.POFile()
 
-        print "Scanning metadata.json and settings-schema.json..."
+        print("Scanning metadata.json and settings-schema.json...")
         self.scan_dirs()
 
         if append:
@@ -161,7 +162,7 @@ class Main:
         else:
             self.po.save(fpath=self.potpath)
 
-        print "Extraction complete"
+        print("Extraction complete")
         quit()
 
     def get_uuid(self):
@@ -171,9 +172,9 @@ class Main:
             file.close()
             md = json.loads(raw_meta)
             return md["uuid"]
-        except Exception, detail:
-            print "Failed to get UUID - missing, corrupt, or incomplete metadata.json file"
-            print detail
+        except Exception as detail:
+            print("Failed to get UUID - missing, corrupt, or incomplete metadata.json file")
+            print(detail)
             quit()
 
     def do_install(self):
@@ -184,14 +185,14 @@ class Main:
                 parts = os.path.splitext(file)
                 if parts[1] == '.po':
                     this_locale_dir = os.path.join(locale_inst, parts[0], 'LC_MESSAGES')
-                    GLib.mkdir_with_parents(this_locale_dir, 0755)
-                    #print "/usr/bin/msgfmt -c %s -o %s" % (os.path.join(root, file), os.path.join(this_locale_dir, '%s.mo' % self.get_uuid()))
+                    GLib.mkdir_with_parents(this_locale_dir, 0o755)
+                    # print("/usr/bin/msgfmt -c %s -o %s" % (os.path.join(root, file), os.path.join(this_locale_dir, '%s.mo' % self.get_uuid())))
                     subprocess.call(["msgfmt", "-c", os.path.join(root, file), "-o", os.path.join(this_locale_dir, '%s.mo' % self.get_uuid())])
                     done_one = True
         if done_one:
-            print "Install complete for domain: %s" % self.get_uuid()
+            print("Install complete for domain: %s" % self.get_uuid())
         else:
-            print "Nothing installed"
+            print("Nothing installed")
         quit()
 
     def do_remove(self):
@@ -204,9 +205,9 @@ class Main:
                     os.remove(os.path.join(locale_inst, i19_folder, 'LC_MESSAGES', "%s.mo" % self.get_uuid()))
                 remove_empty_folders(os.path.join(locale_inst, i19_folder))
         if done_one:
-            print "Removal complete for domain: %s" % self.get_uuid()
+            print("Removal complete for domain: %s" % self.get_uuid())
         else:
-            print "Nothing to remove"
+            print("Nothing to remove")
         quit()
 
     def scan_dirs(self):
@@ -228,7 +229,6 @@ class Main:
                     self.current_parent_dir = os.path.split(root)[1]
                     self.extract_metadata_strings(data)
 
-
     def extract_strings(self, data, parent=""):
         for key in data.keys():
             if key in ("description", "tooltip", "units", "title"):
@@ -284,8 +284,9 @@ class Main:
                     entry.comment += "\n"
                 entry.comment += comment
         else:
-            entry = polib.POEntry(msgid = msgid, comment = comment)
+            entry = polib.POEntry(msgid=msgid, comment=comment)
             self.po.append(entry)
 
+
 if __name__ == "__main__":
     Main()
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/cinnamon-looking-glass.py b/files/usr/share/cinnamon/cinnamon-looking-glass/cinnamon-looking-glass.py
index 3610c45..881577a 100755
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/cinnamon-looking-glass.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/cinnamon-looking-glass.py
@@ -10,13 +10,17 @@
 #   - When pressing ctrl + r, search history
 #   - auto-completion ?
 
+from __future__ import division
+
 import sys
 import os
 import pyinotify
 import gi
-gi.require_version('Gtk', '3.0')
+gi.require_version('Gtk', '3.0')  # noqa
 from gi.repository import Gio, Gtk, GObject, Gdk
-import dbus, dbus.service, dbus.glib
+import dbus
+import dbus.glib
+import dbus.service
 import pageutils
 from lookingglass_proxy import LookingGlassProxy
 from dbus.mainloop.glib import DBusGMainLoop
@@ -26,7 +30,12 @@ signal.signal(signal.SIGINT, signal.SIG_DFL)
 MELANGE_DBUS_NAME = "org.Cinnamon.Melange"
 MELANGE_DBUS_PATH = "/org/Cinnamon/Melange"
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class MenuButton(Gtk.Button):
+
     def __init__(self, text):
         Gtk.Button.__init__(self, text)
         self.connect("clicked", self.onClicked)
@@ -36,7 +45,7 @@ class MenuButton(Gtk.Button):
 
     def onClicked(self, widget):
         x, y, w, h = self.getScreenCoordinates()
-        self.menu.popup(None, None, lambda menu, data: (x, y+h, True), None, 1, 0)
+        self.menu.popup(None, None, lambda menu, data: (x, y + h, True), None, 1, 0)
 
     def getScreenCoordinates(self):
         parent = self.get_parent_window()
@@ -45,12 +54,14 @@ class MenuButton(Gtk.Button):
         h = parent.get_height()
         extents = parent.get_frame_extents()
         allocation = self.get_allocation()
-        return (x + (extents.width-w)/2 + allocation.x,
-                y + (extents.height-h)-(extents.width-w)/2 + allocation.y,
+        return (x + (extents.width - w) // 2 + allocation.x,
+                y + (extents.height - h) - (extents.width - w) // 2 + allocation.y,
                 allocation.width,
                 allocation.height)
 
+
 class CommandLine(Gtk.Entry):
+
     def __init__(self):
         Gtk.Entry.__init__(self)
         self.settings = Gio.Settings.new("org.cinnamon")
@@ -101,7 +112,7 @@ class CommandLine(Gtk.Entry):
         if self.historyPosition == -1:
             return
         num = len(self.history)
-        if self.historyPosition == num-1:
+        if self.historyPosition == num - 1:
             self.historyPosition = -1
             self.set_text(self.lastText)
         else:
@@ -114,7 +125,7 @@ class CommandLine(Gtk.Entry):
         command = self.get_text()
         if command != "":
             num = len(self.history)
-            if num == 0 or self.history[num-1] != command:
+            if num == 0 or self.history[num - 1] != command:
                 self.history.append(command)
             self.set_text("")
             self.settings.set_strv("looking-glass-history", self.history)
@@ -126,6 +137,7 @@ class CommandLine(Gtk.Entry):
 
 
 class NewLogDialog(Gtk.Dialog):
+
     def __init__(self, parent):
         Gtk.Dialog.__init__(self, "Add a new file watcher", parent, 0,
                             (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
@@ -162,7 +174,7 @@ class NewLogDialog(Gtk.Dialog):
 
     def onComboChanged(self, combo):
         tree_iter = combo.get_active_iter()
-        if tree_iter != None:
+        if tree_iter is not None:
             model = combo.get_model()
             name, self.filename = model[tree_iter][:2]
             self.entry.set_text(name)
@@ -175,7 +187,7 @@ class NewLogDialog(Gtk.Dialog):
             return False
 
     def isValid(self):
-        return self.entry.get_text() != "" and self.filename != None and os.path.isfile(os.path.expanduser(self.filename))
+        return self.entry.get_text() != "" and self.filename is not None and os.path.isfile(os.path.expanduser(self.filename))
 
     def getFile(self):
         return os.path.expanduser(self.filename)
@@ -207,7 +219,9 @@ class NewLogDialog(Gtk.Dialog):
 
         return result
 
+
 class FileWatchHandler(pyinotify.ProcessEvent):
+
     def __init__(self, view):
         self.view = view
 
@@ -223,7 +237,9 @@ class FileWatchHandler(pyinotify.ProcessEvent):
     def process_IN_MODIFY(self, event):
         self.view.getUpdates()
 
+
 class FileWatcherView(Gtk.ScrolledWindow):
+
     def __init__(self, filename):
         Gtk.ScrolledWindow.__init__(self)
 
@@ -244,7 +260,7 @@ class FileWatcherView(Gtk.ScrolledWindow):
         handler = FileWatchHandler(self)
         wm = pyinotify.WatchManager()
         self.notifier = pyinotify.ThreadedNotifier(wm, handler)
-        wdd = wm.add_watch(filename, pyinotify.IN_CLOSE_WRITE | pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY)
+        wm.add_watch(filename, pyinotify.IN_CLOSE_WRITE | pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY)
         self.notifier.start()
         self.connect("destroy", self.onDestroy)
         self.connect("size-allocate", self.onSizeChanged)
@@ -261,13 +277,15 @@ class FileWatcherView(Gtk.ScrolledWindow):
             self.changed -= 1
 
     def getUpdates(self):
-        self.changed = 2 # onSizeChanged will be called twice, but only the second time is final
+        self.changed = 2  # onSizeChanged will be called twice, but only the second time is final
         self.textbuffer.set_text(open(self.filename, 'r').read())
 
+
 class ClosableTabLabel(Gtk.Box):
     __gsignals__ = {
         "close-clicked": (GObject.SIGNAL_RUN_FIRST, GObject.TYPE_NONE, ()),
     }
+
     def __init__(self, label_text):
         Gtk.Box.__init__(self)
         self.set_orientation(Gtk.Orientation.HORIZONTAL)
@@ -281,14 +299,14 @@ class ClosableTabLabel(Gtk.Box):
         button.set_focus_on_click(False)
         button.add(Gtk.Image.new_from_stock(Gtk.STOCK_CLOSE, Gtk.IconSize.MENU))
         button.connect("clicked", self.button_clicked)
-        data =  ".button {\n" \
-                "-GtkButton-default-border : 0px;\n" \
-                "-GtkButton-default-outside-border : 0px;\n" \
-                "-GtkButton-inner-border: 0px;\n" \
-                "-GtkWidget-focus-line-width : 0px;\n" \
-                "-GtkWidget-focus-padding : 0px;\n" \
-                "padding: 0px;\n" \
-                "}"
+        data = ".button {\n" \
+               "-GtkButton-default-border : 0px;\n" \
+               "-GtkButton-default-outside-border : 0px;\n" \
+               "-GtkButton-inner-border: 0px;\n" \
+               "-GtkWidget-focus-line-width : 0px;\n" \
+               "-GtkWidget-focus-padding : 0px;\n" \
+               "padding: 0px;\n" \
+               "}"
         provider = Gtk.CssProvider()
         provider.load_from_data(data)
         button.get_style_context().add_provider(provider, 600)
@@ -299,8 +317,10 @@ class ClosableTabLabel(Gtk.Box):
     def button_clicked(self, button, data=None):
         self.emit("close-clicked")
 
+
 class MelangeApp(dbus.service.Object):
-    def __init__ (self):
+
+    def __init__(self):
         global lookingGlassProxy
         lookingGlassProxy = LookingGlassProxy()
         self.lookingGlassProxy = lookingGlassProxy
@@ -310,9 +330,9 @@ class MelangeApp(dbus.service.Object):
         self.window = None
         self.run()
 
-        dbus.service.Object.__init__ (self, dbus.SessionBus (), MELANGE_DBUS_PATH, MELANGE_DBUS_NAME)
+        dbus.service.Object.__init__(self, dbus.SessionBus(), MELANGE_DBUS_PATH, MELANGE_DBUS_NAME)
 
-    @dbus.service.method (MELANGE_DBUS_NAME, in_signature='', out_signature='')
+    @dbus.service.method(MELANGE_DBUS_NAME, in_signature='', out_signature='')
     def show(self):
         if self.window.get_visible():
             if self._minimized:
@@ -322,15 +342,15 @@ class MelangeApp(dbus.service.Object):
         else:
             self.showAndFocus()
 
-    @dbus.service.method (MELANGE_DBUS_NAME, in_signature='', out_signature='')
+    @dbus.service.method(MELANGE_DBUS_NAME, in_signature='', out_signature='')
     def hide(self):
         self.window.hide()
 
-    @dbus.service.method (MELANGE_DBUS_NAME, in_signature='', out_signature='b')
+    @dbus.service.method(MELANGE_DBUS_NAME, in_signature='', out_signature='b')
     def getVisible(self):
         return self.window.get_visible()
 
-    @dbus.service.method (MELANGE_DBUS_NAME, in_signature='', out_signature='')
+    @dbus.service.method(MELANGE_DBUS_NAME, in_signature='', out_signature='')
     def doInspect(self):
         if self.lookingGlassProxy:
             self.lookingGlassProxy.StartInspector()
@@ -391,21 +411,21 @@ class MelangeApp(dbus.service.Object):
         column = 0
         pickerButton = pageutils.ImageButton("gtk-color-picker", Gtk.IconSize.SMALL_TOOLBAR)
         pickerButton.connect("clicked", self.onPickerClicked)
-        table.attach(pickerButton, column, column+1, 1, 2, 0, 0, 2)
+        table.attach(pickerButton, column, column + 1, 1, 2, 0, 0, 2)
         column += 1
 
-        table.attach(Gtk.Label("Exec:"), column, column+1, 1, 2, 0, 0, 3)
+        table.attach(Gtk.Label("Exec:"), column, column + 1, 1, 2, 0, 0, 3)
         column += 1
 
         self.commandline = CommandLine()
-        table.attach(self.commandline, column, column+1, 1, 2, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL, 0, 3, 2)
+        table.attach(self.commandline, column, column + 1, 1, 2, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 0, 3, 2)
         column += 1
 
         self.statusLabel = Gtk.Label("Status")
         self.statusLabel.set_markup(" <span foreground='red'>[ Cinnamon is OFFLINE! ]</span> ")
         self.statusLabel.set_tooltip_text("The connection to cinnamon is broken")
         self.statusLabel.set_no_show_all(True)
-        table.attach(self.statusLabel, column, column+1, 1, 2, 0, 0, 1)
+        table.attach(self.statusLabel, column, column + 1, 1, 2, 0, 0, 1)
         column += 1
 
         settings = Gio.Settings("org.cinnamon.desktop.keybindings")
@@ -430,7 +450,7 @@ class MelangeApp(dbus.service.Object):
         box.pack_start(keybinding, False, False, 3)
         box.pack_start(actionButton, False, False, 3)
 
-        table.attach(box, column, column+1, 1, 2, 0, 0, 1)
+        table.attach(box, column, column + 1, 1, 2, 0, 0, 1)
 
         self.activatePage("results")
         self.statusLabel.hide()
@@ -468,7 +488,7 @@ class MelangeApp(dbus.service.Object):
             label.connect("close-clicked", self.onCloseTab, content)
             self.customPages[label] = content
             self.notebook.append_page(content, label)
-            self.notebook.set_current_page(self.notebook.get_n_pages()-1)
+            self.notebook.set_current_page(self.notebook.get_n_pages() - 1)
 
         dialog.destroy()
 
@@ -542,10 +562,11 @@ If you defined a hotkey for Melange, pressing it while Melange is visible it wil
         page = self.notebook.page_num(self.pages[moduleName])
         self.notebook.set_current_page(page)
 
+
 if __name__ == "__main__":
     DBusGMainLoop(set_as_default=True)
 
-    sessionBus = dbus.SessionBus ()
+    sessionBus = dbus.SessionBus()
     request = sessionBus.request_name(MELANGE_DBUS_NAME, dbus.bus.NAME_FLAG_DO_NOT_QUEUE)
     if request != dbus.bus.REQUEST_NAME_REPLY_EXISTS:
         app = MelangeApp()
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/lookingglass_proxy.py b/files/usr/share/cinnamon/cinnamon-looking-glass/lookingglass_proxy.py
index f007023..c59cd90 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/lookingglass_proxy.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/lookingglass_proxy.py
@@ -17,13 +17,13 @@ class LookingGlassProxy:
         self._statusChangeCallbacks.append(callback)
 
     def refreshStatus(self):
-        if self._proxy != None:
+        if self._proxy is not None:
             self._setStatus(True)
         else:
             self._setStatus(False)
 
     def getIsReady(self):
-        return self._proxy != None
+        return self._proxy is not None
 
     def connect(self, name, callback):
         self._signals.append((name, callback))
@@ -64,14 +64,14 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 self._proxy.Eval('(s)', code)
-            except:
+            except Exception:
                 pass
 
     def GetResults(self):
         if self._proxy:
             try:
                 return self._proxy.GetResults('()')
-            except:
+            except Exception:
                 pass
         return (False, "")
 
@@ -79,14 +79,14 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 self._proxy.AddResult('(s)', code)
-            except:
+            except Exception:
                 pass
 
     def GetErrorStack(self):
         if self._proxy:
             try:
                 return self._proxy.GetErrorStack('()')
-            except:
+            except Exception:
                 pass
         return (False, "")
 
@@ -94,7 +94,7 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 return self._proxy.GetMemoryInfo('()')
-            except:
+            except Exception:
                 pass
         return (False, 0, {})
 
@@ -102,14 +102,14 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 self._proxy.FullGc('()')
-            except:
+            except Exception:
                 pass
 
     def Inspect(self, code):
         if self._proxy:
             try:
                 return self._proxy.Inspect('(s)', code)
-            except:
+            except Exception:
                 pass
         return (False, "")
 
@@ -117,7 +117,7 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 return self._proxy.GetLatestWindowList('()')
-            except:
+            except Exception:
                 pass
         return (False, "")
 
@@ -125,14 +125,14 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 self._proxy.StartInspector('()')
-            except:
+            except Exception:
                 pass
 
     def GetExtensionList(self):
         if self._proxy:
             try:
                 return self._proxy.GetExtensionList('()')
-            except:
+            except Exception:
                 pass
         return (False, "")
 
@@ -140,6 +140,6 @@ class LookingGlassProxy:
         if self._proxy:
             try:
                 return self._proxy.ReloadExtension('(ss)', uuid, xletType)
-            except:
+            except Exception:
                 pass
         return (False, "")
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/page_extensions.py b/files/usr/share/cinnamon/cinnamon-looking-glass/page_extensions.py
index bf2caaf..7dd774f 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/page_extensions.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/page_extensions.py
@@ -2,7 +2,12 @@ import pageutils
 import os
 from gi.repository import Gtk, Gdk
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class ModulePage(pageutils.BaseListView):
+
     def __init__(self, parent):
         store = Gtk.ListStore(str, str, str, str, str, str, str, bool, str)
         pageutils.BaseListView.__init__(self, store)
@@ -59,7 +64,7 @@ class ModulePage(pageutils.BaseListView):
             path, col, cellx, celly = pthinfo
             self.selectedPath = path
             treeview.grab_focus()
-            treeview.set_cursor( path, col, 0)
+            treeview.set_cursor(path, col, 0)
 
             treeIter = self.store.get_iter(self.selectedPath)
 
@@ -70,7 +75,7 @@ class ModulePage(pageutils.BaseListView):
 
                 self.viewWebPage.set_sensitive(url != "")
                 self.viewSource.set_label(uuid + " (View Source)")
-                self.popup.popup( None, None, None, None, event.button, event.time)
+                self.popup.popup(None, None, None, None, event.button, event.time)
             return True
         elif event.type == Gdk.EventType.DOUBLE_BUTTON_PRESS:
             if pthinfo is not None:
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/page_inspect.py b/files/usr/share/cinnamon/cinnamon-looking-glass/page_inspect.py
index 9fab3a3..17697de 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/page_inspect.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/page_inspect.py
@@ -1,7 +1,14 @@
+from __future__ import print_function
+
 import pageutils
 from gi.repository import Gtk
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class InspectView(pageutils.BaseListView):
+
     def __init__(self, parent):
         self.parent = parent
         store = Gtk.ListStore(str, str, str, str, str)
@@ -29,7 +36,7 @@ class InspectView(pageutils.BaseListView):
             self.selectedPath = path
             treeview.grab_focus()
             treeview.set_cursor(path, col, 0)
-            self.popup.popup( None, None, None, None, event.button, event.time)
+            self.popup.popup(None, None, None, None, event.button, event.time)
             return True
 
     def onInsertCommand(self, widget):
@@ -55,7 +62,9 @@ class InspectView(pageutils.BaseListView):
         for item in data:
             self.store.append([item["name"], item["type"], item["shortValue"], item["value"], path + "['" + item["name"] + "']"])
 
+
 class ModulePage(pageutils.WindowAndActionBars):
+
     def __init__(self, parent):
         self.view = InspectView(self)
         pageutils.WindowAndActionBars.__init__(self, self.view)
@@ -137,7 +146,7 @@ class ModulePage(pageutils.WindowAndActionBars):
                 try:
                     self.view.setInspectionData(path, data)
                 except Exception as e:
-                    print e
+                    print(e)
                     self.view.store.clear()
             else:
                 self.view.store.clear()
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/page_log.py b/files/usr/share/cinnamon/cinnamon-looking-glass/page_log.py
index 8887519..8b96b2a 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/page_log.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/page_log.py
@@ -1,8 +1,15 @@
+from __future__ import print_function
+
 import datetime
 import pageutils
 from gi.repository import Gtk
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class LogEntry():
+
     def __init__(self, category, time, message):
         self.category = category
         self.time = int(time)
@@ -10,7 +17,9 @@ class LogEntry():
         self.message = message
         self.formattedText = "%s t=%s %s\n" % (category, self.timestr, message)
 
+
 class LogView(Gtk.ScrolledWindow):
+
     def __init__(self):
         Gtk.ScrolledWindow.__init__(self)
 
@@ -22,24 +31,24 @@ class LogView(Gtk.ScrolledWindow):
         self.add(self.textview)
 
         self.textbuffer = self.textview.get_buffer()
-        self.scroll_mark =  self.textbuffer.create_mark(None, self.textbuffer.get_end_iter(), False)
+        self.scroll_mark = self.textbuffer.create_mark(None, self.textbuffer.get_end_iter(), False)
 
         self.log = []
         self.addedMessages = 0
         self.firstMessageTime = None
 
-        self.enabledTypes = {'info': True, 'warning': True, 'error': True, 'trace': False }
+        self.enabledTypes = {'info': True, 'warning': True, 'error': True, 'trace': False}
         self.typeTags = {
-            'info': self.textbuffer.create_tag("info", foreground="#1a6f18", invisible=self.enabledTypes["info"] != True, invisible_set=True),
-            'warning': self.textbuffer.create_tag("warning", foreground="#c8bf33", invisible=self.enabledTypes["warning"] != True, invisible_set=True),
-            'error': self.textbuffer.create_tag("error", foreground="#9f1313", invisible=self.enabledTypes["error"] != True, invisible_set=True),
-            'trace': self.textbuffer.create_tag("trace", foreground="#18186f", invisible=self.enabledTypes["trace"] != True, invisible_set=True)
+            'info': self.textbuffer.create_tag("info", foreground="#1a6f18", invisible=self.enabledTypes["info"] is not True, invisible_set=True),
+            'warning': self.textbuffer.create_tag("warning", foreground="#c8bf33", invisible=self.enabledTypes["warning"] is not True, invisible_set=True),
+            'error': self.textbuffer.create_tag("error", foreground="#9f1313", invisible=self.enabledTypes["error"] is not True, invisible_set=True),
+            'trace': self.textbuffer.create_tag("trace", foreground="#18186f", invisible=self.enabledTypes["trace"] is not True, invisible_set=True)
         }
 
-        #todo: load all enabled types from gsettings
-        #self.enabledTypes = {'info': False, 'warning': False, 'error': False, 'trace': False }
-        #for key in data:
-        #    self.enabledTypes[key] = True
+        # todo: load all enabled types from gsettings
+        # self.enabledTypes = {'info': False, 'warning': False, 'error': False, 'trace': False }
+        # for key in data:
+        #     self.enabledTypes[key] = True
         self.getUpdates()
 
         lookingGlassProxy.connect("LogUpdate", self.getUpdates)
@@ -53,7 +62,7 @@ class LogView(Gtk.ScrolledWindow):
     def onButtonToggled(self, button, data):
         active = button.get_active()
         self.enabledTypes[data] = active
-        self.typeTags[data].props.invisible = active != True
+        self.typeTags[data].props.invisible = active is not True
         self.textbuffer.set_modified(True)
 
     def onStatusChange(self, online):
@@ -65,7 +74,7 @@ class LogView(Gtk.ScrolledWindow):
         self.textbuffer.insert_with_tags(textIter, entry.formattedText, self.typeTags[entry.category])
         self.getUpdates(True)
 
-    def getUpdates(self, reread = False):
+    def getUpdates(self, reread=False):
         success, data = lookingGlassProxy.GetErrorStack()
         if success:
             try:
@@ -83,14 +92,16 @@ class LogView(Gtk.ScrolledWindow):
 
                     textIter = self.textbuffer.get_end_iter()
                     for item in data[self.addedMessages:]:
-                        entry = self.append(item["category"], float(item["timestamp"])*0.001, item["message"])
+                        entry = self.append(item["category"], float(item["timestamp"]) * 0.001, item["message"])
                         self.textbuffer.insert_with_tags(textIter, entry.formattedText, self.typeTags[entry.category])
                         self.addedMessages += 1
                     self.textview.scroll_to_mark(self.scroll_mark, 0, True, 1, 1)
             except Exception as e:
-                print e
+                print(e)
+
 
 class ModulePage(pageutils.WindowAndActionBars):
+
     def __init__(self, parent):
         self.view = LogView()
         pageutils.WindowAndActionBars.__init__(self, self.view)
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/page_memory.py b/files/usr/share/cinnamon/cinnamon-looking-glass/page_memory.py
index dad339b..cc4f05c 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/page_memory.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/page_memory.py
@@ -1,7 +1,12 @@
 import pageutils
 from gi.repository import Gtk
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class MemoryView(pageutils.BaseListView):
+
     def __init__(self):
         store = Gtk.ListStore(str, int)
         pageutils.BaseListView.__init__(self, store)
@@ -17,11 +22,11 @@ class MemoryView(pageutils.BaseListView):
     def cellDataFuncSize(self, column, cell, model, iter, data=None):
         value = model.get_value(iter, 1)
         if(value < 1000):
-            cell.set_property("text", "%d B" %  value)
+            cell.set_property("text", "%d B" % value)
         elif(value < 1000000):
-            cell.set_property("text", "%.2f KB" %  (value/1024.0))
+            cell.set_property("text", "%.2f KB" % (value / 1024.0))
         elif(value < 1000000000):
-            cell.set_property("text", "%.2f MB" %  (value/1024.0/1024.0))
+            cell.set_property("text", "%.2f MB" % (value / 1024.0 / 1024.0))
 
     def onStatusChange(self, online):
         if online:
@@ -39,7 +44,9 @@ class MemoryView(pageutils.BaseListView):
         lookingGlassProxy.FullGc()
         self.getUpdates()
 
+
 class ModulePage(pageutils.WindowAndActionBars):
+
     def __init__(self, parent):
         self.view = MemoryView()
         pageutils.WindowAndActionBars.__init__(self, self.view)
@@ -51,7 +58,7 @@ class ModulePage(pageutils.WindowAndActionBars):
         self.addToLeftBar(refresh, 1)
         fullGc = pageutils.ImageButton("user-trash-full")
         fullGc.set_tooltip_text("Full Garbage Collection")
-        fullGc.connect ('clicked', self.view.onFullGc)
+        fullGc.connect('clicked', self.view.onFullGc)
 
         self.addToLeftBar(fullGc, 1)
         self.addToBottomBar(Gtk.Label("Time since last GC:"), 2)
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/page_results.py b/files/usr/share/cinnamon/cinnamon-looking-glass/page_results.py
index 26d2e4f..00a69c5 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/page_results.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/page_results.py
@@ -1,7 +1,14 @@
+from __future__ import print_function
+
 import pageutils
 from gi.repository import Gtk
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class ModulePage(pageutils.BaseListView):
+
     def __init__(self, parent):
         store = Gtk.ListStore(int, str, str, str, str)
         pageutils.BaseListView.__init__(self, store)
@@ -26,13 +33,13 @@ class ModulePage(pageutils.BaseListView):
         self._changed = False
         self.treeView.connect("size-allocate", self.scrollToBottom)
 
-    def scrollToBottom (self, widget, data):
+    def scrollToBottom(self, widget, data):
         if self._changed:
             self.adjust.set_value(self.adjust.get_upper() - self.adjust.get_page_size())
             self._changed = False
 
     def cellDataFuncID(self, column, cell, model, iter, data=None):
-        cell.set_property("text", "r(%d)" %  model.get_value(iter, 0))
+        cell.set_property("text", "r(%d)" % model.get_value(iter, 0))
 
     def onRowActivated(self, treeview, path, view_column):
         treeIter = self.store.get_iter(path)
@@ -57,7 +64,7 @@ class ModulePage(pageutils.BaseListView):
                 self._changed = True
                 self.parent.activatePage("results")
             except Exception as e:
-                print e
+                print(e)
 
     def onInspectorDone(self):
         melangeApp.show()
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/page_windows.py b/files/usr/share/cinnamon/cinnamon-looking-glass/page_windows.py
index 4dbdd97..8542304 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/page_windows.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/page_windows.py
@@ -1,7 +1,14 @@
+from __future__ import print_function
+
 import pageutils
 from gi.repository import Gtk
 
+lookingGlassProxy = None
+melangeApp = None
+
+
 class ModulePage(pageutils.BaseListView):
+
     def __init__(self, parent):
         store = Gtk.ListStore(int, str, str, str)
         pageutils.BaseListView.__init__(self, store)
@@ -36,7 +43,7 @@ class ModulePage(pageutils.BaseListView):
 
     def cellDataFuncID(self, column, cell, model, treeIter, data=None):
         value = model.get_value(treeIter, 0)
-        cell.set_property("text", "w(%d) / a(%d)" %  (value, value))
+        cell.set_property("text", "w(%d) / a(%d)" % (value, value))
 
     def onRowActivated(self, treeview, path, view_column):
         treeIter = self.store.get_iter(path)
@@ -68,13 +75,13 @@ class ModulePage(pageutils.BaseListView):
                 path, col, cellx, celly = pthinfo
                 self.selectedPath = path
                 treeview.grab_focus()
-                treeview.set_cursor( path, col, 0)
+                treeview.set_cursor(path, col, 0)
 
                 treeIter = self.store.get_iter(self.selectedPath)
                 app = self.store.get_value(treeIter, 3)
 
                 self.inspectApp.set_sensitive(app != "<untracked>")
-                self.popup.popup( None, None, None, None, event.button, event.time)
+                self.popup.popup(None, None, None, None, event.button, event.time)
             return True
 
     def onStatusChange(self, online):
@@ -89,4 +96,4 @@ class ModulePage(pageutils.BaseListView):
                 for item in data:
                     self.store.append([int(item["id"]), item["title"], item["wmclass"], item["app"]])
             except Exception as e:
-                print e
+                print(e)
diff --git a/files/usr/share/cinnamon/cinnamon-looking-glass/pageutils.py b/files/usr/share/cinnamon/cinnamon-looking-glass/pageutils.py
index 5dfa8b3..a412cc8 100644
--- a/files/usr/share/cinnamon/cinnamon-looking-glass/pageutils.py
+++ b/files/usr/share/cinnamon/cinnamon-looking-glass/pageutils.py
@@ -1,6 +1,8 @@
 from gi.repository import Gtk
 
+
 class ResultTextDialog(Gtk.Dialog):
+
     def __init__(self, title, text):
         Gtk.Dialog.__init__(self, title, None, 0,
                             (Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE))
@@ -23,7 +25,9 @@ class ResultTextDialog(Gtk.Dialog):
     def onResponse(self, id, data=None):
         self.destroy()
 
+
 class BaseListView(Gtk.ScrolledWindow):
+
     def __init__(self, store):
         Gtk.ScrolledWindow.__init__(self)
         self.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
@@ -42,7 +46,9 @@ class BaseListView(Gtk.ScrolledWindow):
         self.treeView.append_column(column)
         return column
 
+
 class WindowAndActionBars(Gtk.Table):
+
     def __init__(self, window):
         Gtk.Table.__init__(self, 2, 2, False)
 
@@ -50,8 +56,8 @@ class WindowAndActionBars(Gtk.Table):
         self.left = Gtk.VBox()
 
         self.attach(window, 1, 2, 0, 1)
-        self.attach(self.left, 0, 1, 0, 1, 0, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
-        self.attach(self.bottom, 0, 2, 1, 2, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL, 0)
+        self.attach(self.left, 0, 1, 0, 1, 0, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
+        self.attach(self.bottom, 0, 2, 1, 2, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 0)
 
     def addToLeftBar(self, widget, padding=0):
         self.left.set_border_width(2)
@@ -61,6 +67,7 @@ class WindowAndActionBars(Gtk.Table):
         self.bottom.set_border_width(2)
         self.bottom.pack_start(widget, False, False, padding)
 
+
 def loadIcon(name, size=Gtk.IconSize.LARGE_TOOLBAR):
     theme = Gtk.IconTheme.get_default()
     success, width, height = Gtk.icon_size_lookup(size)
@@ -68,7 +75,9 @@ def loadIcon(name, size=Gtk.IconSize.LARGE_TOOLBAR):
         return theme.load_icon(name, width, 0)
     return None
 
+
 class ImageButton(Gtk.Button):
+
     def __init__(self, iconName, size=Gtk.IconSize.LARGE_TOOLBAR):
         Gtk.Button.__init__(self)
 
@@ -79,7 +88,9 @@ class ImageButton(Gtk.Button):
             image.set_from_gicon(icon, size)
             self.add(image)
 
+
 class ImageToggleButton(Gtk.ToggleButton):
+
     def __init__(self, iconName, size=Gtk.IconSize.LARGE_TOOLBAR):
         Gtk.ToggleButton.__init__(self)
 
diff --git a/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MainWindow.py b/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MainWindow.py
index bd11b9d..47cce75 100644
--- a/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MainWindow.py
+++ b/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MainWindow.py
@@ -18,9 +18,9 @@
 #   Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA  02110-1335  USA
 
 import gi
-gi.require_version('Gtk', '3.0')
-gi.require_version('CMenu', '3.0')
-from gi.repository import Gtk, GObject, Gio, GdkPixbuf, Gdk, CMenu, GLib
+gi.require_version('Gtk', '3.0')  # noqa
+gi.require_version('CMenu', '3.0')  # noqa
+from gi.repository import Gtk, GObject, Gdk, CMenu
 import cgi
 import os
 import gettext
@@ -28,16 +28,17 @@ import subprocess
 import shutil
 
 from cme import config
-gettext.bindtextdomain(config.GETTEXT_PACKAGE, config.localedir)
-gettext.textdomain(config.GETTEXT_PACKAGE)
+gettext.bindtextdomain(config.GETTEXT_PACKAGE, config.localedir)  # noqa
+gettext.textdomain(config.GETTEXT_PACKAGE)  # noqa
 
-_ = gettext.gettext
+_ = gettext.gettext  # noqa
 from cme.MenuEditor import MenuEditor
 from cme import util
 
+
 class MainWindow(object):
     timer = None
-    #hack to make editing menu properties work
+    # hack to make editing menu properties work
     edit_pool = []
 
     def __init__(self, datadir, version):
@@ -98,30 +99,30 @@ class MainWindow(object):
                 menu_id = menus[iter][3].get_menu_id()
             update_menus = True
         self.loadMenus()
-        #find current menu in new tree
+        # find current menu in new tree
         if update_menus:
             menu_tree.get_model().foreach(self.findMenu, menu_id)
             menus, iter = menu_tree.get_selection().get_selected()
             if iter:
                 self.on_menu_tree_cursor_changed(menu_tree)
-        #find current item in new list
+        # find current item in new list
         if update_items:
             i = 0
             for item in item_tree.get_model():
                 found = False
                 if update_type != CMenu.TreeItemType.SEPARATOR:
-                    if isinstance (item[3], CMenu.TreeEntry) and item[3].get_desktop_file_id() == item_id:
+                    if isinstance(item[3], CMenu.TreeEntry) and item[3].get_desktop_file_id() == item_id:
                         found = True
-                    if isinstance (item[3], CMenu.TreeDirectory) and item[3].get_desktop_file_path() and update_type == CMenu.TreeItemType.DIRECTORY:
+                    if isinstance(item[3], CMenu.TreeDirectory) and item[3].get_desktop_file_path() and update_type == CMenu.TreeItemType.DIRECTORY:
                         if os.path.split(item[3].get_desktop_file_path())[1] == item_id:
                             found = True
                 if isinstance(item[3], CMenu.TreeSeparator):
                     if not isinstance(item_id, tuple):
-                        #we may not skip the increment via "continue"
+                        # we may not skip the increment via "continue"
                         i += 1
                         continue
-                    #separators have no id, have to find them manually
-                    #probably won't work with two separators together
+                    # separators have no id, have to find them manually
+                    # probably won't work with two separators together
                     if (item_id[0] - 1,) == (i,):
                         found = True
                     elif (item_id[0] + 1,) == (i,):
@@ -150,7 +151,7 @@ class MainWindow(object):
             return True
 
     def setupMenuTree(self):
-        self.menu_store = Gtk.TreeStore(object, str, bool, object) # bool is unused, just a placeholder
+        self.menu_store = Gtk.TreeStore(object, str, bool, object)  # bool is unused, just a placeholder
         menus = self.tree.get_object('menu_tree')                            # so object is the same index for
         column = Gtk.TreeViewColumn(_("Name"))                               # the menu tree and item tree
         column.set_spacing(4)
@@ -170,7 +171,7 @@ class MainWindow(object):
         cell.connect('toggled', self.on_item_tree_show_toggled)
         column.pack_start(cell, True)
         column.add_attribute(cell, 'active', 0)
-        #hide toggle for separators
+        # hide toggle for separators
         column.set_cell_data_func(cell, self._cell_data_toggle_func)
         items.append_column(column)
         column = Gtk.TreeViewColumn(_("Item"))
@@ -198,7 +199,7 @@ class MainWindow(object):
 
     def loadMenus(self):
         self.menu_store.clear()
-        self.loadMenu({ None: None })
+        self.loadMenu({None: None})
 
         menu_tree = self.tree.get_object('menu_tree')
         menu_tree.set_model(self.menu_store)
@@ -236,8 +237,8 @@ class MainWindow(object):
 
             self.item_store.append((show, icon, name, item))
 
-    #this is a little timeout callback to insert new items after
-    #gnome-desktop-item-edit has finished running
+    # this is a little timeout callback to insert new items after
+    # gnome-desktop-item-edit has finished running
     def waitForNewItemProcess(self, process, parent_id, file_path):
         if process.poll() is not None:
             if os.path.isfile(file_path):
@@ -252,7 +253,7 @@ class MainWindow(object):
             return False
         return True
 
-    #this callback keeps you from editing the same item twice
+    # this callback keeps you from editing the same item twice
     def waitForEditProcess(self, process, file_path):
         if process.poll() is not None:
             self.edit_pool.remove(file_path)
@@ -386,11 +387,11 @@ class MainWindow(object):
         self.tree.get_object('edit_paste').set_sensitive(can_paste)
         self.tree.get_object('paste_button').set_sensitive(can_paste)
 
-        index = menus.get_path(iter).get_indices()[menus.get_path(iter).get_depth() - 1]
-        parent_iter = menus.iter_parent(iter)
-        count =  menus.iter_n_children(parent_iter)
-        can_go_up = index > 0 and isinstance(menu, CMenu.TreeDirectory)
-        can_go_down = index < count - 1 and isinstance(menu, CMenu.TreeDirectory)
+        # index = menus.get_path(iter).get_indices()[menus.get_path(iter).get_depth() - 1]
+        # parent_iter = menus.iter_parent(iter)
+        # count = menus.iter_n_children(parent_iter)
+        # can_go_up = index > 0 and isinstance(menu, CMenu.TreeDirectory)
+        # can_go_down = index < count - 1 and isinstance(menu, CMenu.TreeDirectory)
         self.last_tree = "menu_tree"
 
     def on_item_tree_show_toggled(self, cell, path):
@@ -430,9 +431,9 @@ class MainWindow(object):
         self.tree.get_object('edit_paste').set_sensitive(can_paste)
         self.tree.get_object('paste_button').set_sensitive(can_paste)
 
-        index = items.get_path(iter).get_indices()[0]
-        can_go_up = index > 0 and isinstance(item, CMenu.TreeDirectory)
-        can_go_down = index < len(items) - 1 and isinstance(item, CMenu.TreeDirectory)
+        # index = items.get_path(iter).get_indices()[0]
+        # can_go_up = index > 0 and isinstance(item, CMenu.TreeDirectory)
+        # can_go_down = index < len(items) - 1 and isinstance(item, CMenu.TreeDirectory)
         self.last_tree = "item_tree"
 
     def on_item_tree_row_activated(self, treeview, path, column):
@@ -441,7 +442,7 @@ class MainWindow(object):
     def on_item_tree_popup_menu(self, item_tree, event=None):
         model, iter = item_tree.get_selection().get_selected()
         if event:
-            #don't show if it's not the right mouse button
+            # don't show if it's not the right mouse button
             if event.button != 3:
                 return
             button = event.button
@@ -459,13 +460,13 @@ class MainWindow(object):
             item_tree.set_cursor(path, item_tree.get_columns()[0], 0)
         popup = self.tree.get_object('edit_menu')
         popup.popup(None, None, None, None, button, event_time)
-        #without this shift-f10 won't work
+        # without this shift-f10 won't work
         return True
 
     def on_menu_tree_popup_menu(self, menu_tree, event=None):
         model, iter = menu_tree.get_selection().get_selected()
         if event:
-            #don't show if it's not the right mouse button
+            # don't show if it's not the right mouse button
             if event.button != 3:
                 return
             button = event.button
@@ -483,7 +484,7 @@ class MainWindow(object):
             menu_tree.set_cursor(path, menu_tree.get_columns()[0], 0)
         popup = self.tree.get_object('edit_menu')
         popup.popup(None, None, None, None, button, event_time)
-        #without this shift-f10 won't work
+        # without this shift-f10 won't work
         return True
 
     def on_item_tree_key_press_event(self, item_tree, event):
diff --git a/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MenuEditor.py b/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MenuEditor.py
index da433bb..a94f7d4 100644
--- a/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MenuEditor.py
+++ b/files/usr/share/cinnamon/cinnamon-menu-editor/cme/MenuEditor.py
@@ -22,11 +22,13 @@ import xml.parsers.expat
 from gi.repository import CMenu, GLib
 from cme import util
 
+
 class MenuEditor(object):
+
     def __init__(self, name='cinnamon-applications.menu'):
         self.name = name
 
-        self.tree = CMenu.Tree.new(name, CMenu.TreeFlags.SHOW_EMPTY|CMenu.TreeFlags.INCLUDE_EXCLUDED|CMenu.TreeFlags.INCLUDE_NODISPLAY|CMenu.TreeFlags.SHOW_ALL_SEPARATORS|CMenu.TreeFlags.SORT_DISPLAY_NAME)
+        self.tree = CMenu.Tree.new(name, CMenu.TreeFlags.SHOW_EMPTY | CMenu.TreeFlags.INCLUDE_EXCLUDED | CMenu.TreeFlags.INCLUDE_NODISPLAY | CMenu.TreeFlags.SHOW_ALL_SEPARATORS | CMenu.TreeFlags.SORT_DISPLAY_NAME)
         self.tree.connect('changed', self.menuChanged)
         self.load()
 
@@ -36,7 +38,7 @@ class MenuEditor(object):
     def loadDOM(self):
         try:
             self.dom = xml.dom.minidom.parse(self.path)
-        except (IOError, xml.parsers.expat.ExpatError), e:
+        except (IOError, xml.parsers.expat.ExpatError):
             self.dom = xml.dom.minidom.parseString(util.getUserMenuXml(self.tree))
         util.removeWhitespaceNodes(self.dom)
 
@@ -87,7 +89,7 @@ class MenuEditor(object):
     def restoreMenu(self, menu):
         if not self.canRevert(menu):
             return
-        #wtf happened here? oh well, just bail
+        # wtf happened here? oh well, just bail
         if not menu.get_desktop_file_path():
             return
         file_id = os.path.split(menu.get_desktop_file_path())[1]
@@ -105,7 +107,7 @@ class MenuEditor(object):
 
         item_iter = parent.iter()
         item_type = item_iter.next()
-        items = [];
+        items = []
         while item_type != CMenu.TreeItemType.INVALID:
             if item_type == CMenu.TreeItemType.DIRECTORY:
                 item = item_iter.get_directory()
@@ -185,7 +187,7 @@ class MenuEditor(object):
         elif isinstance(item, CMenu.TreeDirectory):
             item_iter = item.iter()
             first_child_type = item_iter.next()
-            #don't mess with it if it's empty
+            # don't mess with it if it's empty
             if first_child_type == CMenu.TreeItemType.INVALID:
                 return
             menu_xml = self.getXmlMenu(self.getPath(item), dom.documentElement, dom)
@@ -210,18 +212,18 @@ class MenuEditor(object):
         menu_id = file_id.rsplit('.', 1)[0]
         parent = self.findMenu(parent_id)
         dom = self.dom
-        self.addXmlDefaultLayout(self.getXmlMenu(self.getPath(parent), dom.documentElement, dom) , dom)
+        self.addXmlDefaultLayout(self.getXmlMenu(self.getPath(parent), dom.documentElement, dom), dom)
         menu_xml = self.getXmlMenu(self.getPath(parent) + [menu_id], dom.documentElement, dom)
         self.addXmlTextElement(menu_xml, 'Directory', file_id, dom)
         self.positionItem(parent, ('Menu', menu_id), before, after)
         self.save()
 
     def editItem(self, item, icon, name, comment, command, use_term, parent=None, final=True):
-        #if nothing changed don't make a user copy
+        # if nothing changed don't make a user copy
         app_info = item.get_app_info()
         if icon == app_info.get_icon() and name == app_info.get_display_name() and comment == item.get_comment() and command == item.get_exec() and use_term == item.get_launch_in_terminal():
             return
-        #hack, item.get_parent() seems to fail a lot
+        # hack, item.get_parent() seems to fail a lot
         if not parent:
             parent = item.get_parent()
         self.writeItem(item, Icon=icon, Name=name, Comment=comment, Exec=command, Terminal=use_term)
@@ -232,11 +234,11 @@ class MenuEditor(object):
         self.save()
 
     def editMenu(self, menu, icon, name, comment, final=True):
-        #if nothing changed don't make a user copy
+        # if nothing changed don't make a user copy
         if icon == menu.get_icon() and name == menu.get_name() and comment == menu.get_comment():
             return
-        #we don't use this, we just need to make sure the <Menu> exists
-        #otherwise changes won't show up
+        # we don't use this, we just need to make sure the <Menu> exists
+        # otherwise changes won't show up
         dom = self.dom
         menu_xml = self.getXmlMenu(self.getPath(menu), dom.documentElement, dom)
         self.writeMenu(menu, Icon=icon, Name=name, Comment=comment)
@@ -245,7 +247,7 @@ class MenuEditor(object):
         self.save()
 
     def copyItem(self, item):
-        dom = self.dom
+        # dom = self.dom
         file_path = item.get_desktop_file_path()
         copy_buffer = GLib.KeyFile()
         copy_buffer.load_from_file(file_path, util.KEY_FILE_FLAGS)
@@ -256,7 +258,7 @@ class MenuEditor(object):
         file_id = self.deleteItem(item)
         return (copy_buffer, file_id)
 
-    def pasteItem(self, cut_copy_buffer, menu, file_id = None):
+    def pasteItem(self, cut_copy_buffer, menu, file_id=None):
         try:
             path = self.getPath(menu)
             util.fillKeyFile(cut_copy_buffer, dict(Hidden=False, NoDisplay=False))
@@ -273,7 +275,7 @@ class MenuEditor(object):
             self.addXmlTextElement(menu_xml, 'AppDir', util.getUserItemPath(), self.dom)
             self.save()
             return True
-        except:
+        except Exception:
             return False
 
     def deleteItem(self, item):
@@ -334,7 +336,7 @@ class MenuEditor(object):
         while current is not None:
             try:
                 names.append(current.get_menu_id())
-            except:
+            except Exception:
                 names.append(current.get_desktop_file_id())
             current = current.get_parent()
 
@@ -374,7 +376,7 @@ class MenuEditor(object):
         node.appendChild(text)
         return element.appendChild(node)
 
-    def addXmlFilename(self, element, dom, filename, type = 'Include'):
+    def addXmlFilename(self, element, dom, filename, type='Include'):
         # remove old filenames
         for node in self.getXmlNodesByName(['Include', 'Exclude'], element):
             if node.childNodes[0].nodeName == 'Filename' and node.childNodes[0].childNodes[0].nodeValue == filename:
@@ -461,7 +463,7 @@ class MenuEditor(object):
             node = dom.createElement('Move')
             node.appendChild(self.addXmlTextElement(node, 'Old', old, dom))
             node.appendChild(self.addXmlTextElement(node, 'New', new, dom))
-            #are parsed in reverse order, need to put at the beginning
+            # are parsed in reverse order, need to put at the beginning
             return element.insertBefore(node, element.firstChild)
 
     def addXmlLayout(self, element, layout, dom):
@@ -522,14 +524,14 @@ class MenuEditor(object):
         index = -1
         if isinstance(item, CMenu.TreeDirectory):
             for i in range(len(contents)):
-                if type(item) is not type(contents[i]):
+                if type(item) is not type(contents[i]):  # noqa
                     continue
                 if item.get_menu_id() == contents[i].get_menu_id():
                     index = i
                     return index
         elif isinstance(item, CMenu.TreeEntry):
             for i in range(len(contents)):
-                if type(item) is not type(contents[i]):
+                if type(item) is not type(contents[i]):  # noqa
                     continue
                 if item.get_desktop_file_id() == contents[i].get_desktop_file_id():
                     index = i
@@ -548,7 +550,7 @@ class MenuEditor(object):
         else:
             # append the item to the list
             index = len(contents)
-        #if this is a move to a new parent you can't remove the item
+        # if this is a move to a new parent you can't remove the item
         item_index = self.getIndex(item, contents)
         if item_index > -1:
             # decrease the destination index, if we shorten the list
@@ -567,18 +569,18 @@ class MenuEditor(object):
         matches = []
         original_old = old
         final_old = old
-        #get all <Move> elements
+        # get all <Move> elements
         for node in self.getXmlNodesByName(['Move'], element):
             nodes.insert(0, node)
-        #if the <New> matches our old parent we've found a stage to undo
+        # if the <New> matches our old parent we've found a stage to undo
         for node in nodes:
             xml_old = node.getElementsByTagName('Old')[0]
             xml_new = node.getElementsByTagName('New')[0]
             if xml_new.childNodes[0].nodeValue == old:
                 matches.append(node)
-                #we should end up with this path when completed
+                # we should end up with this path when completed
                 final_old = xml_old.childNodes[0].nodeValue
-        #undoing <Move>s
+        # undoing <Move>s
         for node in matches:
             element.removeChild(node)
         if len(matches) > 0:
@@ -592,7 +594,7 @@ class MenuEditor(object):
                         name_node = node.getElementsByTagName('Name')[0]
                         name = name_node.childNodes[0].nodeValue
                         if name == os.path.split(new)[1]:
-                            #copy app and dir directory info from old <Menu>
+                            # copy app and dir directory info from old <Menu>
                             root_path = dom.getElementsByTagName('Menu')[0].getElementsByTagName('Name')[0].childNodes[0].nodeValue
                             xml_menu = self.getXmlMenu(root_path + '/' + new, dom.documentElement, dom)
                             for app_dir in node.getElementsByTagName('AppDir'):
diff --git a/files/usr/share/cinnamon/cinnamon-menu-editor/cme/util.py b/files/usr/share/cinnamon/cinnamon-menu-editor/cme/util.py
index 4f084fb..4d68f2a 100644
--- a/files/usr/share/cinnamon/cinnamon-menu-editor/cme/util.py
+++ b/files/usr/share/cinnamon/cinnamon-menu-editor/cme/util.py
@@ -25,6 +25,7 @@ from gi.repository import Gtk, GdkPixbuf, CMenu, GLib, Gdk
 DESKTOP_GROUP = GLib.KEY_FILE_DESKTOP_GROUP
 KEY_FILE_FLAGS = GLib.KeyFileFlags.KEEP_COMMENTS | GLib.KeyFileFlags.KEEP_TRANSLATIONS
 
+
 def fillKeyFile(keyfile, items):
     for key, item in items.iteritems():
         if item is None:
@@ -37,9 +38,11 @@ def fillKeyFile(keyfile, items):
         elif isinstance(item, Sequence):
             keyfile.set_string_list(DESKTOP_GROUP, key, item)
 
+
 def getNameFromKeyFile(keyfile):
     return keyfile.get_string(DESKTOP_GROUP, "Name")
 
+
 def getUniqueFileId(name, extension):
     while 1:
         filename = name + '-' + str(uuid.uuid1()) + extension
@@ -53,6 +56,7 @@ def getUniqueFileId(name, extension):
                 break
     return filename
 
+
 def getUniqueRedoFile(filepath):
     while 1:
         new_filepath = filepath + '.redo-' + str(uuid.uuid1())
@@ -60,6 +64,7 @@ def getUniqueRedoFile(filepath):
             break
     return new_filepath
 
+
 def getUniqueUndoFile(filepath):
     filename, extension = os.path.split(filepath)[1].rsplit('.', 1)
     while 1:
@@ -74,6 +79,7 @@ def getUniqueUndoFile(filepath):
             break
     return new_filepath
 
+
 def getItemPath(file_id):
     for path in GLib.get_system_data_dirs():
         file_path = os.path.join(path, 'applications', file_id)
@@ -81,12 +87,14 @@ def getItemPath(file_id):
             return file_path
     return None
 
+
 def getUserItemPath():
     item_dir = os.path.join(GLib.get_user_data_dir(), 'applications')
     if not os.path.isdir(item_dir):
         os.makedirs(item_dir)
     return item_dir
 
+
 def getDirectoryPath(file_id):
     for path in GLib.get_system_data_dirs():
         file_path = os.path.join(path, 'desktop-directories', file_id)
@@ -94,18 +102,21 @@ def getDirectoryPath(file_id):
             return file_path
     return None
 
+
 def getUserDirectoryPath():
     menu_dir = os.path.join(GLib.get_user_data_dir(), 'desktop-directories')
     if not os.path.isdir(menu_dir):
         os.makedirs(menu_dir)
     return menu_dir
 
+
 def getUserMenuPath():
     menu_dir = os.path.join(GLib.get_user_config_dir(), 'menus')
     if not os.path.isdir(menu_dir):
         os.makedirs(menu_dir)
     return menu_dir
 
+
 def getSystemMenuPath(file_id):
     for path in GLib.get_system_config_dirs():
         file_path = os.path.join(path, 'menus', file_id)
@@ -113,18 +124,22 @@ def getSystemMenuPath(file_id):
             return file_path
     return None
 
+
 def getUserMenuXml(tree):
     system_file = getSystemMenuPath(os.path.basename(tree.get_canonical_menu_path()))
     name = tree.get_root_directory().get_menu_id()
     menu_xml = "<!DOCTYPE Menu PUBLIC '-//freedesktop//DTD Menu 1.0//EN' 'http://standards.freedesktop.org/menu-spec/menu-1.0.dtd'>\n"
     menu_xml += "<Menu>\n  <Name>" + name + "</Name>\n  "
-    menu_xml += "<MergeFile type=\"parent\">" + system_file +    "</MergeFile>\n</Menu>\n"
+    menu_xml += "<MergeFile type=\"parent\">" + system_file + "</MergeFile>\n</Menu>\n"
     return menu_xml
 
+
 class SurfaceWrapper:
+
     def __init__(self, surface):
         self.surface = surface
 
+
 def getIcon(item, widget):
     wrapper = SurfaceWrapper(None)
     pixbuf = None
@@ -156,9 +171,10 @@ def getIcon(item, widget):
     if pixbuf.get_width() != size or pixbuf.get_height() != size:
         pixbuf = pixbuf.scale_simple(size, size, GdkPixbuf.InterpType.HYPER)
 
-    wrapper.surface = Gdk.cairo_surface_create_from_pixbuf (pixbuf, widget.get_scale_factor(), widget.get_window())
+    wrapper.surface = Gdk.cairo_surface_create_from_pixbuf(pixbuf, widget.get_scale_factor(), widget.get_window())
     return wrapper
 
+
 def removeWhitespaceNodes(node):
     remove_list = []
     for child in node.childNodes:
@@ -171,9 +187,11 @@ def removeWhitespaceNodes(node):
     for node in remove_list:
         node.parentNode.removeChild(node)
 
+
 def menuSortKey(node):
     prefCats = ["administration", "preferences"]
     key = node.get_menu_id().lower()
     name = node.get_name().lower()
-    if key in prefCats: name = "zzzz" + name # Hack for prefCats to be sorted at the end
+    if key in prefCats:
+        name = "zzzz" + name  # Hack for prefCats to be sorted at the end
     return name
diff --git a/files/usr/share/cinnamon/cinnamon-settings-users/cinnamon-settings-users.py b/files/usr/share/cinnamon/cinnamon-settings-users/cinnamon-settings-users.py
index aad5207..a6ecfab 100755
--- a/files/usr/share/cinnamon/cinnamon-settings-users/cinnamon-settings-users.py
+++ b/files/usr/share/cinnamon/cinnamon-settings-users/cinnamon-settings-users.py
@@ -1,7 +1,8 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
 import os
-import sys
 import pwd
 import grp
 import gettext
@@ -13,17 +14,20 @@ from random import randint
 import PIL
 from PIL import Image
 import gi
-gi.require_version("Gtk", "3.0")
-gi.require_version("AccountsService", "1.0")
+gi.require_version("Gtk", "3.0")  # noqa
+gi.require_version("AccountsService", "1.0")  # noqa
 from gi.repository import Gtk, GObject, Gio, GdkPixbuf, AccountsService, GLib
 
 gettext.install("cinnamon", "/usr/share/locale")
+_ = gettext.gettext
 
 (INDEX_USER_OBJECT, INDEX_USER_PICTURE, INDEX_USER_DESCRIPTION) = range(3)
 (INDEX_GID, INDEX_GROUPNAME) = range(2)
 
+
 class GroupDialog (Gtk.Dialog):
-    def __init__ (self, label, value, parent = None):
+
+    def __init__(self, label, value, parent=None):
         super(GroupDialog, self).__init__(None, parent)
 
         try:
@@ -49,8 +53,8 @@ class GroupDialog (Gtk.Dialog):
             self.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OK, Gtk.ResponseType.OK, )
             self.set_response_sensitive(Gtk.ResponseType.OK, False)
 
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
 
     def _on_entry_changed(self, entry):
         name = entry.get_text()
@@ -65,8 +69,10 @@ class GroupDialog (Gtk.Dialog):
         if entry.get_text() == "":
             self.set_response_sensitive(Gtk.ResponseType.OK, False)
 
-class DimmedTable (Gtk.Table):
-    def __init__ (self):
+
+class DimmedTable(Gtk.Table):
+
+    def __init__(self):
         super(DimmedTable, self).__init__()
         self.set_border_width(6)
         self.set_row_spacings(8)
@@ -75,17 +81,17 @@ class DimmedTable (Gtk.Table):
     def add_labels(self, texts):
         row = 0
         for text in texts:
-            if text != None:
+            if text is not None:
                 label = Gtk.Label(text)
                 label.set_alignment(1, 0.5)
                 label.get_style_context().add_class("dim-label")
-                self.attach(label, 0, 1, row, row+1, xoptions=Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
+                self.attach(label, 0, 1, row, row + 1, xoptions=Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
             row = row + 1
 
     def add_controls(self, controls):
         row = 0
         for control in controls:
-            self.attach(control, 1, 2, row, row+1)
+            self.attach(control, 1, 2, row, row + 1)
             row = row + 1
 
 
@@ -99,7 +105,7 @@ class EditableEntry (Gtk.Notebook):
     PAGE_BUTTON = 0
     PAGE_ENTRY = 1
 
-    def __init__ (self):
+    def __init__(self):
         super(EditableEntry, self).__init__()
 
         self.label = Gtk.Label()
@@ -108,8 +114,8 @@ class EditableEntry (Gtk.Notebook):
 
         self.button.set_alignment(0.0, 0.5)
         self.button.set_relief(Gtk.ReliefStyle.NONE)
-        self.append_page(self.button, None);
-        self.append_page(self.entry, None);
+        self.append_page(self.button, None)
+        self.append_page(self.entry, None)
         self.set_current_page(0)
         self.set_show_tabs(False)
         self.set_show_border(False)
@@ -151,9 +157,10 @@ class EditableEntry (Gtk.Notebook):
     def get_text(self):
         return self.entry.get_text()
 
+
 class PasswordDialog(Gtk.Dialog):
 
-    def __init__ (self, user, password_mask, group_mask, parent = None):
+    def __init__(self, user, password_mask, group_mask, parent=None):
         super(PasswordDialog, self).__init__(None, parent)
 
         self.user = user
@@ -178,7 +185,7 @@ class PasswordDialog(Gtk.Dialog):
         self.strengh_indicator = Gtk.ProgressBar()
         self.strengh_indicator.set_tooltip_text(_("Your new password needs to be at least 8 characters long"))
         self.strengh_indicator.set_fraction(0.0)
-        table.attach(self.strengh_indicator, 1, 2, 1, 2, xoptions=Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
+        table.attach(self.strengh_indicator, 1, 2, 1, 2, xoptions=Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
         self.strengh_indicator.set_size_request(-1, 1)
 
         self.strengh_label = Gtk.Label()
@@ -244,8 +251,8 @@ class PasswordDialog(Gtk.Dialog):
         self.show_password.set_active(True)
         characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-"
         newpass = ""
-        for i in range (8):
-            index = randint(0, len(characters) -1)
+        for i in range(8):
+            index = randint(0, len(characters) - 1)
             newpass = newpass + characters[index]
 
         self.new_password.set_text(newpass)
@@ -270,10 +277,10 @@ class PasswordDialog(Gtk.Dialog):
                 symbol += 1
         length = len(password)
 
-        length = min(length,4)
-        digit = min(digit,3)
-        upper = min(upper,3)
-        symbol = min(symbol,3)
+        length = min(length, 4)
+        digit = min(digit, 3)
+        upper = min(upper, 3)
+        symbol = min(symbol, 3)
         strength = (
             ((length * 0.1) - 0.2) +
             (digit * 0.1) +
@@ -321,9 +328,10 @@ class PasswordDialog(Gtk.Dialog):
         else:
             self.set_response_sensitive(Gtk.ResponseType.OK, False)
 
+
 class NewUserDialog(Gtk.Dialog):
 
-    def __init__ (self, parent = None):
+    def __init__(self, parent=None):
         super(NewUserDialog, self).__init__(None, parent)
 
         try:
@@ -360,8 +368,8 @@ class NewUserDialog(Gtk.Dialog):
             self.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_ADD, Gtk.ResponseType.OK, )
             self.set_response_sensitive(Gtk.ResponseType.OK, False)
 
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
 
     def _on_info_changed(self, widget):
         fullname = self.realname_entry.get_text()
@@ -378,9 +386,10 @@ class NewUserDialog(Gtk.Dialog):
 
         self.set_response_sensitive(Gtk.ResponseType.OK, valid)
 
+
 class GroupsDialog(Gtk.Dialog):
 
-    def __init__ (self, username, parent = None):
+    def __init__(self, username, parent=None):
         super(GroupsDialog, self).__init__(None, parent)
 
         try:
@@ -412,8 +421,8 @@ class GroupsDialog(Gtk.Dialog):
 
             self.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OK, Gtk.ResponseType.OK, )
 
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
 
     def get_selected_groups(self):
         groups = []
@@ -422,7 +431,9 @@ class GroupsDialog(Gtk.Dialog):
                 groups.append(checkbox.get_label())
         return groups
 
+
 class Module:
+
     def __init__(self):
         try:
             self.builder = Gtk.Builder()
@@ -504,19 +515,19 @@ class Module:
                         path = os.path.join(face_dir, picture)
                         file = Gio.File.new_for_path(path)
                         file_icon = Gio.FileIcon.new(file)
-                        image = Gtk.Image.new_from_gicon (file_icon, Gtk.IconSize.DIALOG)
+                        image = Gtk.Image.new_from_gicon(file_icon, Gtk.IconSize.DIALOG)
                         menuitem = Gtk.MenuItem()
                         menuitem.add(image)
                         menuitem.connect('activate', self._on_face_menuitem_activated, path)
-                        self.menu.attach(menuitem, col, col+1, row, row+1)
-                        col = (col+1) % num_cols
+                        self.menu.attach(menuitem, col, col + 1, row, row + 1)
+                        col = (col + 1) % num_cols
                         if (col == 0):
                             row = row + 1
 
             row = row + 1
 
-            self.menu.attach(separator, 0, 4, row, row+1)
-            self.menu.attach(face_browse_menuitem, 0, 4, row+2, row+3)
+            self.menu.attach(separator, 0, 4, row, row + 1)
+            self.menu.attach(face_browse_menuitem, 0, 4, row + 2, row + 3)
 
             self.account_type_combo = Gtk.ComboBoxText()
             self.account_type_combo.append_text(_("Standard"))
@@ -563,19 +574,19 @@ class Module:
 
             self.builder.get_object("box_users").hide()
 
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
 
     def _on_password_button_clicked(self, widget):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             dialog = PasswordDialog(user, self.password_mask, self.groups_label, self.window)
-            response = dialog.run()
+            dialog.run()
 
     def _on_groups_button_clicked(self, widget):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             dialog = GroupsDialog(user.get_user_name(), self.window)
             response = dialog.run()
@@ -588,7 +599,7 @@ class Module:
 
     def _on_accounttype_changed(self, combobox):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             if self.account_type_combo.get_active() == 1:
                 user.set_account_type(AccountsService.UserAccountType.ADMINISTRATOR)
@@ -604,7 +615,7 @@ class Module:
 
     def _on_realname_changed(self, widget, text):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             user.set_real_name(text)
             description = "<b>%s</b>\n%s" % (text, user.get_user_name())
@@ -612,7 +623,7 @@ class Module:
 
     def _on_face_browse_menuitem_activated(self, menuitem):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             dialog = Gtk.FileChooserDialog(None, None, Gtk.FileChooserAction.OPEN, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
             filter = Gtk.FileFilter()
@@ -650,7 +661,7 @@ class Module:
 
             dialog.destroy()
 
-    def update_preview_cb (self, dialog, preview):
+    def update_preview_cb(self, dialog, preview):
         # Different widths make the dialog look really crappy as it resizes -
         # constrain the width and adjust the height to keep perspective.
         filename = dialog.get_preview_filename()
@@ -671,7 +682,7 @@ class Module:
     def _on_face_menuitem_activated(self, menuitem, path):
         if os.path.exists(path):
             model, treeiter = self.users_treeview.get_selection().get_selected()
-            if treeiter != None:
+            if treeiter is not None:
                 user = model[treeiter][INDEX_USER_OBJECT]
                 user.set_icon_file(path)
                 self.face_image.set_from_file(path)
@@ -679,16 +690,15 @@ class Module:
                 model.set_value(treeiter, INDEX_USER_PICTURE, GdkPixbuf.Pixbuf.new_from_file_at_size(path, 48, 48))
                 model.row_changed(model.get_path(treeiter), treeiter)
 
-
     def menu_display(self, widget, event):
         if event.button == 1:
             self.menu.popup(None, None, self.popup_menu_below_button, self.face_button, event.button, event.time)
             self.menu.show_all()
 
-    def popup_menu_below_button (self, *args):
+    def popup_menu_below_button(self, *args):
         # the introspection for GtkMenuPositionFunc seems to change with each Gtk version,
         # this is a workaround to make sure we get the menu and the widget
-        menu = args[0]
+        args[0]
         widget = args[-1]
 
         # here I get the coordinates of the button relative to
@@ -703,7 +713,7 @@ class Module:
         # now move the menu below the button
         y += widget.get_allocation().height
 
-        push_in = True # push_in is True so all menu is always inside screen
+        push_in = True  # push_in is True so all menu is always inside screen
         return (x, y, push_in)
 
     def on_accounts_service_loaded(self, user, param):
@@ -718,7 +728,7 @@ class Module:
             else:
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size("/usr/share/cinnamon/faces/user-generic.png", 48, 48)
             description = "<b>%s</b>\n%s" % (user.get_real_name(), user.get_user_name())
-            piter = self.users.append(None, [user, pixbuf, description])
+            self.users.append(None, [user, pixbuf, description])
         self.users_treeview.set_model(self.users)
 
     def load_groups(self):
@@ -726,17 +736,17 @@ class Module:
         groups = sorted(grp.getgrall(), key=lambda x: x[0], reverse=False)
         for group in groups:
             (gr_name, gr_passwd, gr_gid, gr_mem) = group
-            piter = self.groups.append(None, [gr_gid, gr_name])
+            self.groups.append(None, [gr_gid, gr_name])
         self.groups_treeview.set_model(self.groups)
 
-#USER CALLBACKS
+# USER CALLBACKS
 
     def on_user_selection(self, selection):
         self.password_button.set_sensitive(True)
         self.password_button.set_tooltip_text("")
 
         model, treeiter = selection.get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             self.builder.get_object("button_delete_user").set_sensitive(True)
             self.realname_entry.set_text(user.get_real_name())
@@ -762,21 +772,21 @@ class Module:
                     pixbuf = GdkPixbuf.Pixbuf.new_from_file(path)
                 except GLib.Error as e:
                     message = "Could not load pixbuf from '%s': %s" % (path, e.message)
-                    error = True
+                    # error = True
 
-                if pixbuf != None:
+                if pixbuf is not None:
                     if pixbuf.get_height() > 96 or pixbuf.get_width() > 96:
                         try:
                             pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(path, 96, 96)
                         except GLib.Error as e:
                             message = "Could not scale pixbuf from '%s': %s" % (path, e.message)
-                            error = True
+                            # error = True
 
             if pixbuf:
                 self.face_image.set_from_pixbuf(pixbuf)
             else:
                 if message != "":
-                    print message
+                    print(message)
                 self.face_image.set_from_file("/usr/share/cinnamon/faces/user-generic.png")
 
             groups = []
@@ -806,7 +816,7 @@ class Module:
 
     def on_user_deletion(self, event):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             user = model[treeiter][INDEX_USER_OBJECT]
             message = _("Are you sure you want to permanently delete %s and all the files associated with this user?") % user.get_user_name()
             d = Gtk.MessageDialog(self.window,
@@ -838,7 +848,7 @@ class Module:
             new_user.set_password_mode(AccountsService.UserPasswordMode.NONE)
             pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size("/usr/share/cinnamon/faces/user-generic.png", 48, 48)
             description = "<b>%s</b>\n%s" % (fullname, username)
-            piter = self.users.append(None, [new_user, pixbuf, description])
+            self.users.append(None, [new_user, pixbuf, description])
             # Add the user to his/her own group and sudo if Administrator was selected
             if dialog.account_type_combo.get_active() == 1:
                 subprocess.call(["usermod", username, "-G", "%s,sudo,nopasswdlogin" % username])
@@ -849,14 +859,14 @@ class Module:
 
     def on_user_edition(self, event):
         model, treeiter = self.users_treeview.get_selection().get_selected()
-        if treeiter != None:
-            print "Editing user %s" % model[treeiter][INDEX_USER_OBJECT].get_user_name()
+        if treeiter is not None:
+            print("Editing user %s" % model[treeiter][INDEX_USER_OBJECT].get_user_name())
 
 # GROUPS CALLBACKS
 
     def on_group_selection(self, selection):
         model, treeiter = selection.get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             self.builder.get_object("button_edit_group").set_sensitive(True)
             self.builder.get_object("button_delete_group").set_sensitive(True)
             self.builder.get_object("button_delete_group").set_tooltip_text("")
@@ -876,7 +886,7 @@ class Module:
 
     def on_group_deletion(self, event):
         model, treeiter = self.groups_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             group = model[treeiter][INDEX_GROUPNAME]
             message = _("Are you sure you want to permanently delete %s?") % group
             d = Gtk.MessageDialog(self.window,
@@ -902,7 +912,7 @@ class Module:
 
     def on_group_edition(self, event):
         model, treeiter = self.groups_treeview.get_selection().get_selected()
-        if treeiter != None:
+        if treeiter is not None:
             group = model[treeiter][INDEX_GROUPNAME]
             dialog = GroupDialog(_("Group Name"), group, self.window)
             response = dialog.run()
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/ChooserButtonWidgets.py b/files/usr/share/cinnamon/cinnamon-settings/bin/ChooserButtonWidgets.py
index 4fa0b2d..a8a4368 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/ChooserButtonWidgets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/ChooserButtonWidgets.py
@@ -6,6 +6,7 @@ import os
 import math
 import gettext
 gettext.install("cinnamon", "/usr/share/locale")
+_ = gettext.gettext
 
 TWEEN_SHAPES = ["Quad", "Cubic", "Quart", "Quint", "Sine", "Expo", "Circ", "Elastic", "Back", "Bounce"]
 TWEEN_DIRECTIONS = ["In", "Out", "InOut", "OutIn"]
@@ -25,8 +26,10 @@ PREVIEW_WIDTH = 96
 ANIMATION_DURATION = 800
 ANIMATION_FRAME_RATE = 20
 
+
 class BaseChooserButton(Gtk.Button):
-    def __init__ (self, has_button_label=False):
+
+    def __init__(self, has_button_label=False):
         super(BaseChooserButton, self).__init__()
         self.set_valign(Gtk.Align.CENTER)
         self.menu = Gtk.Menu()
@@ -39,7 +42,7 @@ class BaseChooserButton(Gtk.Button):
         self.add(self.button_box)
         self.connect("button-release-event", self._on_button_clicked)
 
-    def popup_menu_below_button (self, *args):
+    def popup_menu_below_button(self, *args):
         # the introspection for GtkMenuPositionFunc seems to change with each Gtk version,
         # this is a workaround to make sure we get the menu and the widget
         menu = args[0]
@@ -67,7 +70,7 @@ class BaseChooserButton(Gtk.Button):
         elif (y + mrect.height) < (window_y + wrect.y + wrect.height):
             y = y + ((window_y + wrect.y + wrect.height) - (y + mrect.height))
 
-        push_in = True # push_in is True so all menu is always inside screen
+        push_in = True  # push_in is True so all menu is always inside screen
         return (x, y, push_in)
 
     def _on_button_clicked(self, widget, event):
@@ -75,8 +78,10 @@ class BaseChooserButton(Gtk.Button):
             self.menu.show_all()
             self.menu.popup(None, None, self.popup_menu_below_button, self, event.button, event.time)
 
+
 class PictureChooserButton(BaseChooserButton):
-    def __init__ (self, num_cols=4, button_picture_size=24, menu_pictures_size=24, has_button_label=False, keep_square=False):
+
+    def __init__(self, num_cols=4, button_picture_size=24, menu_pictures_size=24, has_button_label=False, keep_square=False):
         super(PictureChooserButton, self).__init__(has_button_label)
         self.num_cols = num_cols
         self.button_picture_size = button_picture_size
@@ -130,7 +135,7 @@ class PictureChooserButton(BaseChooserButton):
         self.progress = 0.0
         self.queue_draw()
 
-    def set_picture_from_file (self, path):
+    def set_picture_from_file(self, path):
         pixbuf = None
         message = ""
 
@@ -139,9 +144,9 @@ class PictureChooserButton(BaseChooserButton):
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file(path)
             except GLib.Error as e:
                 message = "Could not load pixbuf from '%s': %s" % (path, e.message)
-                error = True
+                # error = True
 
-            if pixbuf != None:
+            if pixbuf is not None:
                 h = pixbuf.get_height()
                 w = pixbuf.get_width()
 
@@ -150,13 +155,13 @@ class PictureChooserButton(BaseChooserButton):
                         pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(path, self.button_picture_size, self.button_picture_size)
                     except GLib.Error as e:
                         message = "Could not scale pixbuf from '%s': %s" % (path, e.message)
-                        error = True
+                        # error = True
                 elif h > self.button_picture_size:
                     try:
                         pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(path, -1, self.button_picture_size)
                     except GLib.Error as e:
                         message = "Could not scale pixbuf from '%s': %s" % (path, e.message)
-                        error = True
+                        # error = True
 
         if pixbuf:
             self.button_image.set_from_pixbuf(pixbuf)
@@ -189,7 +194,7 @@ class PictureChooserButton(BaseChooserButton):
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file(path)
             else:
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(path, -1, self.menu_pictures_size, True)
-            image = Gtk.Image.new_from_pixbuf (pixbuf)
+            image = Gtk.Image.new_from_pixbuf(pixbuf)
             menuitem = Gtk.MenuItem()
             if title is not None:
                 vbox = Gtk.VBox()
@@ -204,22 +209,23 @@ class PictureChooserButton(BaseChooserButton):
                 menuitem.connect('activate', self._on_picture_selected, path, callback, id)
             else:
                 menuitem.connect('activate', self._on_picture_selected, path, callback)
-            self.menu.attach(menuitem, self.col, self.col+1, self.row, self.row+1)
-            self.col = (self.col+1) % self.num_cols
+            self.menu.attach(menuitem, self.col, self.col + 1, self.row, self.row + 1)
+            self.col = (self.col + 1) % self.num_cols
             if (self.col == 0):
                 self.row = self.row + 1
 
     def add_separator(self):
         self.row = self.row + 1
-        self.menu.attach(Gtk.SeparatorMenuItem(), 0, self.num_cols, self.row, self.row+1)
+        self.menu.attach(Gtk.SeparatorMenuItem(), 0, self.num_cols, self.row, self.row + 1)
 
     def add_menuitem(self, menuitem):
         self.row = self.row + 1
-        self.menu.attach(menuitem, 0, self.num_cols, self.row, self.row+1)
+        self.menu.attach(menuitem, 0, self.num_cols, self.row, self.row + 1)
+
 
 class DateChooserButton(Gtk.Button):
     __gsignals__ = {
-        'date-changed': (GObject.SignalFlags.RUN_FIRST, None, (int,int,int))
+        'date-changed': (GObject.SignalFlags.RUN_FIRST, None, (int, int, int))
     }
 
     def __init__(self):
@@ -240,12 +246,12 @@ class DateChooserButton(Gtk.Button):
 
         calendar = Gtk.Calendar()
         content.pack_start(calendar, True, True, 0)
-        calendar.select_month(self.month-1, self.year)
+        calendar.select_month(self.month - 1, self.year)
         calendar.select_day(self.day)
 
         def select_today(*args):
             date = GLib.DateTime.new_now_local().get_ymd()
-            calendar.select_month(date[1]-1, date[0])
+            calendar.select_month(date[1] - 1, date[0])
             calendar.select_day(date[2])
 
         today = Gtk.Button(label=_("Today"))
@@ -258,7 +264,7 @@ class DateChooserButton(Gtk.Button):
 
         if response == Gtk.ResponseType.OK:
             date = calendar.get_date()
-            self.set_date(date[0], date[1]+1, date[2]) #calendar uses 0 based month
+            self.set_date(date[0], date[1] + 1, date[2])  # calendar uses 0 based month
             self.emit("date-changed", self.year, self.month, self.day)
 
         self.dialog.destroy()
@@ -275,7 +281,8 @@ class DateChooserButton(Gtk.Button):
         date_string = date.format(_("%B %e, %Y"))
         self.set_label(date_string)
 
-def draw_window(context, x, y, color, alpha = 1, scale = 1):
+
+def draw_window(context, x, y, color, alpha=1, scale=1):
     if scale <= 0:
         return
     alpha = min(max(alpha, 0), 1)
@@ -289,15 +296,19 @@ def draw_window(context, x, y, color, alpha = 1, scale = 1):
     context.fill()
     context.restore()
 
+
 # The following classes contain the functions to draw effect previews. To add a new effect,
 # you will only need to include the draw_preview function. To provide an animation preview,
 # you will also need to include the animate fuction. You will also need to add your new effect
 # to EFFECT_STYLES_NAME above
 class none(object):
+
     def draw_preview(self, context, x, y, color):
         draw_window(context, x, y, color, 1.)
 
+
 class scale(object):
+
     def draw_preview(self, context, x, y, color):
         steps = 3
         for i in range(steps):
@@ -307,7 +318,9 @@ class scale(object):
         scale = 1 - percent_complete
         draw_window(context, x, y, color, scale=scale)
 
+
 class fade(object):
+
     def draw_preview(self, context, x, y, color):
         draw_window(context, x, y, color, .5)
 
@@ -315,7 +328,9 @@ class fade(object):
         alpha = 1 - percent_complete
         draw_window(context, x, y, color, alpha=alpha)
 
+
 class blend(object):
+
     def draw_preview(self, context, x, y, color):
         steps = 3
         for i in range(steps):
@@ -326,7 +341,9 @@ class blend(object):
         alpha = 1 - percent_complete
         draw_window(context, x, y, color, alpha=alpha, scale=scale)
 
+
 class traditional(object):
+
     def draw_preview(self, context, x, y, color):
         gradient = cairo.LinearGradient(x, y * 2, x, y)
         gradient.add_color_stop_rgba(0, color.red, color.green, color.blue, 0)
@@ -345,7 +362,9 @@ class traditional(object):
         alpha = 1 - percent_complete
         draw_window(context, x, y, color, alpha=alpha, scale=scale)
 
+
 class move(object):
+
     def draw_preview(self, context, x, y, color):
         gradient = cairo.LinearGradient(0, 0, x, y)
         gradient.add_color_stop_rgba(0, color.red, color.green, color.blue, 0)
@@ -359,9 +378,11 @@ class move(object):
 
     def animate(self, context, x, y, percent_complete, color):
         remain = 1 - percent_complete
-        draw_window(context, x*remain, y*remain, color, scale=remain)
+        draw_window(context, x * remain, y * remain, color, scale=remain)
+
 
 class flyUp(object):
+
     def draw_preview(self, context, x, y, color):
         gradient = cairo.LinearGradient(0, y * 2, 0, y * 1.5)
         gradient.add_color_stop_rgba(0, color.red, color.green, color.blue, 0)
@@ -374,7 +395,9 @@ class flyUp(object):
         y *= 1 - percent_complete * 1.5
         draw_window(context, x, y, color)
 
+
 class flyDown(object):
+
     def draw_preview(self, context, x, y, color):
         gradient = cairo.LinearGradient(0, 0, 0, y / 2)
         gradient.add_color_stop_rgba(0, color.red, color.green, color.blue, 0)
@@ -387,6 +410,7 @@ class flyDown(object):
         y *= 1 + percent_complete * 1.5
         draw_window(context, x, y, color)
 
+
 # a button to select tweens
 class TweenChooserButton(BaseChooserButton):
     __gproperties__ = {
@@ -436,8 +460,10 @@ class TweenChooserButton(BaseChooserButton):
         else:
             raise AttributeError('unknown property %s' % prop.name)
 
+
 # menu item for TweenChooserButton
 class TweenMenuItem(Gtk.MenuItem):
+
     def __init__(self, tween_type):
         super(TweenMenuItem, self).__init__()
 
@@ -496,7 +522,7 @@ class TweenMenuItem(Gtk.MenuItem):
         color = style.get_color(Gtk.StateFlags.NORMAL)
         context.set_source_rgb(color.red, color.green, color.blue)
 
-        value = self.tween_function(self.elapsed/ANIMATION_DURATION, height * 6, -height * 4, 1)
+        value = self.tween_function(self.elapsed / ANIMATION_DURATION, height * 6, -height * 4, 1)
         context.arc(5, value, 5, math.pi / 2, math.pi * 1.5)
         context.fill()
 
@@ -527,6 +553,7 @@ class TweenMenuItem(Gtk.MenuItem):
 
         return True
 
+
 # a button to select effect types
 class EffectChooserButton(BaseChooserButton):
     __gproperties__ = {
@@ -541,7 +568,7 @@ class EffectChooserButton(BaseChooserButton):
         super(EffectChooserButton, self).__init__()
 
         self.effect = ""
-        self.effect_styles = ["none", "scale"] if effect_styles == None else effect_styles
+        self.effect_styles = ["none", "scale"] if effect_styles is None else effect_styles
 
         self.set_size_request(128, -1)
 
@@ -556,7 +583,7 @@ class EffectChooserButton(BaseChooserButton):
 
     def build_menuitem(self, effect_type, col, row):
         # apply the specific effect type methods onto the base effect type menu item
-        EffectTypeMenuItem = type(effect_type+"MenuItem",
+        EffectTypeMenuItem = type(effect_type + "MenuItem",
                                   (globals()[effect_type], EffectMenuItem),
                                   {"effect_type": effect_type})
         menuitem = EffectTypeMenuItem()
@@ -580,8 +607,10 @@ class EffectChooserButton(BaseChooserButton):
         else:
             raise AttributeError('unknown property %s' % prop.name)
 
+
 # menu item for TweenChooserButton
 class EffectMenuItem(Gtk.MenuItem):
+
     def __init__(self):
         super(EffectMenuItem, self).__init__()
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py b/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py
index 24ac0c3..1c54b67 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py
@@ -1,36 +1,42 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
 import os.path
 
 import gi
-gi.require_version("Gtk", "3.0")
+gi.require_version("Gtk", "3.0")  # noqa
 from gi.repository import GLib, Gtk
 
-from  SettingsWidgets import SettingsWidget
+from SettingsWidgets import SettingsWidget
 
 SETTINGS_GROUP_NAME = "Settings"
 
 instance = None
 
+
 def get_editor():
     global instance
 
-    if instance == None:
+    if instance is None:
         instance = GtkSettingsEditor()
 
     return instance
 
+
 class GtkSettingsEditor:
+
     def __init__(self):
         self._path = os.path.join(GLib.get_user_config_dir(),
                                   "gtk-3.0",
                                   "settings.ini")
+
     def _get_keyfile(self):
         keyfile = None
         try:
             keyfile = GLib.KeyFile()
             keyfile.load_from_file(self._path, 0)
-        except:
+        except Exception:
             pass
         finally:
             return keyfile
@@ -39,23 +45,25 @@ class GtkSettingsEditor:
         keyfile = self._get_keyfile()
         try:
             result = keyfile.get_boolean(SETTINGS_GROUP_NAME, key)
-        except:
+        except Exception:
             result = False
 
         return result
 
     def set_boolean(self, key, value):
-        print "set", value
+        print("set", value)
         keyfile = self._get_keyfile()
         keyfile.set_boolean(SETTINGS_GROUP_NAME, key, value)
 
         try:
             data = keyfile.to_data()
             GLib.file_set_contents(self._path, data[0])
-        except:
+        except Exception:
             raise
 
+
 class GtkSettingsSwitch(SettingsWidget):
+
     def __init__(self, markup, setting_name=None):
         self.setting_name = setting_name
         super(GtkSettingsSwitch, self).__init__(dep_key=None)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/ExtensionCore.py b/files/usr/share/cinnamon/cinnamon-settings/bin/ExtensionCore.py
index 59f631b..076328a 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/ExtensionCore.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/ExtensionCore.py
@@ -1,22 +1,23 @@
 #!/usr/bin/python2
 
-import sys
+from __future__ import print_function
+
 import os
 import re
-import json
 import cgi
 import subprocess
 import gettext
 from HTMLParser import HTMLParser
 import htmlentitydefs
 
-import dbus
 import gi
-gi.require_version('Gtk', '3.0')
-from gi.repository import Gio, Gtk, GObject, Gdk, GdkPixbuf, Pango, GLib
+gi.require_version('Gtk', '3.0')  # noqa
+from gi.repository import Gtk, GdkPixbuf, GLib
+
+from SettingsWidgets import SettingsPage, SettingsWidget, SettingsLabel
+from Spices import ThreadedTaskManager
 
-from SettingsWidgets import SidePage, SettingsStack, SettingsPage, SettingsWidget, SettingsLabel
-from Spices import Spice_Harvester, ThreadedTaskManager
+_ = gettext.gettext
 
 home = os.path.expanduser('~')
 
@@ -34,6 +35,7 @@ UNSAFE_ITEMS = ['spawn_sync', 'spawn_command_line_sync', 'GTop', 'get_file_conte
 
 curr_ver = subprocess.check_output(['cinnamon', '--version']).splitlines()[0].split(' ')[1]
 
+
 def find_extension_subdir(directory):
     largest = [0]
     curr_a = curr_ver.split('.')
@@ -55,10 +57,12 @@ def find_extension_subdir(directory):
     else:
         return os.path.join(directory, ".".join(largest))
 
+
 translations = {}
 
+
 def translate(uuid, string):
-    #check for a translation for this xlet
+    # check for a translation for this xlet
     if uuid not in translations:
         try:
             translations[uuid] = gettext.translation(uuid, home + '/.local/share/locale').ugettext
@@ -68,7 +72,7 @@ def translate(uuid, string):
             except IOError:
                 translations[uuid] = None
 
-    #do not translate whitespaces
+    # do not translate whitespaces
     if not string.strip():
         return string
 
@@ -78,10 +82,12 @@ def translate(uuid, string):
             return result
     return _(string)
 
+
 def list_header_func(row, before, user_data):
     if before and not row.get_header():
         row.set_header(Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL))
 
+
 def filter_row(row, entry):
     search_string = entry.get_text().lower()
     if search_string in row.name.lower() or search_string in row.description.lower() or search_string.lower() in row.uuid.lower():
@@ -89,11 +95,12 @@ def filter_row(row, entry):
     else:
         return False
 
+
 def show_prompt(msg, window=None):
-    dialog = Gtk.MessageDialog(transient_for = window,
-                               destroy_with_parent = True,
-                               message_type = Gtk.MessageType.QUESTION,
-                               buttons = Gtk.ButtonsType.YES_NO)
+    dialog = Gtk.MessageDialog(transient_for=window,
+                               destroy_with_parent=True,
+                               message_type=Gtk.MessageType.QUESTION,
+                               buttons=Gtk.ButtonsType.YES_NO)
     dialog.set_default_size(400, 200)
     esc = cgi.escape(msg)
     dialog.set_markup(esc)
@@ -102,10 +109,12 @@ def show_prompt(msg, window=None):
     dialog.destroy()
     return response == Gtk.ResponseType.YES
 
+
 background_work_queue = ThreadedTaskManager(5)
 
 
 class MyHTMLParser(HTMLParser):
+
     def __init__(self):
         HTMLParser.__init__(self)
         self.strings = []
@@ -124,6 +133,7 @@ class MyHTMLParser(HTMLParser):
     def get_text(self):
         return u''.join(self.strings)
 
+
 def sanitize_html(string):
     parser = MyHTMLParser()
     parser.feed(string)
@@ -132,6 +142,7 @@ def sanitize_html(string):
 
 
 class ManageSpicesRow(Gtk.ListBoxRow):
+
     def __init__(self, extension_type, metadata, size_group):
         super(ManageSpicesRow, self).__init__()
         self.extension_type = extension_type
@@ -157,10 +168,10 @@ class ManageSpicesRow(Gtk.ListBoxRow):
         except (KeyError, ValueError):
             self.role = None
 
-        try:
-            last_edited = self.metadata['last-edited']
-        except (KeyError, ValueError):
-            last_edited = -1
+        # try:
+        #     last_edited = self.metadata['last-edited']
+        # except (KeyError, ValueError):
+        #     last_edited = -1
 
         if 'multiversion' in self.metadata and self.metadata['multiversion']:
             self.metadata['path'] = find_extension_subdir(self.metadata['path'])
@@ -169,7 +180,7 @@ class ManageSpicesRow(Gtk.ListBoxRow):
         # otherwise we check for "external-configuration-app" in metadata and settings-schema.json in settings
         self.has_config = False
         self.ext_config_app = None
-        if not 'hide-configuration' in self.metadata or self.metadata['hide-configuration'] != True:
+        if 'hide-configuration' not in self.metadata or self.metadata['hide-configuration'] is not True:
             if 'external-configuration-app' in self.metadata:
                 self.ext_config_app = os.path.join(self.metadata['path'], self.metadata['external-configuration-app'])
 
@@ -199,7 +210,7 @@ class ManageSpicesRow(Gtk.ListBoxRow):
             try:
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale('%s/icon.png' % self.metadata['path'], 24, 24, True)
                 icon = Gtk.Image.new_from_pixbuf(pixbuf)
-            except:
+            except Exception:
                 icon = None
 
         if icon is None:
@@ -248,10 +259,10 @@ class ManageSpicesRow(Gtk.ListBoxRow):
             elif self.extension_type == "extension":
                 self.add_status('locked', 'changes-prevent-symbolic', _("This is a system extension. It cannot be removed."))
 
-        try:
-            schema_filename = self.metadata['schema-file']
-        except (KeyError, ValueError):
-            schema_filename = ''
+        # try:
+        #     schema_filename = self.metadata['schema-file']
+        # except (KeyError, ValueError):
+        #     schema_filename = ''
 
         if self.writable:
             self.scan_extension_for_danger(self.metadata['path'])
@@ -260,7 +271,7 @@ class ManageSpicesRow(Gtk.ListBoxRow):
         try:
             self.version_supported = curr_ver in self.metadata['cinnamon-version'] or curr_ver.rsplit('.', 1)[0] in self.metadata['cinnamon-version']
         except (KeyError, ValueError):
-            self.version_supported = True # Don't check version if not specified.
+            self.version_supported = True  # Don't check version if not specified.
 
     def set_can_config(self, *args):
         if not self.has_config:
@@ -332,7 +343,7 @@ class ManageSpicesRow(Gtk.ListBoxRow):
 
         try:
             scan_dir(directory)
-        except:
+        except Exception:
             dangerous = True
 
         return dangerous
@@ -346,7 +357,9 @@ class ManageSpicesRow(Gtk.ListBoxRow):
             elif self.extension_type == "extension":
                 self.add_status('dangerous', 'dialog-warning-symbolic', _("This extension contains function calls that could potentially cause Cinnamon to crash or freeze. If you are experiencing crashes or freezing, please try removing it."))
 
+
 class ManageSpicesPage(SettingsPage):
+
     def __init__(self, parent, collection_type, spices, window):
         super(ManageSpicesPage, self).__init__()
         self.expand = True
@@ -534,7 +547,7 @@ class ManageSpicesPage(SettingsPage):
         extension_row = self.list_box.get_selected_row()
         self.enable_extension(extension_row.uuid, extension_row.name, extension_row.version_supported)
 
-    def enable_extension(self, uuid, name, version_check = True):
+    def enable_extension(self, uuid, name, version_check=True):
         if not version_check:
             if not show_prompt(_("Extension %s is not compatible with current version of cinnamon. Using it may break your system. Load anyway?") % uuid, self.window):
                 return
@@ -593,8 +606,8 @@ class ManageSpicesPage(SettingsPage):
                 self.list_box.add(extension_row)
                 self.extension_rows.append(extension_row)
                 extension_row.set_enabled(self.spices.get_enabled(uuid))
-            except Exception, msg:
-                print "Failed to load extension %s: %s" % (uuid, msg)
+            except Exception as msg:
+                print("Failed to load extension %s: %s" % (uuid, msg))
 
         self.list_box.show_all()
 
@@ -614,6 +627,7 @@ class ManageSpicesPage(SettingsPage):
 
 
 class DownloadSpicesRow(Gtk.ListBoxRow):
+
     def __init__(self, uuid, data, spices, size_groups):
         super(DownloadSpicesRow, self).__init__()
 
@@ -710,6 +724,7 @@ class DownloadSpicesRow(Gtk.ListBoxRow):
 
 
 class DownloadSpicesPage(SettingsPage):
+
     def __init__(self, parent, collection_type, spices, window):
         super(DownloadSpicesPage, self).__init__()
         self.expand = True
@@ -732,7 +747,7 @@ class DownloadSpicesPage(SettingsPage):
         self.top_box.pack_start(sort_label, False, False, 4)
 
         self.sort_combo = Gtk.ComboBox()
-        sort_types=Gtk.ListStore(str, str)
+        sort_types = Gtk.ListStore(str, str)
         self.sort_combo.set_model(sort_types)
         renderer_text = Gtk.CellRendererText()
         self.sort_combo.pack_start(renderer_text, True)
@@ -742,7 +757,7 @@ class DownloadSpicesPage(SettingsPage):
         sort_types.append(['score', _("Popularity")])
         sort_types.append(['date', _("Date")])
         sort_types.append(['installed', _("Installed")])
-        self.sort_combo.set_active(1) #Rating
+        self.sort_combo.set_active(1)  # Rating
         self.sort_combo.connect('changed', self.sort_changed)
         self.top_box.pack_start(self.sort_combo, False, False, 4)
 
@@ -931,7 +946,7 @@ class DownloadSpicesPage(SettingsPage):
 
     def build_list(self, *args):
         spices_data = self.spices.get_cache()
-        if spices_data == None:
+        if spices_data is None:
             return
 
         if len(self.extension_rows) > 0:
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/GSettingsWidgets.py b/files/usr/share/cinnamon/cinnamon-settings/bin/GSettingsWidgets.py
index 406ade8..22e1fc7 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/GSettingsWidgets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/GSettingsWidgets.py
@@ -1,5 +1,6 @@
 from gi.repository import Gio, GLib
-from SettingsWidgets import *
+from SettingsWidgets import *  # noqa
+
 
 # Monkey patch Gio.Settings object
 def __setitem__(self, key, value):
@@ -31,6 +32,7 @@ def __setitem__(self, key, value):
     if not self.set_value(key, GLib.Variant(type_str, value)):
         raise ValueError("value '%s' for key '%s' is outside of valid range" % (value, key))
 
+
 def bind_with_mapping(self, key, widget, prop, flags, key_to_prop, prop_to_key):
     self._ignore_key_changed = False
 
@@ -48,7 +50,7 @@ def bind_with_mapping(self, key, widget, prop, flags, key_to_prop, prop_to_key):
         self[key] = prop_to_key(widget.get_property(prop))
         self._ignore_key_changed = False
 
-    if not (flags & (Gio.SettingsBindFlags.SET | Gio.SettingsBindFlags.GET)): # ie Gio.SettingsBindFlags.DEFAULT
+    if not (flags & (Gio.SettingsBindFlags.SET | Gio.SettingsBindFlags.GET)):  # ie Gio.SettingsBindFlags.DEFAULT
         flags |= Gio.SettingsBindFlags.SET | Gio.SettingsBindFlags.GET
     if flags & Gio.SettingsBindFlags.GET:
         key_changed(self, key)
@@ -59,13 +61,16 @@ def bind_with_mapping(self, key, widget, prop, flags, key_to_prop, prop_to_key):
     if not (flags & Gio.SettingsBindFlags.NO_SENSITIVITY):
         self.bind_writable(key, widget, "sensitive", False)
 
+
 Gio.Settings.bind_with_mapping = bind_with_mapping
 Gio.Settings.__setitem__ = __setitem__
 
+
 class BinFileMonitor(GObject.GObject):
     __gsignals__ = {
         'changed': (GObject.SignalFlags.RUN_LAST, None, ()),
     }
+
     def __init__(self):
         super(BinFileMonitor, self).__init__()
 
@@ -73,7 +78,7 @@ class BinFileMonitor(GObject.GObject):
 
         env = GLib.getenv("PATH")
 
-        if env == None:
+        if env is None:
             env = "/bin:/usr/bin:."
 
         self.paths = env.split(":")
@@ -98,17 +103,21 @@ class BinFileMonitor(GObject.GObject):
 
         self.changed_id = GObject.idle_add(self._emit_changed)
 
+
 file_monitor = None
 
+
 def get_file_monitor():
     global file_monitor
 
-    if file_monitor == None:
+    if file_monitor is None:
         file_monitor = BinFileMonitor()
 
     return file_monitor
 
+
 class DependencyCheckInstallButton(Gtk.Box):
+
     def __init__(self, checking_text, install_button_text, binfiles, final_widget=None, satisfied_cb=None):
         super(DependencyCheckInstallButton, self).__init__(orientation=Gtk.Orientation.HORIZONTAL)
 
@@ -194,7 +203,9 @@ class DependencyCheckInstallButton(Gtk.Box):
         self.file_listener.disconnect(self.file_listener_id)
         self.file_listener_id = 0
 
+
 class GSettingsDependencySwitch(SettingsWidget):
+
     def __init__(self, label, schema=None, key=None, dep_key=None, binfiles=None, packages=None):
         super(GSettingsDependencySwitch, self).__init__(dep_key=dep_key)
 
@@ -226,6 +237,7 @@ class GSettingsDependencySwitch(SettingsWidget):
             self.settings = self.get_settings(schema)
             self.settings.bind(key, self.switch, "active", Gio.SettingsBindFlags.DEFAULT)
 
+
 # This class is not meant to be used directly - it is only a backend for the
 # settings widgets to enable them to bind attributes to gsettings keys. To use
 # the gesttings backend, simply add the "GSettings" prefix to the beginning
@@ -250,6 +262,7 @@ class GSettingsDependencySwitch(SettingsWidget):
 # set_rounding - (function, optional) To be used to set the digits to round to
 #                if the setting is an integer
 class CSGSettingsBackend(object):
+
     def bind_settings(self):
         if hasattr(self, "set_rounding"):
             vtype = self.settings.get_value(self.key).get_type_string()
@@ -261,10 +274,10 @@ class CSGSettingsBackend(object):
             bind_object = self.content_widget
         if hasattr(self, "map_get") or hasattr(self, "map_set"):
             self.settings.bind_with_mapping(self.key, bind_object, self.bind_prop, self.bind_dir, self.map_get, self.map_set)
-        elif self.bind_dir != None:
+        elif self.bind_dir is not None:
             self.settings.bind(self.key, bind_object, self.bind_prop, self.bind_dir)
         else:
-            self.settings.connect("changed::"+self.key, self.on_setting_changed)
+            self.settings.connect("changed::" + self.key, self.on_setting_changed)
             self.on_setting_changed()
             self.connect_widget_handlers()
 
@@ -285,21 +298,23 @@ class CSGSettingsBackend(object):
         raise NotImplementedError("SettingsWidget class must implement on_setting_changed().")
 
     def connect_widget_handlers(self, *args):
-        if self.bind_dir == None:
+        if self.bind_dir is None:
             raise NotImplementedError("SettingsWidget classes with no .bind_dir must implement connect_widget_handlers().")
 
+
 def g_settings_factory(subclass):
     class NewClass(globals()[subclass], CSGSettingsBackend):
+
         def __init__(self, label, schema, key, *args, **kwargs):
             self.key = key
             if schema not in settings_objects.keys():
                 settings_objects[schema] = Gio.Settings.new(schema)
             self.settings = settings_objects[schema]
 
-            if kwargs.has_key("map_get"):
+            if "map_get" in kwargs:
                 self.map_get = kwargs["map_get"]
                 del kwargs["map_get"]
-            if kwargs.has_key("map_set"):
+            if "map_set" in kwargs:
                 self.map_set = kwargs["map_set"]
                 del kwargs["map_set"]
 
@@ -307,5 +322,6 @@ def g_settings_factory(subclass):
             self.bind_settings()
     return NewClass
 
+
 for widget in CAN_BACKEND:
-    globals()["GSettings"+widget] = g_settings_factory(widget)
+    globals()["GSettings" + widget] = g_settings_factory(widget)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/JsonSettingsWidgets.py b/files/usr/share/cinnamon/cinnamon-settings/bin/JsonSettingsWidgets.py
index abc4528..46ff7ca 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/JsonSettingsWidgets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/JsonSettingsWidgets.py
@@ -1,28 +1,30 @@
 from gi.repository import Gio, GObject
-from SettingsWidgets import *
-from TreeListWidgets import List
+from SettingsWidgets import *  # noqa
+from TreeListWidgets import List  # noqa
 import collections
 import json
 
 CAN_BACKEND.append("List")
 
 JSON_SETTINGS_PROPERTIES_MAP = {
-    "description"   : "label",
-    "min"           : "mini",
-    "max"           : "maxi",
-    "step"          : "step",
-    "units"         : "units",
-    "show-value"    : "show_value",
-    "select-dir"    : "dir_select",
-    "height"        : "height",
-    "tooltip"       : "tooltip",
-    "possible"      : "possible",
-    "dependency"    : "dep_key",
-    "expand-width"  : "expand_width",
-    "columns"       : "columns"
+    "description":  "label",
+    "min":          "mini",
+    "max":          "maxi",
+    "step":         "step",
+    "units":        "units",
+    "show-value":   "show_value",
+    "select-dir":   "dir_select",
+    "height":       "height",
+    "tooltip":      "tooltip",
+    "possible":     "possible",
+    "dependency":   "dep_key",
+    "expand-width": "expand_width",
+    "columns":      "columns",
 }
 
+
 class JSONSettingsHandler(object):
+
     def __init__(self, filepath, notify_callback=None):
         super(JSONSettingsHandler, self).__init__()
 
@@ -52,7 +54,7 @@ class JSONSettingsHandler(object):
         if direction & Gio.SettingsBindFlags.GET != 0:
             self.set_object_value(binding_info, self.get_value(key))
         if direction & Gio.SettingsBindFlags.SET != 0:
-            binding_info["oid"] = obj.connect("notify::"+prop, self.object_value_changed, key)
+            binding_info["oid"] = obj.connect("notify::" + prop, self.object_value_changed, key)
 
     def listen(self, key, callback):
         if key not in self.listeners:
@@ -83,7 +85,7 @@ class JSONSettingsHandler(object):
         for info in self.bindings[key]:
             if obj == info["obj"]:
                 value = info["obj"].get_property(info["prop"])
-                if "map_set" in info.keys() and info["map_set"] != None:
+                if "map_set" in info.keys() and info["map_set"] is not None:
                     value = info["map_set"](value)
             else:
                 self.set_object_value(info, value)
@@ -94,7 +96,7 @@ class JSONSettingsHandler(object):
             return
 
         with info["obj"].freeze_notify():
-            if "map_get" in info.keys() and info["map_get"] != None:
+            if "map_get" in info.keys() and info["map_get"] is not None:
                 value = info["map_get"](value)
             if value != info["obj"].get_property(info["prop"]):
                 info["obj"].set_property(info["prop"], value)
@@ -121,7 +123,7 @@ class JSONSettingsHandler(object):
         file.close()
         try:
             settings = json.loads(raw_data, encoding=None, object_pairs_hook=collections.OrderedDict)
-        except:
+        except Exception:
             raise Exception("Failed to parse settings JSON data for file %s" % (self.filepath))
         return settings
 
@@ -173,7 +175,7 @@ class JSONSettingsHandler(object):
         file.close()
         try:
             settings = json.loads(raw_data, encoding=None, object_pairs_hook=collections.OrderedDict)
-        except:
+        except Exception:
             raise Exception("Failed to parse settings JSON data for file %s" % (self.filepath))
 
         for key in self.settings:
@@ -194,7 +196,9 @@ class JSONSettingsHandler(object):
         new_file.write(raw_data)
         new_file.close()
 
+
 class JSONSettingsBackend(object):
+
     def attach(self):
         if hasattr(self, "set_rounding") and self.settings.has_property(self.key, "round"):
             self.set_rounding(self.settings.get_property(self.key, "round"))
@@ -202,7 +206,7 @@ class JSONSettingsBackend(object):
             bind_object = self.bind_object
         else:
             bind_object = self.content_widget
-        if self.bind_dir != None:
+        if self.bind_dir is not None:
             self.settings.bind(self.key, bind_object, self.bind_prop, self.bind_dir,
                                self.map_get if hasattr(self, "map_get") else None,
                                self.map_set if hasattr(self, "map_set") else None)
@@ -226,11 +230,13 @@ class JSONSettingsBackend(object):
         raise NotImplementedError("SettingsWidget class must implement on_setting_changed().")
 
     def connect_widget_handlers(self, *args):
-        if self.bind_dir == None:
+        if self.bind_dir is None:
             raise NotImplementedError("SettingsWidget classes with no .bind_dir must implement connect_widget_handlers().")
 
+
 def json_settings_factory(subclass):
     class NewClass(globals()[subclass], JSONSettingsBackend):
+
         def __init__(self, key, settings, properties):
             self.key = key
             self.settings = settings
@@ -247,12 +253,13 @@ def json_settings_factory(subclass):
             self.attach()
 
         def set_dep_key(self, dep_key):
-            if self.settings.has_key(dep_key):
+            if dep_key in self.settings:
                 self.settings.bind(dep_key, self, "sensitive", Gio.SettingsBindFlags.GET)
             else:
                 print("Ignoring dependency on key '%s': no such key in the schema" % dep_key)
 
     return NewClass
 
+
 for widget in CAN_BACKEND:
-    globals()["JSONSettings"+widget] = json_settings_factory(widget)
+    globals()["JSONSettings" + widget] = json_settings_factory(widget)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/KeybindingWidgets.py b/files/usr/share/cinnamon/cinnamon-settings/bin/KeybindingWidgets.py
index a01bd27..b69448a 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/KeybindingWidgets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/KeybindingWidgets.py
@@ -1,7 +1,11 @@
 #!/usr/bin/python2
 
+import gettext
+
 from gi.repository import Gtk, Gdk, GObject
 
+_ = gettext.gettext
+
 FORBIDDEN_KEYVALS = [
     Gdk.KEY_Home,
     Gdk.KEY_Left,
@@ -18,6 +22,7 @@ FORBIDDEN_KEYVALS = [
     Gdk.KEY_Mode_switch
 ]
 
+
 class ButtonKeybinding(Gtk.TreeView):
     __gsignals__ = {
         'accel-edited': (GObject.SignalFlags.RUN_LAST, None, (str, str)),
@@ -42,7 +47,7 @@ class ButtonKeybinding(Gtk.TreeView):
         self.entry_store = None
         self.accel_string = ""
         self.keybinding_cell = CellRendererKeybinding(a_widget=self)
-        self.keybinding_cell.set_alignment(.5,.5)
+        self.keybinding_cell.set_alignment(.5, .5)
         self.keybinding_cell.connect('accel-edited', self.on_cell_edited)
         self.keybinding_cell.connect('accel-cleared', self.on_cell_cleared)
 
@@ -74,7 +79,7 @@ class ButtonKeybinding(Gtk.TreeView):
         if self.entry_store:
             self.entry_store.clear()
 
-        self.entry_store = Gtk.ListStore(str) # Accel string
+        self.entry_store = Gtk.ListStore(str)  # Accel string
         self.entry_store.append((self.accel_string,))
 
         self.set_model(self.entry_store)
@@ -172,9 +177,9 @@ class CellRendererKeybinding(Gtk.CellRendererText):
             editable.set_text(_("Pick an accelerator"))
             self.accel_editable = editable
 
-            self.release_event_id = self.accel_editable.connect( "key-release-event", self.on_key_release )
-            self.press_event_id = self.accel_editable.connect( "key-press-event", self.on_key_press )
-            self.focus_id = self.accel_editable.connect( "focus-out-event", self.on_focus_out )
+            self.release_event_id = self.accel_editable.connect("key-release-event", self.on_key_release)
+            self.press_event_id = self.accel_editable.connect("key-press-event", self.on_key_press)
+            self.focus_id = self.accel_editable.connect("focus-out-event", self.on_focus_out)
             self.teaching = True
         else:
             self.ungrab()
@@ -211,7 +216,7 @@ class CellRendererKeybinding(Gtk.CellRendererText):
             consumed_modifiers = 0
         else:
             keymap = Gdk.Keymap.get_for_display(display)
-            group_mask_disabled = False
+            # group_mask_disabled = False
             shift_group_mask = 0
 
             shift_group_mask = keymap.get_modifier_mask(Gdk.ModifierIntent.SHIFT_GROUP)
@@ -219,8 +224,8 @@ class CellRendererKeybinding(Gtk.CellRendererText):
             retval, keyval, effective_group, level, consumed_modifiers = \
                 keymap.translate_keyboard_state(event.hardware_keycode, accel_mods, group)
 
-            if group_mask_disabled:
-                effective_group = 1
+            # if group_mask_disabled:
+            #     effective_group = 1
 
             if consumed_modifiers:
                 consumed_modifiers &= ~shift_group_mask
@@ -252,18 +257,18 @@ class CellRendererKeybinding(Gtk.CellRendererText):
         # print("Storing %s as %s" % (accel_label, accel_string))
 
         if (accel_mods == 0 or accel_mods == Gdk.ModifierType.SHIFT_MASK) and event.hardware_keycode != 0:
-            if ((keyval >= Gdk.KEY_a                    and keyval <= Gdk.KEY_z)
-                or  (keyval >= Gdk.KEY_A                    and keyval <= Gdk.KEY_Z)
-                or  (keyval >= Gdk.KEY_0                    and keyval <= Gdk.KEY_9)
-                or  (keyval >= Gdk.KEY_kana_fullstop        and keyval <= Gdk.KEY_semivoicedsound)
-                or  (keyval >= Gdk.KEY_Arabic_comma         and keyval <= Gdk.KEY_Arabic_sukun)
-                or  (keyval >= Gdk.KEY_Serbian_dje          and keyval <= Gdk.KEY_Cyrillic_HARDSIGN)
-                or  (keyval >= Gdk.KEY_Greek_ALPHAaccent    and keyval <= Gdk.KEY_Greek_omega)
-                or  (keyval >= Gdk.KEY_hebrew_doublelowline and keyval <= Gdk.KEY_hebrew_taf)
-                or  (keyval >= Gdk.KEY_Thai_kokai           and keyval <= Gdk.KEY_Thai_lekkao)
-                or  (keyval >= Gdk.KEY_Hangul               and keyval <= Gdk.KEY_Hangul_Special)
-                or  (keyval >= Gdk.KEY_Hangul_Kiyeog        and keyval <= Gdk.KEY_Hangul_J_YeorinHieuh)
-                    or  keyval in FORBIDDEN_KEYVALS):
+            if ((keyval >= Gdk.KEY_a and keyval <= Gdk.KEY_z)
+                or (keyval >= Gdk.KEY_A and keyval <= Gdk.KEY_Z)
+                or (keyval >= Gdk.KEY_0 and keyval <= Gdk.KEY_9)
+                or (keyval >= Gdk.KEY_kana_fullstop and keyval <= Gdk.KEY_semivoicedsound)
+                or (keyval >= Gdk.KEY_Arabic_comma and keyval <= Gdk.KEY_Arabic_sukun)
+                or (keyval >= Gdk.KEY_Serbian_dje and keyval <= Gdk.KEY_Cyrillic_HARDSIGN)
+                or (keyval >= Gdk.KEY_Greek_ALPHAaccent and keyval <= Gdk.KEY_Greek_omega)
+                or (keyval >= Gdk.KEY_hebrew_doublelowline and keyval <= Gdk.KEY_hebrew_taf)
+                or (keyval >= Gdk.KEY_Thai_kokai and keyval <= Gdk.KEY_Thai_lekkao)
+                or (keyval >= Gdk.KEY_Hangul and keyval <= Gdk.KEY_Hangul_Special)
+                or (keyval >= Gdk.KEY_Hangul_Kiyeog and keyval <= Gdk.KEY_Hangul_J_YeorinHieuh)
+                    or keyval in FORBIDDEN_KEYVALS):
                 dialog = Gtk.MessageDialog(None,
                                            Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                            Gtk.MessageType.ERROR,
@@ -274,7 +279,7 @@ class CellRendererKeybinding(Gtk.CellRendererText):
                 msg += _("Please try again with a modifier key such as Control, Alt or Super (Windows key) at the same time.\n")
                 dialog.set_markup(msg % (accel_label))
                 dialog.show_all()
-                response = dialog.run()
+                dialog.run()
                 dialog.destroy()
                 return True
 
@@ -299,5 +304,5 @@ class CellRendererKeybinding(Gtk.CellRendererText):
         try:
             self.accel_editable.editing_done()
             self.accel_editable.remove_widget()
-        except:
+        except Exception:
             pass
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/SettingsWidgets.py b/files/usr/share/cinnamon/cinnamon-settings/bin/SettingsWidgets.py
index 99251ad..7f687c5 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/SettingsWidgets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/SettingsWidgets.py
@@ -3,16 +3,15 @@
 import math
 import os
 import subprocess
-import traceback
 
 import dbus
 import gi
-gi.require_version('Gtk', '3.0')
-gi.require_version('CDesktopEnums', '3.0')
-gi.require_version('CinnamonDesktop', '3.0')
-from gi.repository import Gio, Gtk, GObject, Gdk, GLib, GdkPixbuf, CDesktopEnums, CinnamonDesktop
+gi.require_version('Gtk', '3.0')  # noqa
+gi.require_version('CDesktopEnums', '3.0')  # noqa
+gi.require_version('CinnamonDesktop', '3.0')  # noqa
+from gi.repository import Gio, Gtk, GObject, Gdk, GLib, GdkPixbuf
 
-from ChooserButtonWidgets import *
+from ChooserButtonWidgets import *  # noqa
 from KeybindingWidgets import ButtonKeybinding
 
 settings_objects = {}
@@ -21,6 +20,7 @@ CAN_BACKEND = ["Switch", "SpinButton", "Entry", "TextView", "FontButton", "Range
                "ColorChooser", "FileChooser", "SoundFileChooser", "IconChooser", "TweenChooser",
                "EffectChooser", "DateChooser", "Keybinding"]
 
+
 class EditableEntry (Gtk.Stack):
 
     __gsignals__ = {
@@ -28,7 +28,7 @@ class EditableEntry (Gtk.Stack):
                     (str,))
     }
 
-    def __init__ (self):
+    def __init__(self):
         super(EditableEntry, self).__init__()
 
         self.set_transition_type(Gtk.StackTransitionType.CROSSFADE)
@@ -40,8 +40,8 @@ class EditableEntry (Gtk.Stack):
 
         self.button.set_alignment(1.0, 0.5)
         self.button.set_relief(Gtk.ReliefStyle.NONE)
-        self.add_named(self.button, "button");
-        self.add_named(self.entry, "entry");
+        self.add_named(self.button, "button")
+        self.add_named(self.entry, "entry")
         self.set_visible_child_name("button")
         self.editable = False
         self.current_text = None
@@ -92,8 +92,10 @@ class EditableEntry (Gtk.Stack):
     def get_text(self):
         return self.entry.get_text()
 
+
 class SidePage(object):
-    def __init__(self, name, icon, keywords, content_box = None, size = None, is_c_mod = False, is_standalone = False, exec_name = None, module=None):
+
+    def __init__(self, name, icon, keywords, content_box=None, size=None, is_c_mod=False, is_standalone=False, exec_name=None, module=None):
         self.name = name
         self.icon = icon
         self.content_box = content_box
@@ -101,13 +103,13 @@ class SidePage(object):
         self.is_c_mod = is_c_mod
         self.is_standalone = is_standalone
         self.exec_name = exec_name
-        self.module = module # Optionally set by the module so we can call on_module_selected() on it when we show it.
+        self.module = module  # Optionally set by the module so we can call on_module_selected() on it when we show it.
         self.keywords = keywords
         self.size = size
         self.topWindow = None
         self.builder = None
         self.stack = None
-        if self.module != None:
+        if self.module is not None:
             self.module.loaded = False
 
     def add_widget(self, widget):
@@ -143,7 +145,7 @@ class SidePage(object):
             self.content_box.show_all()
             try:
                 self.check_third_arg()
-            except:
+            except Exception:
                 pass
             return
 
@@ -178,14 +180,16 @@ class SidePage(object):
             # Look for a stack recursively
             recursively_iterate(child)
 
+
 class CCModule:
+
     def __init__(self, label, mod_id, icon, category, keywords, content_box):
         sidePage = SidePage(label, icon, keywords, content_box, size=-1, is_c_mod=True, is_standalone=False, exec_name=mod_id, module=None)
         self.sidePage = sidePage
         self.name = mod_id
         self.category = category
 
-    def process (self, c_manager):
+    def process(self, c_manager):
         if c_manager.lookup_c_module(self.name):
             c_box = Gtk.Box.new(Gtk.Orientation.VERTICAL, 2)
             c_box.set_vexpand(False)
@@ -195,14 +199,16 @@ class CCModule:
         else:
             return False
 
+
 class SAModule:
+
     def __init__(self, label, mod_id, icon, category, keywords, content_box):
         sidePage = SidePage(label, icon, keywords, content_box, False, False, True, mod_id)
         self.sidePage = sidePage
         self.name = mod_id
         self.category = category
 
-    def process (self):
+    def process(self):
         name = self.name.replace("gksudo ", "")
         name = name.replace("gksu ", "")
         name = name.split()[0]
@@ -214,6 +220,7 @@ class SAModule:
                 return True
         return False
 
+
 def walk_directories(dirs, filter_func, return_directories=False):
     # If return_directories is False: returns a list of valid subdir names
     # Else: returns a list of valid tuples (subdir-names, parent-directory)
@@ -227,11 +234,12 @@ def walk_directories(dirs, filter_func, return_directories=False):
                             valid.append([t, thdir])
                         else:
                             valid.append(t)
-    except:
+    except Exception:
         pass
-        #logging.critical("Error parsing directories", exc_info=True)
+        # logging.critical("Error parsing directories", exc_info=True)
     return valid
 
+
 def rec_mkdir(path):
     if os.path.exists(path):
         return
@@ -242,7 +250,9 @@ def rec_mkdir(path):
         return
     os.mkdir(path)
 
+
 class Section(Gtk.Box):
+
     def __init__(self, name):
         self.name = name
         super(Section, self).__init__()
@@ -284,22 +294,28 @@ class Section(Gtk.Box):
         box.pack_start(widget, True, True, 0)
         self.pack_start(box, False, False, 0)
 
+
 class SectionBg(Gtk.Viewport):
+
     def __init__(self):
         Gtk.Viewport.__init__(self)
         self.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
         style = self.get_style_context()
         style.add_class("section-bg")
-        self.expand = True # Tells CS to give expand us to the whole window
+        self.expand = True  # Tells CS to give expand us to the whole window
+
 
 class SettingsStack(Gtk.Stack):
+
     def __init__(self):
         Gtk.Stack.__init__(self)
         self.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
         self.set_transition_duration(150)
         self.expand = True
 
+
 class SettingsRevealer(Gtk.Revealer):
+
     def __init__(self, schema=None, key=None, values=None, check_func=None):
         Gtk.Revealer.__init__(self)
 
@@ -324,7 +340,7 @@ class SettingsRevealer(Gtk.Revealer):
     def add(self, widget):
         self.box.pack_start(widget, False, True, 0)
 
-    #only used when checking values
+    # only used when checking values
     def on_settings_changed(self, settings, key):
         value = settings.get_value(key).unpack()
         if self.check_func is None:
@@ -332,7 +348,9 @@ class SettingsRevealer(Gtk.Revealer):
         else:
             self.set_reveal_child(self.check_func(value, self.values))
 
+
 class SettingsPage(Gtk.Box):
+
     def __init__(self):
         Gtk.Box.__init__(self)
         self.set_orientation(Gtk.Orientation.VERTICAL)
@@ -357,7 +375,9 @@ class SettingsPage(Gtk.Box):
 
         return section
 
+
 class SettingsBox(Gtk.Frame):
+
     def __init__(self, title):
         Gtk.Frame.__init__(self)
         self.set_shadow_type(Gtk.ShadowType.IN)
@@ -370,7 +390,7 @@ class SettingsBox(Gtk.Frame):
         self.add(self.box)
 
         toolbar = Gtk.Toolbar.new()
-        toolbar_context = toolbar.get_style_context()
+        toolbar.get_style_context()
         Gtk.StyleContext.add_class(Gtk.Widget.get_style_context(toolbar), "cs-header")
 
         label = Gtk.Label()
@@ -390,7 +410,7 @@ class SettingsBox(Gtk.Frame):
                                }" % frame_color
         try:
             css_provider.load_from_data(css_data)
-        except:
+        except Exception:
             # we must be using python 3
             css_provider.load_from_data(str.encode(css_data))
         separator_context.add_provider(css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
@@ -434,7 +454,9 @@ class SettingsBox(Gtk.Frame):
 
         return revealer
 
+
 class SettingsWidget(Gtk.Box):
+
     def __init__(self, dep_key=None):
         Gtk.Box.__init__(self)
         self.set_orientation(Gtk.Orientation.HORIZONTAL)
@@ -468,11 +490,13 @@ class SettingsWidget(Gtk.Box):
         global settings_objects
         try:
             return settings_objects[schema]
-        except:
+        except Exception:
             settings_objects[schema] = Gio.Settings.new(schema)
             return settings_objects[schema]
 
+
 class SettingsLabel(Gtk.Label):
+
     def __init__(self, text=None):
         Gtk.Label.__init__(self)
         if text:
@@ -484,7 +508,9 @@ class SettingsLabel(Gtk.Label):
     def set_label_text(self, text):
         self.set_label(text)
 
+
 class IndentedHBox(Gtk.HBox):
+
     def __init__(self):
         super(IndentedHBox, self).__init__()
         indent = Gtk.Label.new('\t')
@@ -496,6 +522,7 @@ class IndentedHBox(Gtk.HBox):
     def add_expand(self, item):
         self.pack_start(item, True, True, 0)
 
+
 class Switch(SettingsWidget):
     bind_prop = "active"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -513,6 +540,7 @@ class Switch(SettingsWidget):
     def clicked(self, *args):
         self.content_widget.set_active(not self.content_widget.get_active())
 
+
 class SpinButton(SettingsWidget):
     bind_prop = "value"
     bind_dir = Gio.SettingsBindFlags.GET
@@ -531,7 +559,7 @@ class SpinButton(SettingsWidget):
         self.pack_end(self.content_widget, False, False, 0)
 
         range = self.get_range()
-        if mini == None or maxi == None:
+        if mini is None or maxi is None:
             mini = range[0]
             maxi = range[1]
         elif range is not None:
@@ -565,6 +593,7 @@ class SpinButton(SettingsWidget):
             GLib.source_remove(self.timer)
         self.timer = GLib.timeout_add(300, apply, self)
 
+
 class Entry(SettingsWidget):
     bind_prop = "text"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -584,6 +613,7 @@ class Entry(SettingsWidget):
         if size_group:
             self.add_to_size_group(size_group)
 
+
 class TextView(SettingsWidget):
     bind_prop = "text"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -612,6 +642,7 @@ class TextView(SettingsWidget):
         self.scrolledwindow.add(self.content_widget)
         self._value_changed_timer = None
 
+
 class FontButton(SettingsWidget):
     bind_prop = "font-name"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -632,6 +663,7 @@ class FontButton(SettingsWidget):
         if size_group:
             self.add_to_size_group(size_group)
 
+
 class Range(SettingsWidget):
     bind_prop = "value"
     bind_dir = Gio.SettingsBindFlags.GET | Gio.SettingsBindFlags.NO_SENSITIVITY
@@ -653,7 +685,7 @@ class Range(SettingsWidget):
         self.label = Gtk.Label.new(label)
         self.label.set_halign(Gtk.Align.CENTER)
 
-        self.min_label= Gtk.Label()
+        self.min_label = Gtk.Label()
         self.max_label = Gtk.Label()
         self.min_label.set_alignment(1.0, 0.75)
         self.max_label.set_alignment(1.0, 0.75)
@@ -663,7 +695,7 @@ class Range(SettingsWidget):
         self.max_label.set_markup("<i><small>%s</small></i>" % max_label)
 
         range = self.get_range()
-        if mini == None or maxi == None:
+        if mini is None or maxi is None:
             mini = range[0]
             maxi = range[1]
         elif range is not None:
@@ -699,7 +731,7 @@ class Range(SettingsWidget):
         self.bind_object = self.content_widget.get_adjustment()
 
         if invert:
-            self.step *= -1 # Gtk.Scale.new_with_range want a positive value, but our custom scroll handler wants a negative value
+            self.step *= -1  # Gtk.Scale.new_with_range want a positive value, but our custom scroll handler wants a negative value
 
         hbox.pack_start(self.min_label, False, False, 0)
         hbox.pack_start(self.content_widget, True, True, 0)
@@ -746,6 +778,7 @@ class Range(SettingsWidget):
         if not self.log:
             self.content_widget.set_round_digits(digits)
 
+
 class ComboBox(SettingsWidget):
     bind_dir = None
 
@@ -757,8 +790,6 @@ class ComboBox(SettingsWidget):
 
         self.label = SettingsLabel(label)
 
-        selected = None
-
         self.content_widget = Gtk.ComboBox()
         renderer_text = Gtk.CellRendererText()
         self.content_widget.pack_start(renderer_text, True)
@@ -777,7 +808,7 @@ class ComboBox(SettingsWidget):
 
     def on_my_value_changed(self, widget):
         tree_iter = widget.get_active_iter()
-        if tree_iter != None:
+        if tree_iter is not None:
             self.value = self.model[tree_iter][0]
             self.set_value(self.value)
 
@@ -785,7 +816,7 @@ class ComboBox(SettingsWidget):
         self.value = self.get_value()
         try:
             self.content_widget.set_active_iter(self.option_map[self.value])
-        except:
+        except Exception:
             self.content_widget.set_active_iter(None)
 
     def connect_widget_handlers(self, *args):
@@ -802,6 +833,7 @@ class ComboBox(SettingsWidget):
         self.content_widget.set_model(self.model)
         self.content_widget.set_id_column(0)
 
+
 class ColorChooser(SettingsWidget):
     bind_dir = None
 
@@ -839,6 +871,7 @@ class ColorChooser(SettingsWidget):
             color_string = self.content_widget.get_rgba().to_string()
         self.set_value(color_string)
 
+
 class FileChooser(SettingsWidget):
     bind_dir = None
 
@@ -868,6 +901,7 @@ class FileChooser(SettingsWidget):
     def connect_widget_handlers(self, *args):
         self.content_widget.connect("file-set", self.on_file_selected)
 
+
 class SoundFileChooser(SettingsWidget):
     bind_dir = None
 
@@ -918,7 +952,7 @@ class SoundFileChooser(SettingsWidget):
         if size_group:
             self.add_to_size_group(size_group)
 
-    def _on_proxy_ready (self, object, result, data=None):
+    def _on_proxy_ready(self, object, result, data=None):
         self._proxy = Gio.DBusProxy.new_for_bus_finish(result)
 
     def on_play_clicked(self, widget):
@@ -957,6 +991,7 @@ class SoundFileChooser(SettingsWidget):
     def connect_widget_handlers(self, *args):
         pass
 
+
 class IconChooser(SettingsWidget):
     bind_prop = "text"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -1036,6 +1071,7 @@ class IconChooser(SettingsWidget):
                     preview.set_from_pixbuf(pixbuf)
                     dialog.set_preview_widget_active(True)
 
+
 class TweenChooser(SettingsWidget):
     bind_prop = "tween"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -1055,6 +1091,7 @@ class TweenChooser(SettingsWidget):
         if size_group:
             self.add_to_size_group(size_group)
 
+
 class EffectChooser(SettingsWidget):
     bind_prop = "effect"
     bind_dir = Gio.SettingsBindFlags.DEFAULT
@@ -1074,6 +1111,7 @@ class EffectChooser(SettingsWidget):
         if size_group:
             self.add_to_size_group(size_group)
 
+
 class DateChooser(SettingsWidget):
     bind_dir = None
 
@@ -1103,6 +1141,7 @@ class DateChooser(SettingsWidget):
     def connect_widget_handlers(self, *args):
         self.content_widget.connect("date-changed", self.on_date_changed)
 
+
 class Keybinding(SettingsWidget):
     bind_dir = None
 
@@ -1161,7 +1200,9 @@ class Keybinding(SettingsWidget):
     def connect_widget_handlers(self, *args):
         pass
 
+
 class Button(SettingsWidget):
+
     def __init__(self, label, callback=None):
         super(Button, self).__init__()
         self.label = label
@@ -1183,7 +1224,9 @@ class Button(SettingsWidget):
         self.label = label
         self.content_widget.set_label(label)
 
+
 class Text(SettingsWidget):
+
     def __init__(self, label, align=Gtk.Align.START):
         super(Text, self).__init__()
         self.label = label
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/Spices.py b/files/usr/share/cinnamon/cinnamon-settings/bin/Spices.py
index 1ae8f11..ecec756 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/Spices.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/Spices.py
@@ -1,6 +1,9 @@
+from __future__ import print_function
+
 try:
     from SettingsWidgets import rec_mkdir
     import gettext
+    import dbus
     from gi.repository import Gio, Gtk, GObject, Gdk, GdkPixbuf, GLib
     import tempfile
     import os
@@ -14,8 +17,8 @@ try:
     import time
     from PIL import Image
     import config
-except Exception, detail:
-    print detail
+except Exception as detail:
+    print(detail)
     sys.exit(1)
 
 try:
@@ -23,6 +26,8 @@ try:
 except ImportError:
     import simplejson as json
 
+_ = gettext.gettext
+
 home = os.path.expanduser("~")
 locale_inst = '%s/.local/share/locale' % home
 settings_dir = '%s/.cinnamon/configs/' % home
@@ -39,8 +44,10 @@ ABORT_NONE = 0
 ABORT_ERROR = 1
 ABORT_USER = 2
 
+
 def ui_thread_do(callback, *args):
-    GLib.idle_add (callback, *args, priority=GLib.PRIORITY_DEFAULT)
+    GLib.idle_add(callback, *args, priority=GLib.PRIORITY_DEFAULT)
+
 
 def removeEmptyFolders(path):
     if not os.path.isdir(path):
@@ -57,10 +64,12 @@ def removeEmptyFolders(path):
     # if folder empty, delete it
     files = os.listdir(path)
     if len(files) == 0:
-        print "Removing empty folder:", path
+        print("Removing empty folder:", path)
         os.rmdir(path)
 
+
 class ThreadedTaskManager(GObject.GObject):
+
     def __init__(self, max_threads):
         super(ThreadedTaskManager, self).__init__()
         self.max_threads = max_threads
@@ -100,7 +109,7 @@ class ThreadedTaskManager(GObject.GObject):
         self.lock.acquire()
         try:
             self.threads.remove(threading.current_thread())
-        except:
+        except Exception:
             pass
 
         self.check_start_job()
@@ -110,6 +119,7 @@ class ThreadedTaskManager(GObject.GObject):
 
         self.lock.release()
 
+
 class Spice_Harvester(GObject.Object):
     __gsignals__ = {
         'installed-changed': (GObject.SignalFlags.RUN_FIRST, None, ()),
@@ -176,7 +186,7 @@ class Spice_Harvester(GObject.Object):
         except dbus.exceptions.DBusException as e:
             print(e)
 
-    def _on_proxy_ready (self, object, result, data=None):
+    def _on_proxy_ready(self, object, result, data=None):
         self._proxy = Gio.DBusProxy.new_for_bus_finish(result)
         self._proxy.connect('g-signal', self._on_signal)
 
@@ -192,19 +202,19 @@ class Spice_Harvester(GObject.Object):
             if signal_name == name:
                 callback(*params)
 
-    """ connects a callback to a dbus signal"""
     def connect_proxy(self, name, callback):
+        """ connects a callback to a dbus signal"""
         self._proxy_signals.append((name, callback))
 
-    """ disconnects a previously connected dbus signal"""
     def disconnect_proxy(self, name):
-        for signal in self._proxy+_signals:
+        """ disconnects a previously connected dbus signal"""
+        for signal in self._proxy_signals:
             if name in signal:
                 self._proxy_signals.remove(signal)
                 break
 
-    """ sends a command over dbus"""
     def send_proxy_signal(self, command, *args):
+        """ sends a command over dbus"""
         if self._proxy is None:
             self._proxy_deferred_actions.append((command, args))
         else:
@@ -216,18 +226,18 @@ class Spice_Harvester(GObject.Object):
                 self.running_uuids = self._proxy.GetRunningXletUUIDs('(s)', self.collection_type)
             else:
                 self.running_uuids = []
-        except:
+        except Exception:
             self.running_uuids = []
         self.emit('status-changed')
 
-    """ opens to the web page of the given uuid"""
     def open_spice_page(self, uuid):
+        """ opens to the web page of the given uuid"""
         id = self.index_cache[uuid]['spices-id']
         os.system('xdg-open "%s/%ss/view/%s"' % (URL_SPICES_HOME, self.collection_type, id))
 
-    """ returns a Gtk.Widget that can be added to the application. This widget will show the progress of any
-        asynchronous actions taking place (ie. refreshing the cache or downloading an applet)"""
     def get_progressbar(self):
+        """ returns a Gtk.Widget that can be added to the application. This widget will show the progress of any
+        asynchronous actions taking place (ie. refreshing the cache or downloading an applet)"""
         progressbar = Gtk.ProgressBar()
         progressbar.set_show_text(True)
         progressbar.set_text('')
@@ -330,15 +340,15 @@ class Spice_Harvester(GObject.Object):
         return outfile
 
     def _url_retrieve(self, url, f, reporthook):
-        #Like the one in urllib. Unlike urllib.retrieve url_retrieve
-        #can be interrupted. KeyboardInterrupt exception is rasied when
-        #interrupted.
+        # Like the one in urllib. Unlike urllib.retrieve url_retrieve
+        # can be interrupted. KeyboardInterrupt exception is rasied when
+        # interrupted.
         count = 0
         blockSize = 1024 * 8
         try:
             urlobj = urllib2.urlopen(url)
             assert urlobj.getcode() == 200
-        except Exception, detail:
+        except Exception as detail:
             f.close()
             self.abort_download = ABORT_ERROR
             self.error = detail
@@ -379,8 +389,8 @@ class Spice_Harvester(GObject.Object):
                         metadata['path'] = subdirectory
                         metadata['writable'] = os.access(subdirectory, os.W_OK)
                         self.meta_map[uuid] = metadata
-                    except Exception, detail:
-                        print detail
+                    except Exception as detail:
+                        print(detail)
                         print("Skipping %s: there was a problem trying to read metadata.json" % uuid)
             else:
                 print("%s does not exist! Creating it now." % directory)
@@ -390,16 +400,16 @@ class Spice_Harvester(GObject.Object):
         self._load_metadata()
         self.emit("installed-changed")
 
-    """ returns a dictionary of the metadata by uuid of all installed spices"""
     def get_installed(self):
+        """ returns a dictionary of the metadata by uuid of all installed spices"""
         return self.meta_map
 
-    """ returns a boolean specifying whether the given spice is installed or not"""
     def get_is_installed(self, uuid):
+        """ returns a boolean specifying whether the given spice is installed or not"""
         return uuid in self.meta_map
 
-    """ returns a boolean indicating whether the given spice has an update available"""
     def get_has_update(self, uuid):
+        """ returns a boolean indicating whether the given spice has an update available"""
         if uuid not in self.index_cache:
             return False
 
@@ -408,11 +418,11 @@ class Spice_Harvester(GObject.Object):
                 return False
             else:
                 return True
-        except Exception as e:
+        except Exception:
             return False
 
-    """ returns the number of instances currently enabled"""
     def get_enabled(self, uuid):
+        """ returns the number of instances currently enabled"""
         enabled_count = 0
         if not self.themes:
             enabled_list = self.settings.get_strv(self.enabled_key)
@@ -424,16 +434,16 @@ class Spice_Harvester(GObject.Object):
 
         return enabled_count
 
-    """ checks whether the spice is currently running (it may be enabled but not running if there was an error in initialization)"""
     def get_is_running(self, uuid):
+        """ checks whether the spice is currently running (it may be enabled but not running if there was an error in initialization)"""
         return uuid in self.running_uuids
 
-    """ returns True if there are updates available or False otherwise"""
     def are_updates_available(self):
+        """ returns True if there are updates available or False otherwise"""
         return len(self.updates_available) > 0
 
-    """ retrieves a copy of the index cache """
     def get_cache(self):
+        """ retrieves a copy of the index cache """
         return self.index_cache
 
     def _load_cache(self):
@@ -451,10 +461,10 @@ class Spice_Harvester(GObject.Object):
         f = open(filename, 'r')
         try:
             self.index_cache = json.load(f)
-        except ValueError, detail:
+        except ValueError as detail:
             try:
                 os.remove(filename)
-            except:
+            except Exception:
                 pass
             self.errorMessage(_("Something went wrong with the spices download.  Please try refreshing the list again."), str(detail))
 
@@ -462,8 +472,8 @@ class Spice_Harvester(GObject.Object):
             if self.get_is_installed(uuid) and self.get_has_update(uuid):
                 self.updates_available.append(uuid)
 
-    """ downloads an updated version of the index and assets"""
     def refresh_cache(self):
+        """ downloads an updated version of the index and assets"""
         self.old_cache = self.index_cache
 
         job = {'func': self._download_cache}
@@ -521,7 +531,7 @@ class Spice_Harvester(GObject.Object):
         for t in trash:
             try:
                 os.remove(os.path.join(self.cache_folder, t))
-            except:
+            except Exception:
                 pass
 
         self.download_total_files = 0
@@ -538,7 +548,7 @@ class Spice_Harvester(GObject.Object):
     def _is_bad_image(self, path):
         try:
             Image.open(path)
-        except IOError, detail:
+        except IOError:
             return True
         return False
 
@@ -546,8 +556,8 @@ class Spice_Harvester(GObject.Object):
     def _sanitize_thumb(self, basename):
         return basename.replace("jpg", "png").replace("JPG", "png").replace("PNG", "png")
 
-    """ downloads and installs the given extension"""
     def install(self, uuid):
+        """ downloads and installs the given extension"""
         job = {'uuid': uuid, 'func': self._install, 'callback': self._install_finished}
         job['progress_text'] = _("Installing %s") % uuid
         self._push_job(job)
@@ -556,7 +566,7 @@ class Spice_Harvester(GObject.Object):
         try:
             uuid = job['uuid']
 
-            download_url = URL_SPICES_HOME + self.index_cache[uuid]['file'];
+            download_url = URL_SPICES_HOME + self.index_cache[uuid]['file']
             self.current_uuid = uuid
 
             fd, ziptempfile = tempfile.mkstemp()
@@ -619,7 +629,7 @@ class Spice_Harvester(GObject.Object):
                 shutil.rmtree(dest)
             shutil.copytree(uuidfolder, dest)
 
-        except Exception, detail:
+        except Exception as detail:
             if not self.abort_download:
                 self.errorMessage(_("An error occurred during the installation of %s. Please report this incident to its developer.") % uuid, str(detail))
             return False
@@ -635,8 +645,8 @@ class Spice_Harvester(GObject.Object):
         if self.get_enabled(uuid):
             self.send_proxy_signal('ReloadXlet', '(ss)', uuid, self.collection_type.upper())
 
-    """ uninstalls and removes the given extension"""
     def uninstall(self, uuid):
+        """ uninstalls and removes the given extension"""
         job = {'uuid': uuid, 'func': self._uninstall}
         job['progress_text'] = _("Uninstalling %s") % uuid
         self._push_job(job)
@@ -669,31 +679,31 @@ class Spice_Harvester(GObject.Object):
                 if (os.path.exists(os.path.join(settings_dir, uuid))):
                     shutil.rmtree(os.path.join(settings_dir, uuid))
             shutil.rmtree(os.path.join(self.install_folder, uuid))
-        except Exception, detail:
+        except Exception as detail:
             self.errorMessage(_("A problem occurred while removing %s.") % job['uuid'], str(detail))
 
-    """ applies all available updates"""
     def update_all(self):
+        """ applies all available updates"""
         for uuid in self.updates_available:
             self.install(uuid)
 
-    """ trigger in-progress download to halt"""
     def abort(self, *args):
+        """ trigger in-progress download to halt"""
         self.abort_download = ABORT_USER
         return
 
-    def _ui_error_message(self, msg, detail = None):
-        dialog = Gtk.MessageDialog(transient_for = self.window,
-                                   modal = True,
-                                   message_type = Gtk.MessageType.ERROR,
-                                   buttons = Gtk.ButtonsType.OK)
+    def _ui_error_message(self, msg, detail=None):
+        dialog = Gtk.MessageDialog(transient_for=self.window,
+                                   modal=True,
+                                   message_type=Gtk.MessageType.ERROR,
+                                   buttons=Gtk.ButtonsType.OK)
         markup = msg
         if detail is not None:
             markup += _("\n\nDetails:  %s") % (str(detail))
         esc = cgi.escape(markup)
         dialog.set_markup(esc)
         dialog.show_all()
-        response = dialog.run()
+        dialog.run()
         dialog.destroy()
 
     def errorMessage(self, msg, detail=None):
@@ -702,14 +712,14 @@ class Spice_Harvester(GObject.Object):
     def enable_extension(self, uuid, panel=1, box='right', position=0):
         if self.collection_type == 'applet':
             entries = []
-            applet_id = self.settings.get_int('next-applet-id');
-            self.settings.set_int('next-applet-id', (applet_id+1));
+            applet_id = self.settings.get_int('next-applet-id')
+            self.settings.set_int('next-applet-id', (applet_id + 1))
 
             for entry in self.settings.get_strv(self.enabled_key):
                 info = entry.split(':')
                 pos = int(info[2])
                 if info[0] == 'panel%d' % panel and info[1] == box and position <= pos:
-                    info[2] = str(pos+1)
+                    info[2] = str(pos + 1)
                     entries.append(':'.join(info))
                 else:
                     entries.append(entry)
@@ -718,8 +728,8 @@ class Spice_Harvester(GObject.Object):
 
             self.settings.set_strv(self.enabled_key, entries)
         elif self.collection_type == 'desklet':
-            desklet_id = self.settings.get_int('next-desklet-id');
-            self.settings.set_int('next-desklet-id', (desklet_id+1));
+            desklet_id = self.settings.get_int('next-desklet-id')
+            self.settings.set_int('next-desklet-id', (desklet_id + 1))
             enabled = self.settings.get_strv(self.enabled_key)
 
             screen = Gdk.Screen.get_default()
@@ -742,8 +752,8 @@ class Spice_Harvester(GObject.Object):
                 new_list.append(enabled_extension)
         self.settings.set_strv(self.enabled_key, new_list)
 
-    """ gets the icon  for a given uuid"""
     def get_icon(self, uuid):
+        """ gets the icon  for a given uuid"""
         try:
             if self.themes:
                 file_path = os.path.join(self.cache_folder, os.path.basename(self.index_cache[uuid]['screenshot']))
@@ -753,6 +763,6 @@ class Spice_Harvester(GObject.Object):
                 pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(file_path, 24, 24, True)
 
             return Gtk.Image.new_from_pixbuf(pixbuf)
-        except Exception as e:
+        except Exception:
             print("There was an error processing one of the images. Try refreshing the cache.")
             return Gtk.Image.new_from_icon_name('image-missing', 2)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/TreeListWidgets.py b/files/usr/share/cinnamon/cinnamon-settings/bin/TreeListWidgets.py
index 69cfa5c..d63f82d 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/TreeListWidgets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/TreeListWidgets.py
@@ -1,44 +1,46 @@
 #!/usr/bin/python
 
 import gi
-gi.require_version('Gtk', '3.0')
+gi.require_version('Gtk', '3.0')  # noqa
 from gi.repository import Gtk
-from SettingsWidgets import *
+from SettingsWidgets import *  # noqa
 
 VARIABLE_TYPE_MAP = {
-    "string"        :   str,
-    "file"          :   str,
-    "icon"          :   str,
-    "sound"         :   str,
-    "keybinding"    :   str,
-    "integer"       :   int,
-    "float"         :   float,
-    "boolean"       :   bool
+    "string":     str,
+    "file":       str,
+    "icon":       str,
+    "sound":      str,
+    "keybinding": str,
+    "integer":    int,
+    "float":      float,
+    "boolean":    bool,
 }
 
 CLASS_TYPE_MAP = {
-    "string"        :   Entry,
-    "file"          :   FileChooser,
-    "icon"          :   IconChooser,
-    "sound"         :   SoundFileChooser,
-    "keybinding"    :   Keybinding,
-    "integer"       :   SpinButton,
-    "float"         :   SpinButton,
-    "boolean"       :   Switch
+    "string":     Entry,
+    "file":       FileChooser,
+    "icon":       IconChooser,
+    "sound":      SoundFileChooser,
+    "keybinding": Keybinding,
+    "integer":    SpinButton,
+    "float":      SpinButton,
+    "boolean":    Switch,
 }
 
 PROPERTIES_MAP = {
-    "title"         : "label",
-    "min"           : "mini",
-    "max"           : "maxi",
-    "step"          : "step",
-    "units"         : "units",
-    "select-dir"    : "dir_select",
-    "expand-width"  : "expand_width"
+    "title":        "label",
+    "min":          "mini",
+    "max":          "maxi",
+    "step":         "step",
+    "units":        "units",
+    "select-dir":   "dir_select",
+    "expand-width": "expand_width",
 }
 
+
 def list_edit_factory(options):
     class Widget(CLASS_TYPE_MAP[options["type"]]):
+
         def __init__(self, **kwargs):
             super(Widget, self).__init__(**kwargs)
 
@@ -71,7 +73,7 @@ def list_edit_factory(options):
             if self.bind_dir is None:
                 try:
                     return self.widget_value
-                except Exception as e:
+                except Exception:
                     return None
             else:
                 if hasattr(self, "bind_object"):
@@ -111,7 +113,6 @@ class List(SettingsWidget):
         scrollbox.add(self.content_widget)
 
         types = []
-        tv_columns = []
         for i in range(len(columns)):
             types.append(VARIABLE_TYPE_MAP[columns[i]["type"]])
             renderer = Gtk.CellRendererText()
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/capi.py b/files/usr/share/cinnamon/cinnamon-settings/bin/capi.py
index df3e4ae..9616166 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/capi.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/capi.py
@@ -13,6 +13,8 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see http://www.gnu.org/licenses/
 
+from __future__ import print_function
+
 import platform
 import os
 
@@ -20,8 +22,9 @@ from gi.repository import Gio, GObject
 
 
 class CManager():
+
     def __init__(self):
-        self.extension_point = Gio.io_extension_point_register ("cinnamon-control-center-1")
+        self.extension_point = Gio.io_extension_point_register("cinnamon-control-center-1")
         self.modules = []
 
         architecture = platform.machine()
@@ -44,8 +47,8 @@ class CManager():
                 if os.path.exists(path):
                     try:
                         self.modules = self.modules + Gio.io_modules_load_all_in_directory(path)
-                    except Exception, e:
-                        print "capi failed to load multiarch modules from %s: " % path, e
+                    except Exception as e:
+                        print("capi failed to load multiarch modules from %s: " % path, e)
 
     def get_c_widget(self, mod_id):
         extension = self.extension_point.get_extension_by_name(mod_id)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/eyedropper.py b/files/usr/share/cinnamon/cinnamon-settings/bin/eyedropper.py
index e733c79..46bb942 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/eyedropper.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/eyedropper.py
@@ -1,21 +1,26 @@
+import gettext
+
 import gi
-gi.require_version("Gtk", "3.0")
-from gi.repository import Gtk, Gdk, GObject, GdkPixbuf
+gi.require_version("Gtk", "3.0")  # noqa
+from gi.repository import Gtk, Gdk, GObject
 from PIL import Image
 
+_ = gettext.gettext
+
+
 class EyeDropper(Gtk.HBox):
     __gsignals__ = {
         'color-picked': (GObject.SignalFlags.RUN_LAST, None, (GObject.TYPE_STRING,))
     }
 
     def __init__(self):
-        Gtk.HBox.__init__ (self)
+        Gtk.HBox.__init__(self)
 
         self.button = Gtk.Button("")
         self.button.set_tooltip_text(_("Click the eyedropper, then click a color anywhere on your screen to select that color"))
         self.button.set_image(Gtk.Image().new_from_stock(Gtk.STOCK_COLOR_PICKER, Gtk.IconSize.BUTTON))
         self.button.get_property('image').show()
-        self.button.set_events(Gdk.EventMask.POINTER_MOTION_MASK | Gdk.EventMask.POINTER_MOTION_HINT_MASK);
+        self.button.set_events(Gdk.EventMask.POINTER_MOTION_MASK | Gdk.EventMask.POINTER_MOTION_HINT_MASK)
 
         self.pack_start(self.button, False, False, 2)
 
@@ -41,11 +46,11 @@ class EyeDropper(Gtk.HBox):
 
         if isinstance(toplevel, Gtk.Window):
             if toplevel.has_group():
-                toplevel.add_window(grab_widget)
+                toplevel.add_window(self.grab_widget)
 
         window = self.grab_widget.get_window()
 
-        picker_cursor = Gdk.Cursor(screen.get_display(), Gdk.CursorType.CROSSHAIR);
+        picker_cursor = Gdk.Cursor(screen.get_display(), Gdk.CursorType.CROSSHAIR)
 
         grab_status = self.device.grab(window, Gdk.GrabOwnership.APPLICATION, False,
                                        Gdk.EventMask.BUTTON_RELEASE_MASK | Gdk.EventMask.BUTTON_PRESS_MASK | Gdk.EventMask.POINTER_MOTION_MASK,
@@ -104,6 +109,7 @@ class EyeDropper(Gtk.HBox):
         self.grab_widget.handler_disconnect(self.br_handler)
         self.grab_widget.handler_disconnect(self.kp_handler)
 
+
 def pixbuf2Image(pb):
-    width,height = pb.get_width(),pb.get_height()
-    return Image.fromstring("RGB",(width,height),pb.get_pixels() )
+    width, height = pb.get_width(), pb.get_height()
+    return Image.fromstring("RGB", (width, height), pb.get_pixels())
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/imtools.py b/files/usr/share/cinnamon/cinnamon-settings/bin/imtools.py
index e28cb54..baa2b67 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/imtools.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/imtools.py
@@ -13,10 +13,8 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see http://www.gnu.org/licenses/
 
-import os
 from cStringIO import StringIO
 from itertools import cycle
-from urllib import urlopen
 
 from PIL import Image
 from PIL import ImageDraw
@@ -48,6 +46,7 @@ CROSS_POS = (CROSS, CROSS, CROSS, CROSS)
 ROUNDED_POS = (ROUNDED, ROUNDED, ROUNDED, ROUNDED)
 ROUNDED_RECTANGLE_ID = 'rounded_rectangle_r%d_f%d_s%s_p%s'
 
+
 class InvalidWriteFormatError(Exception):
     pass
 
@@ -84,33 +83,33 @@ def drop_shadow(image, horizontal_offset=5, vertical_offset=5,
         # Make sure 'LA' and 'P' with trasparency are handled
         image = image.convert('RGBA')
 
-    #get info
+    # get info
     size = image.size
     mode = image.mode
 
     back = None
 
-    #assert image is RGBA
+    # assert image is RGBA
     if mode != 'RGBA':
         if mode != 'RGB':
             image = image.convert('RGB')
             mode = 'RGB'
-        #create cache id
+        # create cache id
         id = ''.join([str(x) for x in ['shadow_', size,
                                        horizontal_offset, vertical_offset, border, shadow_blur,
                                        background_color, shadow_color]])
 
-        #look up in cache
+        # look up in cache
         if id in cache:
-            #retrieve from cache
+            # retrieve from cache
             back, back_size = cache[id]
 
     if back is None:
-        #size of backdrop
+        # size of backdrop
         back_size = (size[0] + abs(horizontal_offset) + 2 * border,
                      size[1] + abs(vertical_offset) + 2 * border)
 
-        #create shadow mask
+        # create shadow mask
         if mode == 'RGBA':
             image_mask = get_alpha(image)
             shadow = Image.new('L', back_size, 0)
@@ -124,26 +123,26 @@ def drop_shadow(image, horizontal_offset=5, vertical_offset=5,
                                    shadow_left + size[0], shadow_top + size[1]))
         del image_mask  # free up memory
 
-        #blur shadow mask
+        # blur shadow mask
 
-        #Apply the filter to blur the edges of the shadow.  Since a small
-        #kernel is used, the filter must be applied repeatedly to get a decent
-        #blur.
+        # Apply the filter to blur the edges of the shadow.  Since a small
+        # kernel is used, the filter must be applied repeatedly to get a decent
+        # blur.
         n = 0
         while n < shadow_blur:
             shadow = shadow.filter(ImageFilter.BLUR)
             n += 1
 
-        #create back
+        # create back
         if mode == 'RGBA':
             back = Image.new('RGBA', back_size, shadow_color)
             back.putalpha(shadow)
             del shadow  # free up memory
         else:
-            back = shadow
+            back = shadow  # noqa
             cache[id] = back, back_size
 
-    #Paste the input image onto the shadow backdrop
+    # Paste the input image onto the shadow backdrop
     image_left = border - min(horizontal_offset, 0)
     image_top = border - min(vertical_offset, 0)
     if mode == 'RGBA':
@@ -158,6 +157,7 @@ def drop_shadow(image, horizontal_offset=5, vertical_offset=5,
 
     return back
 
+
 def round_image(image, cache={}, round_all=True, rounding_type=None,
                 radius=100, opacity=255, pos=ROUNDED_POS, back_color='#FFFFFF'):
 
@@ -174,15 +174,16 @@ def round_image(image, cache={}, round_all=True, rounding_type=None,
     image.putalpha(mask)
     return image
 
+
 def create_rounded_rectangle(size=(600, 400), cache={}, radius=100,
                              opacity=255, pos=ROUNDED_POS):
-    #rounded_rectangle
+    # rounded_rectangle
     im_x, im_y = size
     rounded_rectangle_id = ROUNDED_RECTANGLE_ID % (radius, opacity, size, pos)
     if rounded_rectangle_id in cache:
         return cache[rounded_rectangle_id]
     else:
-        #cross
+        # cross
         cross_id = ROUNDED_RECTANGLE_ID % (radius, opacity, size, CROSS_POS)
         if cross_id in cache:
             cross = cache[cross_id]
@@ -193,13 +194,13 @@ def create_rounded_rectangle(size=(600, 400), cache={}, radius=100,
             draw.rectangle((0, radius, im_x, im_y - radius), fill=opacity)
         if pos == CROSS_POS:
             return cross
-        #corner
+        # corner
         corner_id = CORNER_ID % (radius, opacity)
         if corner_id in cache:
             corner = cache[corner_id]
         else:
             corner = cache[corner_id] = create_corner(radius, opacity)
-        #rounded rectangle
+        # rounded rectangle
         rectangle = Image.new('L', (radius, radius), 255)
         rounded_rectangle = cross.copy()
         for index, angle in enumerate(pos):
@@ -223,6 +224,7 @@ def create_rounded_rectangle(size=(600, 400), cache={}, radius=100,
         cache[rounded_rectangle_id] = rounded_rectangle
         return rounded_rectangle
 
+
 def create_corner(radius=100, opacity=255, factor=2):
     corner = Image.new('L', (factor * radius, factor * radius), 0)
     draw = ImageDraw.Draw(corner)
@@ -231,6 +233,7 @@ def create_corner(radius=100, opacity=255, factor=2):
     corner = corner.resize((radius, radius), Image.ANTIALIAS)
     return corner
 
+
 def get_format(ext):
     """Guess the image format by the file extension.
 
@@ -250,6 +253,7 @@ def get_format(ext):
     ext = ext.lstrip('.').upper()
     return FORMATS_BY_EXT.get(ext, ext)
 
+
 def open_image_data(data):
     """Open image from format data.
 
@@ -261,18 +265,6 @@ def open_image_data(data):
     return Image.open(StringIO(data))
 
 
-def open_image_exif(uri):
-    """Open local files or remote files over http and transpose the
-    image to its exif orientation.
-
-    :param uri: image location
-    :type uri: string
-    :returns: image
-    :rtype: pil.Image
-    """
-    return transpose_exif(open_image(uri))
-
-
 class _ByteCounter:
     """Helper class to count how many bytes are written to a file.
 
@@ -283,6 +275,7 @@ class _ByteCounter:
     >>> bc.bytes
     5
     """
+
     def __init__(self):
         self.bytes = 0
 
@@ -385,67 +378,6 @@ def fill_background_color(image, color):
     return back
 
 
-def generate_layer(image_size, mark, method,
-                   horizontal_offset, vertical_offset,
-                   horizontal_justification, vertical_justification,
-                   orientation, opacity):
-    """Generate new layer for backgrounds or watermarks on which a given
-    image ``mark`` can be positioned, scaled or repeated.
-
-    :param image_size: size of the reference image
-    :type image_size: tuple of int
-    :param mark: image mark
-    :type mark: pil.Image
-    :param method: ``'Tile'``, ``'Scale'``, ``'By Offset'``
-    :type method: string
-    :param horizontal_offset: horizontal offset
-    :type horizontal_offset: int
-    :param vertical_offset: vertical offset
-    :type vertical_offset: int
-    :param horizontal_justification: ``'Left'``, ``'Middle'``, ``'Right'``
-    :type horizontal_justification: string
-    :param vertical_justification: ``'Top'``, ``'Middle'``, ``'Bottom'``
-    :type vertical_justification: string
-    :param orientation: mark orientation (e.g. ``'ROTATE_270'``)
-    :type orientation: string
-    :param opacity: opacity within ``[0, 1]``
-    :type opacity: float
-    :returns: generated layer
-    :rtype: pil.Image
-
-    .. see also:: :func:`reduce_opacity`
-    """
-    mark = convert_safe_mode(open_image(mark))
-    opacity /= 100.0
-    mark = reduce_opacity(mark, opacity)
-    layer = Image.new('RGBA', image_size, (0, 0, 0, 0))
-    if method == 'Tile':
-        for y in range(0, image_size[1], mark.size[1]):
-            for x in range(0, image_size[0], mark.size[0]):
-                paste(layer, mark, (x, y))
-    elif method == 'Scale':
-        # scale, but preserve the aspect ratio
-        ratio = min(float(image_size[0]) / mark.size[0],
-                    float(image_size[1]) / mark.size[1])
-        w = int(mark.size[0] * ratio)
-        h = int(mark.size[1] * ratio)
-        mark = mark.resize((w, h))
-        paste(layer, mark, ((image_size[0] - w) / 2,
-                            (image_size[1] - h) / 2))
-    elif method == 'By Offset':
-        location = calculate_location(
-            horizontal_offset, vertical_offset,
-            horizontal_justification, vertical_justification,
-            image_size, mark.size)
-        if orientation:
-            orientation_value = getattr(Image, orientation)
-            mark = mark.transpose(orientation_value)
-        paste(layer, mark, location, force=True)
-    else:
-        raise ValueError('Unknown method "%s" for generate_layer.' % method)
-    return layer
-
-
 def identity_color(image, value=0):
     """Get a color with same color component values.
 
@@ -575,7 +507,7 @@ def calculate_location(horizontal_offset, vertical_offset,
 
 
 ####################################
-####    PIL helper functions    ####
+#       PIL helper functions       #
 ####################################
 
 
@@ -780,7 +712,7 @@ def put_palette(image_to, image_from, palette=None):
     :param palette: image palette
     :type palette: sequence of (r, g, b) tuples or None
     """
-    if palette == None:
+    if palette is None:
         palette = get_palette(image_from)
     image_to.putpalette(flatten(palette))
     if 'transparency' in image_from.info:
@@ -878,7 +810,7 @@ def paste(destination, source, box=(0, 0), mask=None, force=False):
             source_without_alpha = remove_alpha(source)
             # paste on top of the opaque destination pixels
             destination.paste(source_without_alpha, box, source)
-            if invert_alpha != None:
+            if invert_alpha is not None:
                 # the alpha channel is ok now, so save it
                 destination_alpha = get_alpha(destination)
                 # paste on top of the transparant destination pixels
@@ -945,11 +877,11 @@ def convert(image, mode, *args, **keyw):
         # A workaround for a PIL bug.
         # Converting from P to LA directly doesn't work.
         return image.convert('RGBA').convert('LA', *args, **keyw)
-    if has_transparency(image) and (not mode in ['RGBA', 'LA']):
+    if has_transparency(image) and (mode not in ['RGBA', 'LA']):
         if image.mode == 'P':
             image = image.convert('RGBA')
             del image.info['transparency']
-        #image = fill_background_color(image, (255, 255, 255, 255))
+        # image = fill_background_color(image, (255, 255, 255, 255))
         image = image.convert(mode, *args, **keyw)
         return image
     return image.convert(mode, *args, **keyw)
@@ -984,10 +916,10 @@ def convert_save_mode_by_format(image, format):
     :returns: the converted image
     :rtype: PIL image object
     """
-    #TODO: Extend this helper function to support other formats as well
+    # TODO: Extend this helper function to support other formats as well
     if image.mode == 'P':
         # Make sure P is handled correctly
-        if not format in ['GIF', 'PNG', 'TIFF', 'IM', 'PCX']:
+        if format not in ['GIF', 'PNG', 'TIFF', 'IM', 'PCX']:
             image = remove_alpha(image)
     if format == 'JPEG':
         if image.mode in ['RGBA', 'P']:
@@ -1036,7 +968,7 @@ def convert_save_mode_by_format(image, format):
         if image.mode in ['P', 'RGBA', 'YCbCr']:
             return image.convert('RGB')
     elif format == 'XBM':
-        if not image.mode in ['1']:
+        if image.mode not in ['1']:
             return image.convert('1')
     elif format == 'TIFF':
         if image.mode in ['YCbCr']:
@@ -1044,41 +976,10 @@ def convert_save_mode_by_format(image, format):
     elif format == 'PNG':
         if image.mode in ['CMYK', 'YCbCr']:
             return image.convert('RGB')
-    #for consistency return a copy! (thumbnail.py depends on it)
+    # for consistency return a copy! (thumbnail.py depends on it)
     return image.copy()
 
 
-def save_check_mode(image, filename, **options):
-    #save image with pil
-    save(image, filename, **options)
-    #verify saved file
-    try:
-        image_file = Image.open(filename)
-        image_file.verify()
-    except IOError:
-        # We can't verify the image mode with PIL, so issue no warnings.
-        return ''
-    if image.mode != image_file.mode:
-        return image_file.mode
-    return ''
-
-
-def save_safely(image, filename):
-    """Saves an image with a filename and raise the specific
-    ``InvalidWriteFormatError`` in case of an error instead of a
-    ``KeyError``. It can also save IM files with unicode.
-
-    :param image: image
-    :type image: pil.Image
-    :param filename: image filename
-    :type filename: string
-    """
-    ext = os.path.splitext(filename)[-1]
-    format = get_format(ext[1:])
-    image = convert_save_mode_by_format(image, format)
-    save(image, filename)
-
-
 def get_reverse_transposition(transposition):
     """Get the reverse transposition method.
 
@@ -1101,7 +1002,7 @@ def get_exif_transposition(orientation):
     :returns: (transposition methods, reverse transpostion methods)
     :rtype: tuple
     """
-    #see EXIF.py
+    # see EXIF.py
     if orientation == 1:
         transposition = transposition_reverse = ()
     elif orientation == 2:
@@ -1240,7 +1141,7 @@ def add_checkboard(image):
     """
     if (image.mode == 'P' and 'transparency' in image.info) or\
             image.mode.endswith('A'):
-        #transparant image
+        # transparant image
         image = image.convert('RGBA')
         image_bg = checkboard(image.size)
         paste(image_bg, image, (0, 0), image)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/proxygsettings.py b/files/usr/share/cinnamon/cinnamon-settings/bin/proxygsettings.py
index 055863b..cc2cca8 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/proxygsettings.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/proxygsettings.py
@@ -29,6 +29,8 @@
 # files in the program, then also delete it here.
 """Retrieve the proxy configuration from Gnome."""
 
+from __future__ import print_function
+
 import subprocess
 
 
@@ -69,17 +71,18 @@ def proxy_url_from_settings(scheme, gsettings):
     proxy_url = ""
     if username is not None:
         if pwd is not None:
-            proxy_url = "%s:%s@%s:%d" % (username,pwd,host,port)
+            proxy_url = "%s:%s@%s:%d" % (username, pwd, host, port)
         else:
-            proxy_url = "%s@%s:%d" % (username,host,port)
+            proxy_url = "%s@%s:%d" % (username, host, port)
     else:
-        proxy_url =  "%s:%d" % (host,port)
+        proxy_url = "%s:%d" % (host, port)
 
     if protocol is not None:
         proxy_url = "%s://%s" % (protocol, proxy_url)
 
     return proxy_url
 
+
 def get_proxy_settings():
     """Parse the proxy settings as returned by the gsettings executable
        and return a dictionary with a proxy URL for each scheme ."""
@@ -101,7 +104,7 @@ def get_proxy_settings():
         elif value.isdigit():
             parsed_value = int(value)
         else:
-            print CANNOT_PARSE_WARNING % value
+            print(CANNOT_PARSE_WARNING % value)
             parsed_value = value
         relative_key = (path + "." + key)[base_len:]
         gsettings[relative_key] = parsed_value
diff --git a/files/usr/share/cinnamon/cinnamon-settings/bin/tweenEquations.py b/files/usr/share/cinnamon/cinnamon-settings/bin/tweenEquations.py
index ce3ad43..8175070 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/bin/tweenEquations.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/bin/tweenEquations.py
@@ -35,6 +35,7 @@
 from __future__ import division
 import math
 
+
 def easeNone(t, b, c, d):
     return c * t / d + b
 
@@ -83,7 +84,7 @@ def easeInOutCubic(t, b, c, d):
 
 def easeOutInCubic(t, b, c, d):
     if t < d / 2:
-        return easeOutCubic (t * 2, b, c / 2, d)
+        return easeOutCubic(t * 2, b, c / 2, d)
     return easeInCubic((t * 2) - d, b + c / 2, c / 2, d)
 
 
@@ -131,7 +132,7 @@ def easeInOutQuint(t, b, c, d):
 
 def easeOutInQuint(t, b, c, d):
     if t < d / 2:
-        return easeOutQuint (t * 2, b, c / 2, d)
+        return easeOutQuint(t * 2, b, c / 2, d)
     return easeInQuint((t * 2) - d, b + c / 2, c / 2, d)
 
 
@@ -178,7 +179,7 @@ def easeInOutExpo(t, b, c, d):
 
 def easeOutInExpo(t, b, c, d):
     if t < d / 2:
-        return easeOutExpo (t * 2, b, c / 2, d)
+        return easeOutExpo(t * 2, b, c / 2, d)
     return easeInExpo((t * 2) - d, b + c / 2, c / 2, d)
 
 
@@ -249,7 +250,7 @@ def easeInOutElastic(t, b, c, d):
 
 def easeOutInElastic(t, b, c, d):
     if t < d / 2:
-        return easeOutElastic (t * 2, b, c / 2, d)
+        return easeOutElastic(t * 2, b, c / 2, d)
     return easeInElastic((t * 2) - d, b + c / 2, c / 2, d)
 
 
@@ -276,12 +277,12 @@ def easeInOutBack(t, b, c, d):
 
 def easeOutInBack(t, b, c, d):
     if t < d / 2:
-        return easeOutBack (t * 2, b, c / 2, d)
+        return easeOutBack(t * 2, b, c / 2, d)
     return easeInBack((t * 2) - d, b + c / 2, c / 2, d)
 
 
 def easeInBounce(t, b, c, d):
-    return c - easeOutBounce (d - t, 0, c, d) + b
+    return c - easeOutBounce(d - t, 0, c, d) + b
 
 
 def easeOutBounce(t, b, c, d):
@@ -300,11 +301,11 @@ def easeOutBounce(t, b, c, d):
 
 def easeInOutBounce(t, b, c, d):
     if t < d / 2:
-        return easeInBounce (t * 2, 0, c, d) * .5 + b
-    return easeOutBounce (t * 2 - d, 0, c, d) * .5 + c*.5 + b
+        return easeInBounce(t * 2, 0, c, d) * .5 + b
+    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b
 
 
 def easeOutInBounce(t, b, c, d):
     if t < d / 2:
-        return easeOutBounce (t * 2, b, c / 2, d)
+        return easeOutBounce(t * 2, b, c / 2, d)
     return easeInBounce((t * 2) - d, b + c / 2, c / 2, d)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py b/files/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py
index bc8d6b0..a5a09e8 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py
@@ -1,8 +1,9 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
 import sys
-reload(sys)
-sys.setdefaultencoding('utf-8')
+sys.setdefaultencoding('utf-8')  # noqa
 
 import os
 import glob
@@ -16,24 +17,25 @@ import unicodedata
 import config
 
 import gi
-gi.require_version('Gtk', '3.0')
-gi.require_version('XApp', '1.0')
+gi.require_version('Gtk', '3.0')  # noqa
+gi.require_version('XApp', '1.0')  # noqa
 from gi.repository import Gio, Gtk, Pango, Gdk, XApp
 
-sys.path.append(config.currentPath + "/modules")
-sys.path.append(config.currentPath + "/bin")
+sys.path.append(config.currentPath + "/modules")  # noqa
+sys.path.append(config.currentPath + "/bin")  # noqa
 import capi
 import proxygsettings
 import SettingsWidgets
 
 # i18n
 gettext.install("cinnamon", "/usr/share/locale")
+_ = gettext.gettext
 
 # Standard setting pages... this can be expanded to include applet dirs maybe?
 mod_files = glob.glob(config.currentPath + "/modules/*.py")
 mod_files.sort()
 if len(mod_files) is 0:
-    print "No settings modules found!!"
+    print("No settings modules found!!")
     sys.exit(1)
 
 mod_files = [x.split('/')[-1].split('.')[0] for x in mod_files]
@@ -91,20 +93,23 @@ STANDALONE_MODULES = [
     [_("Manage Services and Units"),     "systemd-manager-pkexec",       "cs-sources",         "admin",          _("systemd, units, services, systemctl, init")]
 ]
 
+
 def print_timing(func):
     # decorate functions with @print_timing to output how long they take to run.
     def wrapper(*arg):
         t1 = time.time()
         res = func(*arg)
         t2 = time.time()
-        print '%s took %0.3f ms' % (func.func_name, (t2-t1)*1000.0)
+        print('%s took %0.3f ms' % (func.func_name, (t2 - t1) * 1000.0))
         return res
     return wrapper
 
+
 def touch(fname, times=None):
     with file(fname, 'a'):
         os.utime(fname, times)
 
+
 class MainWindow:
 
     # Change pages
@@ -124,17 +129,17 @@ class MainWindow:
 
     def go_to_sidepage(self, cat, path):
         iterator = self.store[cat].get_iter(path)
-        sidePage = self.store[cat].get_value(iterator,2)
+        sidePage = self.store[cat].get_value(iterator, 2)
         if not sidePage.is_standalone:
             self.window.set_title(sidePage.name)
             self.window.set_icon_name(sidePage.icon)
             sidePage.build()
             if sidePage.stack:
-                current_page = sidePage.stack.get_visible_child_name()
+                # current_page = sidePage.stack.get_visible_child_name()
                 self.stack_switcher.set_stack(sidePage.stack)
-                l = sidePage.stack.get_children()
-                if len(l) > 0:
-                    sidePage.stack.set_visible_child(l[0])
+                children = sidePage.stack.get_children()
+                if len(children) > 0:
+                    sidePage.stack.set_visible_child(children[0])
                     if sidePage.stack.get_visible():
                         self.stack_switcher.set_opacity(1)
                     else:
@@ -182,8 +187,8 @@ class MainWindow:
             if key is not cat:
                 self.side_view[key].unselect_all()
 
-    ''' Create the UI '''
     def __init__(self):
+        ''' Create the UI '''
         self.builder = Gtk.Builder()
         self.builder.add_from_file(config.currentPath + "/cinnamon-settings.ui")
         self.window = XApp.GtkWindow(visible=True, window_position=Gtk.WindowPosition.CENTER,
@@ -244,8 +249,8 @@ class MainWindow:
                 mod = module.Module(self.content_box)
                 if self.loadCheck(mod) and self.setParentRefs(mod):
                     self.unsortedSidePages.append((mod.sidePage, mod.name, mod.category))
-            except:
-                print "Failed to load module %s" % module
+            except Exception:
+                print("Failed to load module %s" % module)
                 traceback.print_exc()
 
         for item in CONTROL_CENTER_MODULES:
@@ -267,8 +272,7 @@ class MainWindow:
                 if(trySidePage[0].name == sidePageName):
                     nextSidePage = trySidePage
 
-            self.sidePages.append(nextSidePage);
-
+            self.sidePages.append(nextSidePage)
 
         # create the backing stores for the side nav-view.
         sidePagesIters = {}
@@ -276,14 +280,14 @@ class MainWindow:
         self.storeFilter = {}
         for sidepage in self.sidePages:
             sp, sp_id, sp_cat = sidepage
-            if not self.store.has_key(sp_cat):  #       Label         Icon          sidePage     Category
-                self.store[sidepage[2]] = Gtk.ListStore(str,          str,    object,     str)
+            if sp_cat not in self.store:  # ListStore(Label, Icon, sidePage, Category)
+                self.store[sidepage[2]] = Gtk.ListStore(str,  str,   object,      str)
                 for category in CATEGORIES:
                     if category["id"] == sp_cat:
                         category["show"] = True
 
             # Don't allow item names (and their translations) to be more than 30 chars long. It looks ugly and it creates huge gaps in the icon views
-            name = unicode(sp.name,'utf-8')
+            name = unicode(sp.name, 'utf-8')
             if len(name) > 30:
                 name = "%s..." % name[:30]
             sidePagesIters[sp_id] = (self.store[sp_cat].append([name, sp.icon, sp, sp_cat]), sp_cat)
@@ -367,7 +371,7 @@ class MainWindow:
         text = text.decode("utf-8")
         return str(text)
 
-    def filter_visible_function(self, model, iter, user_data = None):
+    def filter_visible_function(self, model, iter, user_data=None):
         sidePage = model.get_value(iter, 2)
         text = self.strip_accents(self.search_entry.get_text().lower())
         if self.strip_accents(sidePage.name.lower()).find(text) > -1 or \
@@ -380,7 +384,7 @@ class MainWindow:
         widgets = self.side_view_container.get_children()
         for widget in widgets:
             widget.destroy()
-        self.first_category_done = False # This is just to prevent an extra separator showing up before the first category
+        self.first_category_done = False  # This is just to prevent an extra separator showing up before the first category
         for category in CATEGORIES:
             if category["show"] is True:
                 self.prepCategory(category)
@@ -391,7 +395,7 @@ class MainWindow:
         min_width_pixels = 0
         icon_view = Gtk.IconView()
         iter = model.get_iter_first()
-        while iter != None:
+        while iter is not None:
             string = model.get_value(iter, 0)
             split_by_word = string.split(" ")
             for word in split_by_word:
@@ -565,17 +569,17 @@ class MainWindow:
             iter = self.storeFilter[id].iter_next(iter)
         return visible
 
-    def setParentRefs (self, mod):
+    def setParentRefs(self, mod):
         try:
             mod._setParentRef(self.window)
         except AttributeError:
             pass
         return True
 
-    def loadCheck (self, mod):
+    def loadCheck(self, mod):
         try:
             return mod._loadCheck()
-        except:
+        except Exception:
             return True
 
     def back_to_icon_view(self, widget):
@@ -598,6 +602,7 @@ class MainWindow:
         self.window.destroy()
         Gtk.main_quit()
 
+
 if __name__ == "__main__":
     import signal
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_accessibility.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_accessibility.py
index 7f5c2b9..b18f0b5 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_accessibility.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_accessibility.py
@@ -1,23 +1,29 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 import gi
-gi.require_version("Gtk", "3.0")
-gi.require_version('CDesktopEnums', '3.0')
+gi.require_version("Gtk", "3.0")  # noqa
+gi.require_version('CDesktopEnums', '3.0')  # noqa
+
+from gi.repository import Gtk
+from GSettingsWidgets import *  # noqa
 
-from gi.repository import Gtk, CDesktopEnums
-from GSettingsWidgets import *
+_ = gettext.gettext
 
-DPI_FACTOR_LARGE         = 1.25
-DPI_FACTOR_NORMAL        = 1.0
+DPI_FACTOR_LARGE = 1.25
+DPI_FACTOR_NORMAL = 1.0
 
-HIGH_CONTRAST_THEME      = "HighContrast"
-KEY_TEXT_SCALING_FACTOR  = "text-scaling-factor"
-KEY_GTK_THEME            = "gtk-theme"
-KEY_GTK_THEME_BACKUP     = "gtk-theme-backup"
-KEY_ICON_THEME           = "icon-theme"
-KEY_ICON_THEME_BACKUP    = "icon-theme-backup"
-KEY_WM_THEME             = "theme"
-KEY_WM_THEME_BACKUP      = "theme-backup"
+HIGH_CONTRAST_THEME = "HighContrast"
+KEY_TEXT_SCALING_FACTOR = "text-scaling-factor"
+KEY_GTK_THEME = "gtk-theme"
+KEY_GTK_THEME_BACKUP = "gtk-theme-backup"
+KEY_ICON_THEME = "icon-theme"
+KEY_ICON_THEME_BACKUP = "icon-theme-backup"
+KEY_WM_THEME = "theme"
+KEY_WM_THEME_BACKUP = "theme-backup"
 
 
 class Module:
@@ -26,22 +32,22 @@ class Module:
     category = "prefs"
 
     def __init__(self, content_box):
-        keywords = _("magnifier, talk, access, zoom, keys, contrast");
+        keywords = _("magnifier, talk, access, zoom, keys, contrast")
         sidePage = SidePage(_("Accessibility"), "cs-universal-access", keywords, content_box, module=self)
         self.sidePage = sidePage
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Accessibility module"
+            print("Loading Accessibility module")
 
             self.iface_settings = Gio.Settings(schema_id="org.cinnamon.desktop.interface")
-            self.wm_settings = Gio.Settings(schema_id="org.cinnamon.desktop.wm.preferences");
-            self.mag_settings = Gio.Settings(schema_id="org.cinnamon.desktop.a11y.magnifier");
+            self.wm_settings = Gio.Settings(schema_id="org.cinnamon.desktop.wm.preferences")
+            self.mag_settings = Gio.Settings(schema_id="org.cinnamon.desktop.a11y.magnifier")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
 
-####    Visual
+# Visual
 
             page = SettingsPage()
             self.sidePage.stack.add_titled(page, "visual", _("Visual"))
@@ -84,7 +90,7 @@ class Module:
             spin = GSettingsSpinButton(_("Magnification"), "org.cinnamon.desktop.a11y.magnifier", "mag-factor", None, 1.0, 15.0, step=0.5)
             settings.add_reveal_row(spin, "org.cinnamon.desktop.a11y.applications", "screen-magnifier-enabled")
 
-            zoom_key_options = [["", _("Disabled")], ["<Alt>", "<Alt>"],["<Super>", "<Super>"],["<Control>", "<Control>"]]
+            zoom_key_options = [["", _("Disabled")], ["<Alt>", "<Alt>"], ["<Super>", "<Super>"], ["<Control>", "<Control>"]]
             widget = GSettingsComboBox(_("Mouse wheel modifier"), "org.cinnamon.desktop.wm.preferences", "mouse-button-zoom-modifier", zoom_key_options)
             widget.set_tooltip_text(_("While this modifier is pressed, mouse scrolling will increase or decrease zoom."))
             settings.add_reveal_row(widget, "org.cinnamon.desktop.a11y.applications", "screen-magnifier-enabled")
@@ -134,7 +140,7 @@ class Module:
             else:
                 self.zoom_stack.set_visible_child_name("screen")
 
-#### Keyboard
+# Keyboard
 
             page = SettingsPage()
             self.sidePage.stack.add_titled(page, "keyboard", _("Keyboard"))
@@ -171,7 +177,7 @@ class Module:
             settings.add_reveal_row(widget, "org.cinnamon.desktop.a11y.applications", "screen-keyboard-enabled")
 
             activation_mode_options = [["accessible", _("Show the keyboard any time something expects input")],
-                                       ["on-demand",  _("Show keyboard only when the user activates it")]];
+                                       ["on-demand",  _("Show keyboard only when the user activates it")]]
 
             widget = GSettingsComboBox(_("Activation mode"), "org.cinnamon.keyboard", "activation-mode", activation_mode_options)
             settings.add_reveal_row(widget, "org.cinnamon.desktop.a11y.applications", "screen-keyboard-enabled")
@@ -225,7 +231,7 @@ class Module:
                                                      "bell-sound")
             settings.add_reveal_row(sound_picker, "org.cinnamon.desktop.wm.preferences", "audible-bell")
 
-####    Typing Assistance
+# Typing Assistance
 
             page = SettingsPage()
             self.sidePage.stack.add_titled(page, "typing", _("Typing assistance"))
@@ -321,7 +327,7 @@ class Module:
 
             settings.add_reveal_row(slider, "org.cinnamon.desktop.a11y.keyboard", "bouncekeys-enable")
 
-####    Pointing and Clicking
+# Pointing and Clicking
 
             page = SettingsPage()
             self.sidePage.stack.add_titled(page, "mouse", _("Mouse"))
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_applets.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_applets.py
index 82fda0e..7e65580 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_applets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_applets.py
@@ -1,11 +1,18 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
 import sys
+
 from ExtensionCore import ManageSpicesPage, DownloadSpicesPage
 from SettingsWidgets import SidePage, SettingsStack
 from Spices import Spice_Harvester
 from gi.repository import GLib, Gtk, Gdk
 
+_ = gettext.gettext
+
+
 class Module:
     name = "applets"
     comment = _("Manage Cinnamon applets")
@@ -17,12 +24,13 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Applets module"
+            print("Loading Applets module")
             self.sidePage.load(self.window)
 
     def _setParentRef(self, window):
         self.window = window
 
+
 class AppletsViewSidePage(SidePage):
     collection_type = "applet"
 
@@ -46,6 +54,7 @@ class AppletsViewSidePage(SidePage):
         download_applets_page = DownloadSpicesPage(self, self.collection_type, self.spices, window)
         self.stack.add_titled(download_applets_page, "more", _("Download"))
 
+
 class ManageAppletsPage(ManageSpicesPage):
     directories = [("%s/.local/share/cinnamon/applets") % GLib.get_home_dir(), "/usr/share/cinnamon/applets"]
     collection_type = "applet"
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_backgrounds.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_backgrounds.py
index 77479a1..ea4ddfc 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_backgrounds.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_backgrounds.py
@@ -1,12 +1,13 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
 import sys
 import os
 import imtools
 import gettext
 import thread
 import subprocess
-import tempfile
 import locale
 import time
 import hashlib
@@ -17,14 +18,15 @@ from xml.etree import ElementTree
 
 from PIL import Image
 import gi
-gi.require_version("Gtk", "3.0")
-from gi.repository import Gio, Gtk, GObject, Gdk, Pango, GLib
+gi.require_version("Gtk", "3.0")  # noqa
+from gi.repository import Gio, Gtk, Pango, GLib
 
 import config
-sys.path.append(config.currentPath + "/bin")
-from GSettingsWidgets import *
+sys.path.append(config.currentPath + "/bin")  # noqa
+from GSettingsWidgets import *  # noqa
 
 gettext.install("cinnamon", "/usr/share/locale")
+_ = gettext.gettext
 
 BACKGROUND_COLOR_SHADING_TYPES = [
     ("solid", _("None")),
@@ -51,14 +53,36 @@ BACKGROUND_COLLECTION_TYPE_XML = "xml"
 
 (STORE_IS_SEPARATOR, STORE_ICON, STORE_NAME, STORE_PATH, STORE_TYPE) = range(5)
 
+
 # EXIF utility functions (source: http://stackoverflow.com/questions/4228530/pil-thumbnail-is-rotating-my-image)
-def flip_horizontal(im): return im.transpose(Image.FLIP_LEFT_RIGHT)
-def flip_vertical(im): return im.transpose(Image.FLIP_TOP_BOTTOM)
-def rotate_180(im): return im.transpose(Image.ROTATE_180)
-def rotate_90(im): return im.transpose(Image.ROTATE_90)
-def rotate_270(im): return im.transpose(Image.ROTATE_270)
-def transpose(im): return rotate_90(flip_horizontal(im))
-def transverse(im): return rotate_90(flip_vertical(im))
+def flip_horizontal(im):
+    return im.transpose(Image.FLIP_LEFT_RIGHT)
+
+
+def flip_vertical(im):
+    return im.transpose(Image.FLIP_TOP_BOTTOM)
+
+
+def rotate_180(im):
+    return im.transpose(Image.ROTATE_180)
+
+
+def rotate_90(im):
+    return im.transpose(Image.ROTATE_90)
+
+
+def rotate_270(im):
+    return im.transpose(Image.ROTATE_270)
+
+
+def transpose(im):
+    return rotate_90(flip_horizontal(im))
+
+
+def transverse(im):
+    return rotate_90(flip_vertical(im))
+
+
 orientation_funcs = [None,
                      lambda x: x,
                      flip_horizontal,
@@ -69,6 +93,8 @@ orientation_funcs = [None,
                      transverse,
                      rotate_90
                      ]
+
+
 def apply_orientation(im):
     """
     Extract the oritentation EXIF tag from the image, which should be a PIL Image instance,
@@ -81,18 +107,19 @@ def apply_orientation(im):
 
     try:
         kOrientationEXIFTag = 0x0112
-        if hasattr(im, '_getexif'): # only present in JPEGs
-            e = im._getexif()       # returns None if no EXIF data
+        if hasattr(im, '_getexif'):  # only present in JPEGs
+            e = im._getexif()        # returns None if no EXIF data
             if e is not None:
-                #log.info('EXIF data found: %r', e)
+                # log.info('EXIF data found: %r', e)
                 orientation = e[kOrientationEXIFTag]
                 f = orientation_funcs[orientation]
                 return f(im)
-    except:
+    except Exception:
         # We'd be here with an invalid orientation value or some random error?
-        pass # log.exception("Error applying EXIF Orientation tag")
+        pass  # log.exception("Error applying EXIF Orientation tag")
     return im
 
+
 class Module:
     name = "backgrounds"
     category = "appear"
@@ -104,7 +131,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Backgrounds module"
+            print("Loading Backgrounds module")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
@@ -261,8 +288,6 @@ class Module:
             self.icon_view.set_selection_mode(Gtk.SelectionMode.SINGLE)
 
     def get_system_backgrounds(self):
-        picture_list = []
-        folder_list = []
         properties_dir = "/usr/share/gnome-background-properties"
         backgrounds = []
         if os.path.exists(properties_dir):
@@ -276,7 +301,7 @@ class Module:
                     # Also, other distros should get equal treatment. If they define cinnamon-backgrounds and use their own distro name, we should add support for it.
                     if display_name == "Retro":
                         icon = "cs-retro"
-                        order = 20 # place retro bgs at the end
+                        order = 20  # place retro bgs at the end
                     if display_name == "Linuxmint":
                         display_name = "Linux Mint"
                         icon = "cs-linuxmint"
@@ -321,7 +346,7 @@ class Module:
             self.remove_folder_button.set_sensitive(True)
 
             if image_source != "" and "://" in image_source:
-                while tree_iter != None:
+                while tree_iter is not None:
                     if collection_source == image_source:
                         tree_path = self.collection_store.get_path(tree_iter)
                         self.folder_tree.set_cursor(tree_path)
@@ -341,8 +366,8 @@ class Module:
                 if collection_type == BACKGROUND_COLLECTION_TYPE_XML:
                     self.remove_folder_button.set_sensitive(False)
                 self.update_icon_view(collection_path, collection_type)
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
 
     def on_row_activated(self, tree, path, column):
         self.folder_tree.set_selection(path)
@@ -454,7 +479,7 @@ class Module:
         try:
             loc = localeCode.partition("_")
             loc = (loc[0], loc[2])
-        except:
+        except Exception:
             loc = ("en", "US")
         return loc
 
@@ -480,7 +505,6 @@ class Module:
             locAttrName = "{http://www.w3.org/XML/1998/namespace}lang"
             loc = self.splitLocaleCode(locale.getdefaultlocale()[0])
             res = []
-            subLocaleFound = False
             f = open(filename)
             rootNode = ElementTree.fromstring(f.read())
             f.close()
@@ -496,7 +520,7 @@ class Module:
                                 else:
                                     propAttr = prop.attrib
                                     wpName = prop.text
-                                    locName = self.splitLocaleCode(propAttr.get(locAttrName)) if propAttr.has_key(locAttrName) else ("", "")
+                                    locName = self.splitLocaleCode(propAttr.get(locAttrName)) if locAttrName in propAttr else ("", "")
                                     names.append((locName, wpName))
                         wallpaperData["name"] = self.getLocalWallpaperName(names, loc)
 
@@ -505,18 +529,18 @@ class Module:
                                 wallpaperData["name"] = os.path.basename(wallpaperData["filename"])
                             res.append(wallpaperData)
             return res
-        except Exception, detail:
-            print "Could not parse %s!" % filename
-            print detail
+        except Exception as detail:
+            print("Could not parse %s!" % filename)
+            print(detail)
             return []
 
     def update_secondary_revealer(self, settings, key):
         show = False
 
         if settings.get_string("picture-options") in PICTURE_OPTIONS_NEEDS_COLOR:
-            #the picture is taking all the width
+            # the picture is taking all the width
             if settings.get_string("color-shading-type") != "solid":
-                #it is using a gradient, so need to show
+                # it is using a gradient, so need to show
                 show = True
 
         self.secondary_color_revealer.set_reveal_child(show)
@@ -553,8 +577,8 @@ class PixCache(object):
                             pix = pickle.load(cache_file)
                         tmp_img = Image.open(BytesIO(pix[0]))
                         pix[0] = self._image_to_pixbuf(tmp_img)
-                    except Exception, detail:
-                        print "Failed to load cache file: %s: %s" % (cache_filename, detail)
+                    except Exception as detail:
+                        print("Failed to load cache file: %s: %s" % (cache_filename, detail))
                         pix = None
 
                 else:
@@ -573,7 +597,7 @@ class PixCache(object):
                     (width, height) = img.size
                     if img.mode != "RGB":
                         if img.mode == "RGBA":
-                            bg_img = Image.new("RGBA", img.size, (255,255,255,255))
+                            bg_img = Image.new("RGBA", img.size, (255, 255, 255, 255))
                             img = Image.alpha_composite(bg_img, img)
                         img = img.convert("RGB")
                     if size:
@@ -589,12 +613,12 @@ class PixCache(object):
                         img.save(png_bytes, "png")
                         with open(cache_filename, "w") as cache_file:
                             pickle.dump([png_bytes.getvalue(), width, height], cache_file, 2)
-                    except Exception, detail:
-                        print "Failed to save cache file: %s: %s" % (cache_filename, detail)
+                    except Exception as detail:
+                        print("Failed to save cache file: %s: %s" % (cache_filename, detail))
 
                     pix = [self._image_to_pixbuf(img), width, height]
-            except Exception, detail:
-                print "Failed to convert %s: %s" % (filename, detail)
+            except Exception as detail:
+                print("Failed to convert %s: %s" % (filename, detail))
                 pix = None
             if pix:
                 self._data[filename][size] = pix
@@ -608,6 +632,7 @@ class PixCache(object):
                                                True, 8, w, h,
                                                w * 4)
 
+
 PIX_CACHE = PixCache()
 
 
@@ -717,7 +742,7 @@ class ThreadedIconView(Gtk.IconView):
                 if filename.endswith(".xml"):
                     filename = self.getFirstFileFromBackgroundXml(filename)
                 pix = PIX_CACHE.get_pix(filename, BACKGROUND_ICONS_SIZE)
-                if pix != None:
+                if pix is not None:
                     if "name" in to_load:
                         label = to_load["name"]
                     else:
@@ -749,8 +774,8 @@ class ThreadedIconView(Gtk.IconView):
                                 if staticNode[-1].tag == "size":
                                     return staticNode[-1].text
                                 return staticNode.text
-            print "Could not find filename in %s" % filename
+            print("Could not find filename in %s" % filename)
             return None
-        except Exception, detail:
-            print "Failed to read filename from %s: %s" % (filename, detail)
+        except Exception as detail:
+            print("Failed to read filename from %s: %s" % (filename, detail))
             return None
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_calendar.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_calendar.py
index a3d9f11..2069670 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_calendar.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_calendar.py
@@ -1,6 +1,12 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+import gettext
+
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
+
 
 class Module:
     name = "calendar"
@@ -13,7 +19,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Calendar module"
+            print("Loading Calendar module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
@@ -25,8 +31,8 @@ class Module:
                 widget.pack_start(content, False, False, 0)
                 settings.add_row(widget)
 
-            except Exception, detail:
-                print detail
+            except Exception as detail:
+                print(detail)
 
             settings = page.add_section(_("Format"))
             settings.add_row(GSettingsSwitch(_("Use 24h clock"), "org.cinnamon.desktop.interface", "clock-use-24h"))
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_default.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_default.py
index 3785b8e..c997d1a 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_default.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_default.py
@@ -1,7 +1,9 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
-from gi.repository import *
+from __future__ import print_function
+
+from GSettingsWidgets import *  # noqa
+from gi.repository import *  # noqa
 
 PREF_MEDIA_AUTORUN_NEVER = "autorun-never"
 PREF_MEDIA_AUTORUN_X_CONTENT_START_APP = "autorun-x-content-start-app"
@@ -26,19 +28,19 @@ DEF_HEADING = 2
 preferred_app_defs = [
     # 1st mimetype is to let us find apps
     # 2nd mimetype is to set default handler for (so we handle all of that type, not just a specific format)
-    ( "inode/directory",         "inode/directory",            _("File Manager") ),
-    ( "x-scheme-handler/http",   "x-scheme-handler/http",      _("_Web") ),
-    ( "x-scheme-handler/mailto", "x-scheme-handler/mailto",    _("_Mail") ),
-    ( "application/msword",      "application/msword",       _("Documents") ),
-    ( "text/plain",              "text/plain",               _("Plain Text") ),
-    ( "audio/x-vorbis+ogg",      "audio",                    _("M_usic") ),
-    ( "video/x-ogm+ogg",         "video",                    _("_Video") ),
-    ( "image/jpeg",              "image",                    _("_Photos") ),
-    ( "text/x-python",           "text/x-python",          _("Source Code") ),
+    ("inode/directory",         "inode/directory",         _("File Manager")),
+    ("x-scheme-handler/http",   "x-scheme-handler/http",   _("_Web")),
+    ("x-scheme-handler/mailto", "x-scheme-handler/mailto", _("_Mail")),
+    ("application/msword",      "application/msword",      _("Documents")),
+    ("text/plain",              "text/plain",              _("Plain Text")),
+    ("audio/x-vorbis+ogg",      "audio",                   _("M_usic")),
+    ("video/x-ogm+ogg",         "video",                   _("_Video")),
+    ("image/jpeg",              "image",                   _("_Photos")),
+    ("text/x-python",           "text/x-python",           _("Source Code")),
 ]
 
 mimetypes = {}
-mimetypes["audio"]=[
+mimetypes["audio"] = [
     "audio/3gpp",
     "audio/aac",
     "audio/ac3",
@@ -73,7 +75,7 @@ mimetypes["audio"]=[
     "audio/x-wavpack"
 ]
 
-mimetypes["video"]=[
+mimetypes["video"] = [
     "video/3gp",
     "video/3gpp",
     "video/divx",
@@ -131,11 +133,11 @@ mimetypes["application/msword"] = [
 ]
 
 removable_media_defs = [
-    ( "x-content/audio-cdda",       _("CD _audio") ,     _("Select an application for audio CDs")),
-    ( "x-content/video-dvd",        _("_DVD video"),     _("Select an application for video DVDs") ),
-    ( "x-content/audio-player",     _("_Music player"),  _("Select an application to run when a music player is connected") ),
-    ( "x-content/image-dcf",        _("_Photos"),        _("Select an application to run when a camera is connected") ),
-    ( "x-content/unix-software",    _("_Software"),      _("Select an application for software CDs") )
+    ("x-content/audio-cdda",       _("CD _audio"),      _("Select an application for audio CDs")),
+    ("x-content/video-dvd",        _("_DVD video"),     _("Select an application for video DVDs")),
+    ("x-content/audio-player",     _("_Music player"),  _("Select an application to run when a music player is connected")),
+    ("x-content/image-dcf",        _("_Photos"),        _("Select an application to run when a camera is connected")),
+    ("x-content/unix-software",    _("_Software"),      _("Select an application for software CDs"))
 ]
 
 other_defs = [
@@ -143,22 +145,24 @@ other_defs = [
     # strings, just here to fix capitalization of the English originals.
     # If the shared-mime-info translation works for your language,
     # simply leave these untranslated.
-    ( "x-content/audio-dvd",        _("audio DVD") ),
-    ( "x-content/blank-bd",         _("blank Blu-ray disc") ),
-    ( "x-content/blank-cd",         _("blank CD disc") ),
-    ( "x-content/blank-dvd",        _("blank DVD disc") ),
-    ( "x-content/blank-hddvd",      _("blank HD DVD disc") ),
-    ( "x-content/video-bluray",     _("Blu-ray video disc") ),
-    ( "x-content/ebook-reader",     _("e-book reader") ),
-    ( "x-content/video-hddvd",      _("HD DVD video disc") ),
-    ( "x-content/image-picturecd",  _("Picture CD") ),
-    ( "x-content/video-svcd",       _("Super Video CD") ),
-    ( "x-content/video-vcd",        _("Video CD") ),
-    ( "x-content/win32-software",   _("Windows software") ),
-    ( "x-content/software",         _("Software") )
+    ("x-content/audio-dvd",        _("audio DVD")),
+    ("x-content/blank-bd",         _("blank Blu-ray disc")),
+    ("x-content/blank-cd",         _("blank CD disc")),
+    ("x-content/blank-dvd",        _("blank DVD disc")),
+    ("x-content/blank-hddvd",      _("blank HD DVD disc")),
+    ("x-content/video-bluray",     _("Blu-ray video disc")),
+    ("x-content/ebook-reader",     _("e-book reader")),
+    ("x-content/video-hddvd",      _("HD DVD video disc")),
+    ("x-content/image-picturecd",  _("Picture CD")),
+    ("x-content/video-svcd",       _("Super Video CD")),
+    ("x-content/video-vcd",        _("Video CD")),
+    ("x-content/win32-software",   _("Windows software")),
+    ("x-content/software",         _("Software"))
 ]
 
+
 class ColumnBox(Gtk.VBox):
+
     def __init__(self, title, content):
         super(ColumnBox, self).__init__()
 
@@ -170,33 +174,39 @@ class ColumnBox(Gtk.VBox):
         self.pack_start(label, False, False, 6)
         self.pack_end(content, True, True, 0)
 
+
 class ButtonTable(Gtk.Table):
+
     def __init__(self, lines):
-        super(ButtonTable, self).__init__(n_rows = lines, n_columns = 2, homogeneous = False)
+        super(ButtonTable, self).__init__(n_rows=lines, n_columns=2, homogeneous=False)
         self.set_row_spacings(8)
         self.set_col_spacings(15)
-        self.attach(Gtk.Label.new(""), 2, 3, 0, lines, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL, 0, 0, 0)
+        self.attach(Gtk.Label.new(""), 2, 3, 0, lines, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 0, 0, 0)
         self.row = 0
 
     def addRow(self, label, button):
         if label:
             label = MnemonicLabel(label, button)
-            self.attach(label, 0, 1, self.row, self.row+1, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL, 0, 0, 0)
-        self.attach(button, 1, 2, self.row, self.row+1, Gtk.AttachOptions.FILL, 0, 0, 0)
+            self.attach(label, 0, 1, self.row, self.row + 1, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 0, 0, 0)
+        self.attach(button, 1, 2, self.row, self.row + 1, Gtk.AttachOptions.FILL, 0, 0, 0)
         self.row += 1
 
     def forgetRow(self):
         self.row -= 1
 
+
 class MnemonicLabel(Gtk.Label):
+
     def __init__(self, text, widget):
-        super(MnemonicLabel, self).__init__(label = "")
+        super(MnemonicLabel, self).__init__(label="")
         self.set_text_with_mnemonic(text)
         self.set_mnemonic_widget(widget)
         self.set_alignment(0.0, 0.5)
         self.set_line_wrap(True)
 
+
 class DefaultAppChooserButton(Gtk.AppChooserButton):
+
     def __init__(self, content_type, gen_content_type):
         super(DefaultAppChooserButton, self).__init__(content_type=content_type)
         self.content_type = content_type
@@ -207,7 +217,7 @@ class DefaultAppChooserButton(Gtk.AppChooserButton):
 
     def onChanged(self, button):
         info = button.get_app_info()
-        print "%s: " % info.get_name()
+        print("%s: " % info.get_name())
         if info:
             supported_mimetypes = info.get_supported_types()
             hardcoded_mimetypes = None
@@ -220,27 +230,29 @@ class DefaultAppChooserButton(Gtk.AppChooserButton):
             if supported_mimetypes is not None:
                 for t in sorted(supported_mimetypes):
                     if t.startswith(self.generic_content_type):
-                        if info.set_as_default_for_type (t):
-                            print "  Set as default for supported %s" % t
+                        if info.set_as_default_for_type(t):
+                            print("  Set as default for supported %s" % t)
                             set_mimes.append(t)
                         else:
-                            print "  Failed to set as default application for '%s'" % t
+                            print("  Failed to set as default application for '%s'" % t)
 
             # Also assign mimes hardcoded in the mimetypes hashtable
             if hardcoded_mimetypes is not None:
                 for t in sorted(hardcoded_mimetypes):
                     if t not in set_mimes:
-                        if info.set_as_default_for_type (t):
-                            print "  Set as default for hardcoded %s" % t
+                        if info.set_as_default_for_type(t):
+                            print("  Set as default for hardcoded %s" % t)
                         else:
-                            print "  Failed to set as default application for '%s'" % t
+                            print("  Failed to set as default application for '%s'" % t)
 
-            #Web
+            # Web
             if self.content_type == "x-scheme-handler/http":
-                if info.set_as_default_for_type ("x-scheme-handler/https") == False:
-                    print "  Failed to set '%s' as the default application for '%s'" % (info.get_name(), "x-scheme-handler/https")
+                if info.set_as_default_for_type("x-scheme-handler/https") is False:
+                    print("  Failed to set '%s' as the default application for '%s'" % (info.get_name(), "x-scheme-handler/https"))
+
+
+class DefaultTerminalButton(Gtk.AppChooserButton):  # TODO: See if we can get this to change the x-terminal-emulator default to allow it to be a more global change rather then just cinnamon/nemo
 
-class DefaultTerminalButton(Gtk.AppChooserButton): #TODO: See if we can get this to change the x-terminal-emulator default to allow it to be a more global change rather then just cinnamon/nemo
     def __init__(self):
         super(DefaultTerminalButton, self).__init__()
         self.connect("changed", self.onChanged)
@@ -258,10 +270,10 @@ class DefaultTerminalButton(Gtk.AppChooserButton): #TODO: See if we can get this
             exec_val = Gio.DesktopAppInfo.get_string(self.this_item, "Exec")
             name_val = Gio.DesktopAppInfo.get_string(self.this_item, "Name")
             icon_val = Gio.DesktopAppInfo.get_string(self.this_item, "Icon")
-            #terminals don't have mime types, so we check for "TerminalEmulator" under the "Category" key in desktop files
+            # terminals don't have mime types, so we check for "TerminalEmulator" under the "Category" key in desktop files
             if (cat_val is not None and "TerminalEmulator" in cat_val):
-                #this crazy if statement makes sure remaining desktop file info is not empty, then prevents root terminals from showing, then prevents repeating terminals from trying to being added which leave a blank space and Gtk-WARNING's
-                if (exec_val is not None and name_val is not None and icon_val is not None and not "gksu" in exec_val and exec_val not in self.active_items):
+                # this crazy if statement makes sure remaining desktop file info is not empty, then prevents root terminals from showing, then prevents repeating terminals from trying to being added which leave a blank space and Gtk-WARNING's
+                if (exec_val is not None and name_val is not None and icon_val is not None and "gksu" not in exec_val and exec_val not in self.active_items):
                     self.append_custom_item(exec_val, name_val, Gio.ThemedIcon.new(icon_val))
                     self.active_items.append(exec_val)
                     if (self.key_value == exec_val):
@@ -273,7 +285,9 @@ class DefaultTerminalButton(Gtk.AppChooserButton): #TODO: See if we can get this
         command_key = self.active_items[index_num]
         self.settings.set_string("exec", command_key)
 
+
 class CustomAppChooserButton(Gtk.AppChooserButton):
+
     def __init__(self, media_settings, content_type, heading=None):
         super(CustomAppChooserButton, self).__init__(content_type=content_type)
         self.media_settings = media_settings
@@ -281,13 +295,13 @@ class CustomAppChooserButton(Gtk.AppChooserButton):
 
         self.set_valign(Gtk.Align.CENTER)
 
-        #fetch preferences for this content type
+        # fetch preferences for this content type
         (pref_start_app, pref_ignore, pref_open_folder) = self.getPreferences()
         pref_ask = not pref_start_app and not pref_ignore and not pref_open_folder
 
         info = self.get_app_info()
 
-        #append the separator only if we have >= 1 apps in the chooser
+        # append the separator only if we have >= 1 apps in the chooser
         if info:
             self.append_separator()
 
@@ -319,8 +333,6 @@ class CustomAppChooserButton(Gtk.AppChooserButton):
             info.set_as_default_for_type(content_type)
 
     def onCustomItemActivated(self, button, item):
-        content_type = self.get_content_type()
-
         if item == CUSTOM_ITEM_ASK:
             self.setPreferences(False, False, False)
         elif item == CUSTOM_ITEM_OPEN_FOLDER:
@@ -330,10 +342,10 @@ class CustomAppChooserButton(Gtk.AppChooserButton):
 
     def getPreference(self, settings_key):
         strv = self.media_settings.get_strv(settings_key)
-        return strv != None and self.get_content_type() in strv
+        return strv is not None and self.get_content_type() in strv
 
     def getPreferences(self):
-        pref_start_app = self.getPreference( PREF_MEDIA_AUTORUN_X_CONTENT_START_APP)
+        pref_start_app = self.getPreference(PREF_MEDIA_AUTORUN_X_CONTENT_START_APP)
         pref_ignore = self.getPreference(PREF_MEDIA_AUTORUN_X_CONTENT_IGNORE)
         pref_open_folder = self.getPreference(PREF_MEDIA_AUTORUN_X_CONTENT_OPEN_FOLDER)
 
@@ -342,7 +354,7 @@ class CustomAppChooserButton(Gtk.AppChooserButton):
     def setPreference(self, pref_value, settings_key):
         array = self.media_settings.get_strv(settings_key)
         content_type = self.get_content_type()
-        array = [ v for v in array if v != content_type ]
+        array = [v for v in array if v != content_type]
         if pref_value:
             array.append(content_type)
         self.media_settings.set_strv(settings_key, array)
@@ -352,12 +364,14 @@ class CustomAppChooserButton(Gtk.AppChooserButton):
         self.setPreference(pref_ignore, PREF_MEDIA_AUTORUN_X_CONTENT_IGNORE)
         self.setPreference(pref_open_folder, PREF_MEDIA_AUTORUN_X_CONTENT_OPEN_FOLDER)
 
+
 class OtherTypeDialog(Gtk.Dialog):
+
     def __init__(self, media_settings, transient_parent):
-        super(OtherTypeDialog, self).__init__(title = _("Other Media"),
-                                              transient_for = transient_parent,
-                                              border_width = 6,
-                                              flags = 0)
+        super(OtherTypeDialog, self).__init__(title=_("Other Media"),
+                                              transient_for=transient_parent,
+                                              border_width=6,
+                                              flags=0)
         self.add_button(_("Close"), Gtk.ResponseType.OK)
 
         self.set_default_size(350, 100)
@@ -365,7 +379,7 @@ class OtherTypeDialog(Gtk.Dialog):
         self.media_settings = media_settings
 
         list_store = Gtk.ListStore(str, str)
-        list_store.set_sort_column_id (1, Gtk.SortType.ASCENDING)
+        list_store.set_sort_column_id(1, Gtk.SortType.ASCENDING)
         self.type_combo = Gtk.ComboBox.new_with_model(list_store)
         self.application_combo = None
 
@@ -376,7 +390,7 @@ class OtherTypeDialog(Gtk.Dialog):
 
         renderer = Gtk.CellRendererText()
         self.type_combo.pack_start(renderer, True)
-        self.type_combo.add_attribute (renderer,"text", 0)
+        self.type_combo.add_attribute(renderer, "text", 0)
 
         self.type_combo.set_active(False)
 
@@ -408,8 +422,8 @@ class OtherTypeDialog(Gtk.Dialog):
                     description = s
                 break
 
-        if description == None:
-            print "Content type '%s' is missing from the info panel" % content_type
+        if description is None:
+            print("Content type '%s' is missing from the info panel" % content_type)
             return Gio.content_type_get_description(content_type)
 
         return description
@@ -428,7 +442,7 @@ class OtherTypeDialog(Gtk.Dialog):
 
     def doHide(self):
         self.hide()
-        if self.application_combo != None:
+        if self.application_combo is not None:
             self.application_combo.destroy()
             self.application_combo = None
             self.table.forgetRow()
@@ -448,8 +462,8 @@ class OtherTypeDialog(Gtk.Dialog):
         x_content_type = model.get_value(iter, 1)
         heading = model.get_value(iter, 0)
 
-        action_container = Gtk.HBox()
-        if self.application_combo != None:
+        # action_container = Gtk.HBox()
+        if self.application_combo is not None:
             self.application_combo.destroy()
             self.table.forgetRow()
 
@@ -458,6 +472,7 @@ class OtherTypeDialog(Gtk.Dialog):
 
         self.table.addRow(_("_Action:"), self.application_combo)
 
+
 class Module:
     name = "default"
     category = "prefs"
@@ -470,7 +485,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Default module"
+            print("Loading Default module")
 
             self.media_settings = Gio.Settings.new(MEDIA_HANDLING_SCHEMA)
             self.other_type_dialog = OtherTypeDialog(self.media_settings, self.sidePage.window)
@@ -483,7 +498,6 @@ class Module:
             page = SettingsPage()
             self.sidePage.stack.add_titled(page, "preferred", _("Preferred applications"))
 
-
             settings = page.add_section(_("Preferred applications"))
 
             size_group = Gtk.SizeGroup.new(Gtk.SizeGroupMode.HORIZONTAL)
@@ -495,7 +509,7 @@ class Module:
                 size_group.add_widget(button)
                 widget.pack_start(label, False, False, 0)
                 widget.pack_end(button, False, False, 0)
-                #Hide button if there are no apps
+                # Hide button if there are no apps
                 if not button.get_active():
                     settings.add_row(widget)
 
@@ -542,7 +556,9 @@ class Module:
     def _setParentRef(self, window):
         self.sidePage.window = window
 
+
 class InvertedSwitch(SettingsWidget):
+
     def __init__(self, label, schema, key):
         self.key = key
         super(InvertedSwitch, self).__init__()
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desklets.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desklets.py
index 2768562..3175ed3 100644
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desklets.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desklets.py
@@ -1,10 +1,17 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 from ExtensionCore import ManageSpicesPage, DownloadSpicesPage
 from Spices import Spice_Harvester
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
 from gi.repository import GLib, Gtk
 
+_ = gettext.gettext
+
+
 class Module:
     comment = _("Manage your Cinnamon desklets")
     name = "desklets"
@@ -16,12 +23,13 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Desklets module"
+            print("Loading Desklets module")
             self.sidePage.load(self.window)
 
     def _setParentRef(self, window):
         self.window = window
 
+
 class DeskletsViewSidePage(SidePage):
     collection_type = "desklet"
 
@@ -68,6 +76,7 @@ class DeskletsViewSidePage(SidePage):
         settings.add_row(GSettingsSwitch(_("Snap desklets to grid"), "org.cinnamon", "desklet-snap"))
         settings.add_reveal_row(GSettingsSpinButton(_("Width of desklet snap grid"), "org.cinnamon", "desklet-snap-interval", "", 0, 100, 1, 5), "org.cinnamon", "desklet-snap")
 
+
 class ManageDeskletsPage(ManageSpicesPage):
     directories = [("%s/.local/share/cinnamon/desklets") % GLib.get_home_dir(), "/usr/share/cinnamon/desklets"]
     collection_type = "desklet"
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desktop.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desktop.py
index 0e2af76..ce135b6 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desktop.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_desktop.py
@@ -1,8 +1,14 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 from gi.repository import Gio
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 DESKTOP_SCHEMA = "org.nemo.desktop"
 LAYOUT_KEY = "desktop-layout"
@@ -34,7 +40,7 @@ class Module:
         if self.loaded:
             return
 
-        print "Loading Desktop module"
+        print("Loading Desktop module")
 
         page = SettingsPage()
         self.sidePage.add_widget(page)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_effects.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_effects.py
index 9603637..93b4804 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_effects.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_effects.py
@@ -1,8 +1,14 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+
+import gettext
+
+from GSettingsWidgets import *  # noqa
 from ChooserButtonWidgets import TweenChooserButton, EffectChooserButton
 
+_ = gettext.gettext
+
 EFFECT_SETS = {
     "cinnamon": ("traditional", "traditional", "traditional", "none",  "none",  "none"),
     "scale":    ("scale",       "scale",       "scale",       "scale", "scale", "scale"),
@@ -39,7 +45,7 @@ COMBINATIONS = {
     "move":       ("move",     "normal",   "fast"),
     "flyUp":      ("flyUp",    "normal",   "fast"),
     "flyDown":    ("flyDown",  "normal",   "fast"),
-    #for previous versions
+    # for previous versions
     "default":    ("default",  "normal",   "default")
 }
 
@@ -52,7 +58,7 @@ OPTIONS = (
     ("move",       _("Move")),
     ("flyUp",      _("Fly up, down")),
     ("flyDown",    _("Fly down, up")),
-    #for previous versions
+    # for previous versions
     ("default",    _("Default"))
 )
 TYPES = ("map", "close", "minimize", "maximize", "unmaximize", "tile")
@@ -60,7 +66,9 @@ SCHEMA = "org.cinnamon"
 DEP_PATH = "org.cinnamon/desktop-effects"
 KEY_TEMPLATE = "desktop-effects-%s-%s"
 
+
 class GSettingsTweenChooserButton(TweenChooserButton, CSGSettingsBackend):
+
     def __init__(self, schema, key, dep_key):
         self.key = key
         self.bind_prop = "tween"
@@ -74,7 +82,9 @@ class GSettingsTweenChooserButton(TweenChooserButton, CSGSettingsBackend):
         super(GSettingsTweenChooserButton, self).__init__()
         self.bind_settings()
 
+
 class GSettingsEffectChooserButton(EffectChooserButton, CSGSettingsBackend):
+
     def __init__(self, schema, key, dep_key, options):
         self.key = key
         self.bind_prop = "effect"
@@ -88,6 +98,7 @@ class GSettingsEffectChooserButton(EffectChooserButton, CSGSettingsBackend):
         super(GSettingsEffectChooserButton, self).__init__(options)
         self.bind_settings()
 
+
 class Module:
     name = "effects"
     category = "appear"
@@ -100,7 +111,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Effects module"
+            print("Loading Effects module")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
@@ -151,7 +162,7 @@ class Module:
             label = Gtk.Label()
             label.set_markup("<b>%s</b>" % _("Customize settings"))
             box.pack_start(label, False, False, 0)
-            self.custom_switch = Gtk.Switch(active = self.is_custom())
+            self.custom_switch = Gtk.Switch(active=self.is_custom())
             box.pack_end(self.custom_switch, False, False, 0)
             self.custom_switch.connect("notify::active", self.update_effects)
             page.add(box)
@@ -250,7 +261,7 @@ class Module:
         active = switch.get_active()
 
         self.revealer.set_reveal_child(active)
-        #when unchecking the checkbutton, reset the values
+        # when unchecking the checkbutton, reset the values
         if not active:
             self.on_value_changed(self.chooser)
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_extensions.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_extensions.py
index 12af242..93859d8 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_extensions.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_extensions.py
@@ -1,10 +1,17 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 from ExtensionCore import ManageSpicesPage, DownloadSpicesPage
 from SettingsWidgets import SidePage, SettingsStack
 from Spices import Spice_Harvester
 from gi.repository import GLib
 
+_ = gettext.gettext
+
+
 class Module:
     name = "extensions"
     category = "prefs"
@@ -16,12 +23,13 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Extensions module"
+            print("Loading Extensions module")
             self.sidePage.load(self.window)
 
     def _setParentRef(self, window):
         self.window = window
 
+
 class ExtensionViewSidePage(SidePage):
     collection_type = "extension"
 
@@ -46,6 +54,7 @@ class ExtensionViewSidePage(SidePage):
         download_extensions_page = DownloadSpicesPage(self, self.collection_type, self.spices, window)
         self.stack.add_titled(download_extensions_page, "more", _("Download"))
 
+
 class ManageExtensionsPage(ManageSpicesPage):
     directories = ['/usr/share/cinnamon/extensions', ("%s/.local/share/cinnamon/extensions") % GLib.get_home_dir()]
     collection_type = "extension"
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_fonts.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_fonts.py
index 69e942d..9cc2ea6 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_fonts.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_fonts.py
@@ -1,10 +1,16 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 import gi
-gi.require_version("Gtk", "3.0")
+gi.require_version("Gtk", "3.0")  # noqa
 from gi.repository import Gtk
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Module:
@@ -19,7 +25,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Fonts module"
+            print("Loading Fonts module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_general.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_general.py
index 41177fb..eb9052f 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_general.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_general.py
@@ -1,6 +1,12 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+
+import gettext
+
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Module:
@@ -15,7 +21,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading General module"
+            print("Loading General module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_hotcorner.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_hotcorner.py
index 1d42741..52a2ae0 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_hotcorner.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_hotcorner.py
@@ -1,15 +1,21 @@
 #!/usr/bin/python2
+
+from __future__ import print_function
+
+import gettext
 import cairo
 import math
 
 from gi.repository import Gio, GLib
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
 
-_270_DEG = 270.0 * (math.pi/180.0)
-_180_DEG = 180.0 * (math.pi/180.0)
-_90_DEG = 90.0 * (math.pi/180.0)
-_0_DEG = 0.0 * (math.pi/180.0)
+_ = gettext.gettext
+
+_270_DEG = 270.0 * (math.pi / 180.0)
+_180_DEG = 180.0 * (math.pi / 180.0)
+_90_DEG = 90.0 * (math.pi / 180.0)
+_0_DEG = 0.0 * (math.pi / 180.0)
 
 
 class Module:
@@ -24,7 +30,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading HotCorner module"
+            print("Loading HotCorner module")
 
             self.corners = []
             for i in range(4):
@@ -47,10 +53,10 @@ class Module:
 
             self.cornerDisplay = HotCornerDisplay()
             table.attach(self.cornerDisplay, 1, 2, 0, 2)
-            table.attach(self.corners[0].build(), 0, 1, 0, 1, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
-            table.attach(self.corners[1].build(), 2, 3, 0, 1, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
-            table.attach(self.corners[2].build(), 0, 1, 1, 2, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
-            table.attach(self.corners[3].build(), 2, 3, 1, 2, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
+            table.attach(self.corners[0].build(), 0, 1, 0, 1, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
+            table.attach(self.corners[1].build(), 2, 3, 0, 1, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
+            table.attach(self.corners[2].build(), 0, 1, 1, 2, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
+            table.attach(self.corners[3].build(), 2, 3, 1, 2, Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
 
             self.cornerDisplay.set_size_request(200, 250)
 
@@ -81,7 +87,7 @@ class Module:
 
             try:
                 delay = prop[2]
-            except:
+            except Exception:
                 delay = "0"
 
             corner.setValues(function, enabled, delay)
@@ -102,7 +108,7 @@ class Module:
 
         try:
             props[2] = str(delay)
-        except:
+        except Exception:
             props.append("0")
 
         self.write_settings()
@@ -115,8 +121,9 @@ class Module:
 
 
 class HotCornerDisplay(Gtk.Label):
+
     def __init__(self):
-        Gtk.Label.__init__(self, label = "")
+        Gtk.Label.__init__(self, label="")
         self.connect('draw', self.expose)
 
         self.cornerEnabled = []
@@ -140,7 +147,7 @@ class HotCornerDisplay(Gtk.Label):
             (succ, color) = context.lookup_color(alternative)
         return color
 
-    #Renders button with corner visuals
+    # Renders button with corner visuals
     def expose(self, widget, cr):
         context = self.get_style_context()
         context.save()
@@ -161,7 +168,7 @@ class HotCornerDisplay(Gtk.Label):
 
         cr.rectangle(0, 0, self.allocWidth, self.allocHeight)
         cr.clip()
-        Gtk.render_background(context, cr, -10, -10, self.allocWidth+20, self.allocHeight+20)
+        Gtk.render_background(context, cr, -10, -10, self.allocWidth + 20, self.allocHeight + 20)
 
         cr.rectangle(0, 0, self.allocWidth, self.allocHeight)
         cr.clip()
@@ -169,26 +176,26 @@ class HotCornerDisplay(Gtk.Label):
         cr.set_line_width(1)
 
         self._setCornerColor(cr, 0)
-        cr.move_to(1,51)
-        cr.line_to(1,1)
+        cr.move_to(1, 51)
+        cr.line_to(1, 1)
         cr.arc(1, 1, 51, _0_DEG, _90_DEG)
         cr.fill()
 
         self._setCornerColor(cr, 1)
-        cr.move_to(self.allocWidth-1,1)
-        cr.line_to(self.allocWidth-1,51)
-        cr.arc(self.allocWidth-1, 1, 51, _90_DEG, _180_DEG)
+        cr.move_to(self.allocWidth - 1, 1)
+        cr.line_to(self.allocWidth - 1, 51)
+        cr.arc(self.allocWidth - 1, 1, 51, _90_DEG, _180_DEG)
         cr.fill()
 
         self._setCornerColor(cr, 2)
-        cr.move_to(1,self.allocHeight-1)
-        cr.line_to(1,self.allocHeight-51)
+        cr.move_to(1, self.allocHeight - 1)
+        cr.line_to(1, self.allocHeight - 51)
         cr.arc(1, self.allocHeight, 51, _270_DEG, _90_DEG)
         cr.fill()
 
         self._setCornerColor(cr, 3)
-        cr.move_to(self.allocWidth,self.allocHeight-50)
-        cr.line_to(self.allocWidth,self.allocHeight)
+        cr.move_to(self.allocWidth, self.allocHeight - 50)
+        cr.line_to(self.allocWidth, self.allocHeight)
         cr.arc(self.allocWidth, self.allocHeight, 50, _180_DEG, _270_DEG)
         cr.fill()
 
@@ -198,21 +205,22 @@ class HotCornerDisplay(Gtk.Label):
 
         context.restore()
 
-
         cr.stroke_preserve()
 
         cr.restore()
 
         return True
 
+
 class HotCornerConfiguration():
+
     def __init__(self, index, updateCallback):
         self.updateCallback = updateCallback
         self.index = index
         self.timer = None
         self.functionStore = Gtk.ListStore(str, str)
-        self.functionStore.append(['expo', _("Show all workspaces")]) #Expo
-        self.functionStore.append(['scale', _("Show all windows")]) #Scale
+        self.functionStore.append(['expo', _("Show all workspaces")])  # Expo
+        self.functionStore.append(['scale', _("Show all windows")])  # Scale
         self.functionStore.append(['desktop', _("Show the desktop")])
         self.functionStore.append(['custom', _("Run a command")])
 
@@ -295,7 +303,7 @@ class HotCornerConfiguration():
     def on_widget_changed(self, widget):
         def apply(self):
             iter = self.functionCombo.get_active_iter()
-            if iter != None:
+            if iter is not None:
                 function = self.functionStore.get_value(iter, 0)
                 enabled = self.hoverCheckbox.get_active()
                 delay = str(int(self.hoverDelaySpinner.get_value()))
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_info.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_info.py
index 74702a7..cb863fc 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_info.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_info.py
@@ -1,5 +1,8 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
 import platform
 import subprocess
 import shlex
@@ -7,7 +10,9 @@ import os
 import re
 import threading
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 def killProcess(process):
@@ -37,7 +42,7 @@ def getGraphicsInfos():
     envpath = os.environ["PATH"]
     os.environ["PATH"] = envpath + ":/usr/local/sbin:/usr/sbin:/sbin"
     for card in getProcessOut(("lspci")):
-        if not "VGA" in card:
+        if "VGA" not in card:
             continue
         cardId = card.split()[0]
         cardName = None
@@ -113,7 +118,7 @@ def createSystemInfos():
     infos.append((_("Linux Kernel"), platform.release()))
     infos.append((_("Processor"), processorName))
     if memunit == "kB":
-        infos.append((_("Memory"), '%.1f %s' % ((float(memsize)/(1024*1024)), _("GiB"))))
+        infos.append((_("Memory"), '%.1f %s' % ((float(memsize) / (1024 * 1024)), _("GiB"))))
     else:
         infos.append((_("Memory"), procInfos['mem_total']))
 
@@ -122,7 +127,7 @@ def createSystemInfos():
         diskText = _("Hard Drives")
     else:
         diskText = _("Hard Drive")
-    infos.append((diskText, '%.1f %s' % ((diskSize / (1000*1000)), _("GB"))))
+    infos.append((diskText, '%.1f %s' % ((diskSize / (1000 * 1000)), _("GB"))))
 
     cards = getGraphicsInfos()
     for card in cards:
@@ -143,7 +148,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Info module"
+            print("Loading Info module")
 
             infos = createSystemInfos()
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_keyboard.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_keyboard.py
index 2f3be78..33e7c2b 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_keyboard.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_keyboard.py
@@ -1,17 +1,19 @@
 #!/usr/bin/python2
 
-from gi.repository import Gio, Gtk, GObject, Gdk
+from __future__ import print_function
+
 import cgi
 import gettext
 
 import gi
-gi.require_version("Gtk", "3.0")
-from gi.repository import Gio, Gtk, GObject, Gdk
+gi.require_version("Gtk", "3.0")  # noqa
+from gi.repository import Gio, Gtk
 
 from KeybindingWidgets import CellRendererKeybinding
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
 
 gettext.install("cinnamon", "/usr/share/locale")
+_ = gettext.gettext
 
 # Keybindings page - check if we need to store custom
 # keybindings to gsettings key as well as GConf (In Mint 14 this is changed)
@@ -26,7 +28,7 @@ CINNAMON_SCHEMA = "org.cinnamon.desktop.keybindings"
 CATEGORIES = [
 
     #   Label                   id                  parent
-    #(child)Label                       id                  parent
+    # (child)Label                       id                  parent
 
     [_("General"),          "general",          None,       "preferences-desktop-keyboard-shortcuts"],
     [_("Troubleshooting"),      "trouble",          "general",      None],
@@ -39,12 +41,12 @@ CATEGORIES = [
     [_("Direct Navigation"),    "ws-navi",          "workspaces",   None],
     [_("System"),           "system",           None,       "preferences-system"],
     [_("Hardware"),             "sys-hw",           "system",       None],
-    [_("Screenshots and Recording"),"sys-screen",   "system",       None],
+    [_("Screenshots and Recording"), "sys-screen",   "system",       None],
     [_("Launchers"),        "launchers",        None,       "applications-utilities"],
     [_("Sound and Media"),  "media",            None,       "applications-multimedia"],
     [_("Quiet Keys"),           "media-quiet",      "media",        None],
     [_("Universal Access"), "accessibility",    None,       "preferences-desktop-accessibility"],
-    [_("Custom Shortcuts"), "custom",           None,       "cinnamon-panel-launcher"]
+    [_("Custom Shortcuts"), "custom",           None, "cinnamon-panel-launcher"],
 ]
 
 KEYBINDINGS = [
@@ -114,7 +116,7 @@ KEYBINDINGS = [
     [_("Move window to workspace 10"), MUFFIN_KEYBINDINGS_SCHEMA, "move-to-workspace-10", "win-workspaces"],
     [_("Move window to workspace 11"), MUFFIN_KEYBINDINGS_SCHEMA, "move-to-workspace-11", "win-workspaces"],
     [_("Move window to workspace 12"), MUFFIN_KEYBINDINGS_SCHEMA, "move-to-workspace-12", "win-workspaces"],
-    #Windows - Monitor-related
+    # Windows - Monitor-related
     [_("Move window to left monitor"), MUFFIN_KEYBINDINGS_SCHEMA, "move-to-monitor-left", "win-monitors"],
     [_("Move window to right monitor"), MUFFIN_KEYBINDINGS_SCHEMA, "move-to-monitor-right", "win-monitors"],
     [_("Move window to up monitor"), MUFFIN_KEYBINDINGS_SCHEMA, "move-to-monitor-up", "win-monitors"],
@@ -197,9 +199,10 @@ KEYBINDINGS = [
     [_("Turn on-screen keyboard on or off"), MEDIA_KEYS_SCHEMA, "on-screen-keyboard", "accessibility"],
     [_("Increase text size"), MEDIA_KEYS_SCHEMA, "increase-text-size", "accessibility"],
     [_("Decrease text size"), MEDIA_KEYS_SCHEMA, "decrease-text-size", "accessibility"],
-    [_("High contrast on or off"), MEDIA_KEYS_SCHEMA, "toggle-contrast", "accessibility"]
+    [_("High contrast on or off"), MEDIA_KEYS_SCHEMA, "toggle-contrast", "accessibility"],
 ]
 
+
 class Module:
     comment = _("Manage keyboard settings and shortcuts")
     name = "keyboard"
@@ -212,7 +215,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Keyboard module"
+            print("Loading Keyboard module")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
@@ -255,7 +258,7 @@ class Module:
             headingbox.pack_start(mainbox, True, True, 2)
             headingbox.pack_end(Gtk.Label.new(_("To edit a keyboard binding, click it and press the new keys, or press backspace to clear it.")), False, False, 1)
 
-            paned = Gtk.Paned(orientation = Gtk.Orientation.HORIZONTAL)
+            paned = Gtk.Paned(orientation=Gtk.Orientation.HORIZONTAL)
             Gtk.StyleContext.add_class(Gtk.Widget.get_style_context(paned), "wide")
 
             left_vbox = Gtk.Box.new(Gtk.Orientation.VERTICAL, 2)
@@ -314,13 +317,13 @@ class Module:
                                            str,     # The category name
                                            object)  # The category object
 
-            self.kb_store = Gtk.ListStore( str,   # Keybinding name
-                                           object)# The keybinding object
+            self.kb_store = Gtk.ListStore(str,     # Keybinding name
+                                          object)  # The keybinding object
 
-            self.entry_store = Gtk.ListStore(str) # Accel string
+            self.entry_store = Gtk.ListStore(str)  # Accel string
 
             cell = Gtk.CellRendererText()
-            cell.set_alignment(0,0)
+            cell.set_alignment(0, 0)
             pb_cell = Gtk.CellRendererPixbuf()
             cat_column = Gtk.TreeViewColumn(_("Categories"))
             cat_column.pack_start(pb_cell, False)
@@ -335,14 +338,14 @@ class Module:
             self.cat_tree.connect("cursor-changed", self.onCategoryChanged)
 
             kb_name_cell = Gtk.CellRendererText()
-            kb_name_cell.set_alignment(.5,.5)
+            kb_name_cell.set_alignment(.5, .5)
             kb_column = Gtk.TreeViewColumn(_("Keyboard shortcuts"), kb_name_cell, text=0)
             kb_column.set_alignment(.5)
             self.kb_tree.append_column(kb_column)
             self.kb_tree.connect("cursor-changed", self.onKeyBindingChanged)
 
             entry_cell = CellRendererKeybinding(self.entry_tree)
-            entry_cell.set_alignment(.5,.5)
+            entry_cell.set_alignment(.5, .5)
             entry_cell.connect('accel-edited', self.onEntryChanged, self.entry_store)
             entry_cell.connect('accel-cleared', self.onEntryCleared, self.entry_store)
             entry_cell.set_property('editable', True)
@@ -367,7 +370,7 @@ class Module:
             longest_cat_label = " "
 
             for category in self.main_store:
-                if category.parent == None:
+                if category.parent is None:
                     cat_iters[category.int_name] = self.cat_store.append(None)
                 else:
                     cat_iters[category.int_name] = self.cat_store.append(cat_iters[category.parent])
@@ -396,7 +399,7 @@ class Module:
             self.sidePage.stack.add_titled(vbox, "layouts", _("Layouts"))
             try:
                 widget = self.sidePage.content_box.c_manager.get_c_widget("region")
-            except:
+            except Exception:
                 widget = None
 
             if widget is not None:
@@ -432,7 +435,7 @@ class Module:
         custom_list = parent.get_strv("custom-list")
 
         for entry in custom_list:
-            custom_path = CUSTOM_KEYS_BASENAME+"/"+entry+"/"
+            custom_path = CUSTOM_KEYS_BASENAME + "/" + entry + "/"
             schema = Gio.Settings.new_with_path(CUSTOM_KEYS_SCHEMA, custom_path)
             custom_kb = CustomKeyBinding(entry,
                                          schema.get_string("name"),
@@ -455,7 +458,6 @@ class Module:
                 self.remove_custom_button.set_property('sensitive', isinstance(keybinding, CustomKeyBinding))
 
     def onEntryChanged(self, cell, path, accel_string, accel_label, entry_store):
-        iter = entry_store.get_iter(path)
         keybindings, kb_iter = self.kb_tree.get_selection().get_selected()
         if kb_iter:
             current_keybinding = keybindings[kb_iter][1]
@@ -480,7 +482,7 @@ class Module:
                         msg = _("This key combination, <b>%(combination)s</b> is currently in use by <b>%(old)s</b>.  ")
                         msg += _("If you continue, the combination will be reassigned to <b>%(new)s</b>.\n\n")
                         msg += _("Do you want to continue with this operation?")
-                        dialog.set_markup(msg % {'combination':accel_label, 'old':cgi.escape(keybinding.label), 'new':cgi.escape(current_keybinding.label)})
+                        dialog.set_markup(msg % {'combination': accel_label, 'old': cgi.escape(keybinding.label), 'new': cgi.escape(current_keybinding.label)})
                         dialog.show_all()
                         response = dialog.run()
                         dialog.destroy()
@@ -493,7 +495,6 @@ class Module:
         self.entry_tree.get_selection().select_path(path)
 
     def onEntryCleared(self, cell, path, entry_store):
-        iter = entry_store.get_iter(path)
         keybindings, kb_iter = self.kb_tree.get_selection().get_selected()
         if kb_iter:
             current_keybinding = keybindings[kb_iter][1]
@@ -595,7 +596,7 @@ class Module:
 
                 keybinding.label = dialog.name_entry.get_text()
                 keybinding.action = dialog.command_entry.get_text().replace("%20", "\ ")
-                keybinding.writeSettings();
+                keybinding.writeSettings()
 
                 i = 0
                 for cat in self.cat_store:
@@ -609,7 +610,7 @@ class Module:
                     i += 1
                 dialog.destroy()
 
-    def onContextMenuPopup(self, tree, event = None):
+    def onContextMenuPopup(self, tree, event=None):
         model, iter = tree.get_selection().get_selected()
         if iter:
             keybinding = model[iter][1]
@@ -645,6 +646,7 @@ class Module:
 
 
 class KeyBindingCategory():
+
     def __init__(self, label, int_name, parent, icon):
         self.label = label
         self.parent = parent
@@ -658,11 +660,13 @@ class KeyBindingCategory():
     def clear(self):
         del self.keybindings[:]
 
+
 class KeyBinding():
+
     def __init__(self, label, schema, key, category):
         self.key = key
         self.label = label
-        self.entries = [ ]
+        self.entries = []
         self.settings = Gio.Settings.new(schema)
         self.loadSettings()
 
@@ -698,7 +702,9 @@ class KeyBinding():
         self.settings.reset(self.key)
         self.loadSettings()
 
+
 class CustomKeyBinding():
+
     def __init__(self, path, label, action, binding):
         self.path = path
         self.label = label
@@ -722,7 +728,7 @@ class CustomKeyBinding():
         self.writeSettings()
 
     def writeSettings(self):
-        custom_path = CUSTOM_KEYS_BASENAME+"/"+self.path+"/"
+        custom_path = CUSTOM_KEYS_BASENAME + "/" + self.path + "/"
         settings = Gio.Settings.new_with_path(CUSTOM_KEYS_SCHEMA, custom_path)
 
         settings.set_string("name", self.label)
@@ -739,7 +745,9 @@ class CustomKeyBinding():
         custom_list = parent.get_strv("custom-list")
         parent.set_strv("custom-list", custom_list)
 
+
 class AddCustomDialog(Gtk.Dialog):
+
     def __init__(self, edit_mode):
         if edit_mode:
             ok_button_label = _("Update")
@@ -757,7 +765,7 @@ class AddCustomDialog(Gtk.Dialog):
         command_box.pack_start(Gtk.Label.new(_("Command:")), False, False, 2)
         self.name_entry = Gtk.Entry()
         self.name_entry.connect('changed', self.onEntriesChanged)
-        self.command_entry  = Gtk.Entry()
+        self.command_entry = Gtk.Entry()
         self.command_entry.connect('changed', self.onEntriesChanged)
         name_box.pack_start(self.name_entry, True, True, 2)
         command_box.pack_start(self.command_entry, True, True, 2)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_mouse.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_mouse.py
index de9e3a2..6221de9 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_mouse.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_mouse.py
@@ -1,10 +1,16 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 import gi
-gi.require_version("Gtk", "3.0")
+gi.require_version("Gtk", "3.0")  # noqa
 from gi.repository import Gtk, Gdk, GLib
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Module:
@@ -19,7 +25,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Mouse module"
+            print("Loading Mouse module")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_notifications.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_notifications.py
index 05f3011..05d7828 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_notifications.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_notifications.py
@@ -1,10 +1,16 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 import gi
-gi.require_version('Notify', '0.7')
-from gi.repository import GObject, Notify
+gi.require_version('Notify', '0.7')  # noqa
+from gi.repository import Notify
+
+from GSettingsWidgets import *  # noqa
 
-from GSettingsWidgets import *
+_ = gettext.gettext
 
 content = """
 Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
@@ -43,7 +49,7 @@ class Module:
         if self.loaded:
             return
 
-        print "Loading Notifications module"
+        print("Loading Notifications module")
 
         Notify.init("cinnamon-settings-notifications-test")
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_online_accounts.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_online_accounts.py
index 366b028..23f95b4 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_online_accounts.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_online_accounts.py
@@ -1,6 +1,13 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+
+import gettext
+
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
+
 
 class Module:
     name = "online-accounts"
@@ -13,7 +20,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Online Account module"
+            print("Loading Online Account module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
@@ -30,8 +37,8 @@ class Module:
                 content = self.sidePage.content_box.c_manager.get_c_widget("online-accounts")
                 content.set_no_show_all(True)
                 page.pack_start(content, True, True, 0)
-            except Exception, detail:
-                print detail
+            except Exception as detail:
+                print(detail)
 
             page.expand = True
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_panel.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_panel.py
index c0de506..043eab3 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_panel.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_panel.py
@@ -1,16 +1,23 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 import sys
 
 import dbus
 import gi
-gi.require_version('Gtk', '3.0')
-from gi.repository import GLib, Gtk, Gdk
+gi.require_version('Gtk', '3.0')  # noqa
+from gi.repository import Gtk, Gdk
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Monitor:
+
     def __init__(self):
         self.top = -1
         self.bottom = -1
@@ -19,6 +26,7 @@ class Monitor:
 
 
 class PanelSettingsPage(SettingsPage):
+
     def __init__(self, panel_id, settings, position):
         super(PanelSettingsPage, self).__init__()
         self.set_margin_top(0)
@@ -45,25 +53,26 @@ class PanelSettingsPage(SettingsPage):
         widget = PanelComboBox(_("Auto-hide panel"), "org.cinnamon", "panels-autohide", self.panel_id, options)
         section.add_row(widget)
 
-        widget = PanelSpinButton(_("Show delay"), "org.cinnamon", "panels-show-delay", self.panel_id, _("milliseconds"), 0, 2000, 50, 200)#, dep_key="org.cinnamon/panels-autohide")
+        widget = PanelSpinButton(_("Show delay"), "org.cinnamon", "panels-show-delay", self.panel_id, _("milliseconds"), 0, 2000, 50, 200)  # , dep_key="org.cinnamon/panels-autohide")
         section.add_reveal_row(widget, "org.cinnamon", "panels-autohide", check_func=can_show)
 
-        widget = PanelSpinButton(_("Hide delay"), "org.cinnamon", "panels-hide-delay", self.panel_id, _("milliseconds"), 0, 2000, 50, 200)#, dep_key="org.cinnamon/panels-autohide")
+        widget = PanelSpinButton(_("Hide delay"), "org.cinnamon", "panels-hide-delay", self.panel_id, _("milliseconds"), 0, 2000, 50, 200)  # , dep_key="org.cinnamon/panels-autohide")
         section.add_reveal_row(widget, "org.cinnamon", "panels-autohide", check_func=can_show)
 
         widget = PanelSwitch(_("Use customized panel size (otherwise it's defined by the theme)"), "org.cinnamon", "panels-resizable", self.panel_id)
         section.add_row(widget)
 
-        widget = PanelSwitch(scale_dimension_text, "org.cinnamon", "panels-scale-text-icons", self.panel_id)#, "org.cinnamon/panels-resizable")
+        widget = PanelSwitch(scale_dimension_text, "org.cinnamon", "panels-scale-text-icons", self.panel_id)  # , "org.cinnamon/panels-resizable")
         section.add_reveal_row(widget, "org.cinnamon", "panels-resizable", check_func=can_show)
 
-        widget = PanelRange(dimension_text, "org.cinnamon", "panels-height", self.panel_id, _("Smaller"), _("Larger"), mini=20, maxi=50, show_value=False)#, dep_key="org.cinnamon/panels-resizable")
+        widget = PanelRange(dimension_text, "org.cinnamon", "panels-height", self.panel_id, _("Smaller"), _("Larger"), mini=20, maxi=50, show_value=False)  # , dep_key="org.cinnamon/panels-resizable")
         widget.add_mark(25.0, Gtk.PositionType.TOP, None)
         widget.set_rounding(0)
         section.add_reveal_row(widget, "org.cinnamon", "panels-resizable", check_func=can_show)
 
         self.show_all()
 
+
 class Module:
     name = "panel"
     category = "prefs"
@@ -75,7 +84,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Panel module"
+            print("Loading Panel module")
 
             self.settings = Gio.Settings.new("org.cinnamon")
 
@@ -84,7 +93,7 @@ class Module:
                     self.panel_id = sys.argv[2]
                 else:
                     self.panel_id = self.settings.get_strv("panels-enabled")[0].split(":")[0]
-            except:
+            except Exception:
                 self.panel_id = ""
 
             self.panels = []
@@ -142,7 +151,7 @@ class Module:
 
         self.on_panel_list_changed()
 
-    def _on_proxy_ready (self, object, result, data=None):
+    def _on_proxy_ready(self, object, result, data=None):
         self.proxy = Gio.DBusProxy.new_for_bus_finish(result)
 
         if not self.proxy.get_name_owner():
@@ -286,10 +295,10 @@ class Module:
 
         self.add_panel_button.set_sensitive(can_add)
 
-        try:
-            current_idx = self.panels.index(self.panel_id)
-        except:
-            current_idx = 0
+        # try:
+        #     current_idx = self.panels.index(self.panel_id)
+        # except Exception:
+        #     current_idx = 0
 
         if self.proxy:
             self.proxy.highlightPanel('(ib)', int(self.panel_id), True)
@@ -299,11 +308,13 @@ class Module:
         if self.panel_id:
             self.proxy.highlightPanel('(ib)', int(self.panel_id), False)
 
+
 class PanelWidgetBackend(object):
+
     def connect_to_settings(self, schema, key):
         self.key = key
         self.settings = Gio.Settings.new(schema)
-        self.settings_changed_id = self.settings.connect("changed::"+self.key, self.on_setting_changed)
+        self.settings_changed_id = self.settings.connect("changed::" + self.key, self.on_setting_changed)
         self.connect("destroy", self.on_destroy)
         self.on_setting_changed()
 
@@ -336,7 +347,9 @@ class PanelWidgetBackend(object):
     def on_destroy(self, *args):
         self.settings.disconnect(self.settings_changed_id)
 
+
 class PanelSwitch(Switch, PanelWidgetBackend):
+
     def __init__(self, label, schema, key, panel_id, *args, **kwargs):
         self.panel_id = panel_id
         super(PanelSwitch, self).__init__(label, *args, **kwargs)
@@ -362,7 +375,9 @@ class PanelSwitch(Switch, PanelWidgetBackend):
         if self.get_value() != active:
             self.set_value(active)
 
+
 class PanelSpinButton(SpinButton, PanelWidgetBackend):
+
     def __init__(self, label, schema, key, panel_id, *args, **kwargs):
         self.panel_id = panel_id
         super(PanelSpinButton, self).__init__(label, *args, **kwargs)
@@ -387,7 +402,9 @@ class PanelSpinButton(SpinButton, PanelWidgetBackend):
         if value != int(self.content_widget.get_value()):
             self.content_widget.set_value(value)
 
+
 class PanelComboBox(ComboBox, PanelWidgetBackend):
+
     def __init__(self, label, schema, key, panel_id, *args, **kwargs):
         self.panel_id = panel_id
         super(PanelComboBox, self).__init__(label, *args, **kwargs)
@@ -400,7 +417,9 @@ class PanelComboBox(ComboBox, PanelWidgetBackend):
     def unstringify(self, value):
         return value
 
+
 class PanelRange(Range, PanelWidgetBackend):
+
     def __init__(self, label, schema, key, panel_id, *args, **kwargs):
         self.panel_id = panel_id
         super(PanelRange, self).__init__(label, *args, **kwargs)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_power.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_power.py
index d03428b..26e9410 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_power.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_power.py
@@ -1,11 +1,18 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
+
 import gi
-gi.require_version('CinnamonDesktop', '3.0')
-gi.require_version('UPowerGlib', '1.0')
+gi.require_version('CinnamonDesktop', '3.0')  # noqa
+gi.require_version('UPowerGlib', '1.0')  # noqa
 from gi.repository import CinnamonDesktop, Gdk, UPowerGlib
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
+
 
 POWER_BUTTON_OPTIONS = [
     ("blank", _("Lock the screen")),
@@ -47,6 +54,7 @@ SLEEP_DELAY_OPTIONS = [
 
 (UP_ID, UP_VENDOR, UP_MODEL, UP_TYPE, UP_ICON, UP_PERCENTAGE, UP_STATE, UP_SECONDS) = range(8)
 
+
 def get_timestring(time_seconds):
     minutes = int((time_seconds / 60.0) + 0.5)
 
@@ -87,6 +95,7 @@ def get_timestring(time_seconds):
 CSD_SCHEMA = "org.cinnamon.settings-daemon.plugins.power"
 CSM_SCHEMA = "org.cinnamon.SessionManager"
 
+
 class Module:
     name = "power"
     category = "hardware"
@@ -100,7 +109,7 @@ class Module:
         if self.loaded:
             # self.loaded = False
             return
-        print "Loading Power module"
+        print("Loading Power module")
 
         self.up_client = UPowerGlib.Client.new()
 
@@ -197,10 +206,10 @@ class Module:
                         output.get_backlight()
                         primary_output = output
                         break
-                    except:
+                    except Exception:
                         pass
-        except Exception, detail:
-            print "Failed to query backlight information in cs_power module: %s" % detail
+        except Exception as detail:
+            print("Failed to query backlight information in cs_power module: %s" % detail)
 
         if primary_output is None:
             if self.show_battery_page:
@@ -222,8 +231,8 @@ class Module:
             None)
 
         try:
-            brightness = proxy.GetPercentage()
-        except:
+            proxy.GetPercentage()
+        except Exception:
             if self.show_battery_page:
                 self.sidePage.add_widget(self.sidePage.stack)
                 self.sidePage.stack.add_titled(power_page, "power", _("Power"))
@@ -258,10 +267,10 @@ class Module:
             try:
                 (device_id, device_nickname) = alias.split(":=")
                 self.aliases[device_id] = device_nickname
-            except:
-                pass # ignore malformed aliases
+            except Exception:
+                pass  # ignore malformed aliases
 
-        #destroy all widgets in this page
+        # destroy all widgets in this page
         for widget in self.battery_page.get_children():
             widget.destroy()
 
@@ -284,7 +293,7 @@ class Module:
 
         for device in devices:
             if device[UP_TYPE] == UPowerGlib.DeviceKind.LINE_POWER:
-                pass # Do nothing
+                pass  # Do nothing
             elif device[UP_TYPE] == UPowerGlib.DeviceKind.UPS and ups_as_primary:
                 if not primary_settings:
                     primary_settings = self.battery_page.add_section(_("Batteries"))
@@ -311,7 +320,7 @@ class Module:
                 else:
                     secondary_settings.add_row(self.add_battery_device_secondary(device))
 
-        #show all the widgets in this page, but not the page itself
+        # show all the widgets in this page, but not the page itself
         visible = self.battery_page.get_visible()
         self.battery_page.show_all()
         self.battery_page.set_visible(visible)
@@ -530,7 +539,7 @@ def get_available_options(up_client):
         can_suspend = proxy.CanSuspend() == "yes"
         can_hibernate = proxy.CanHibernate() == "yes"
         can_hybrid_sleep = proxy.CanHybridSleep() == "yes"
-    except:
+    except Exception:
         pass
 
     # New versions of upower does not have get_can_suspend function
@@ -538,7 +547,7 @@ def get_available_options(up_client):
         can_suspend = can_suspend or up_client.get_can_suspend()
         can_hibernate = can_hibernate or up_client.get_can_hibernate()
         can_hybrid_sleep = can_hibernate or up_client.get_can_hybrid_sleep()
-    except:
+    except Exception:
         pass
 
     def remove(options, item):
@@ -577,6 +586,7 @@ def get_available_options(up_client):
 
     return lid_options, button_power_options, critical_options, can_suspend, can_hybrid_sleep
 
+
 class BrightnessSlider(SettingsWidget):
     step = 5
 
@@ -594,7 +604,7 @@ class BrightnessSlider(SettingsWidget):
         self.label = Gtk.Label.new(_("Screen brightness"))
         self.label.set_halign(Gtk.Align.CENTER)
 
-        self.min_label= Gtk.Label()
+        self.min_label = Gtk.Label()
         self.max_label = Gtk.Label()
         self.min_label.set_alignment(1.0, 0.75)
         self.max_label.set_alignment(1.0, 0.75)
@@ -640,10 +650,12 @@ class BrightnessSlider(SettingsWidget):
         try:
             brightness = self.proxy.GetPercentage()
             self.content_widget.set_value(brightness)
-        except:
+        except Exception:
             self.section.hide()
 
+
 class GSettings2ComboBox(SettingsWidget):
+
     def __init__(self, label, schema, key1, key2, options, valtype="string", dep_key=None, size_group=None):
         super(GSettings2ComboBox, self).__init__(dep_key=dep_key)
 
@@ -658,7 +670,6 @@ class GSettings2ComboBox(SettingsWidget):
         else:
             self.model = Gtk.ListStore(int, str)
 
-        selected = None
         for option in options:
             iter = self.model.insert_before(None, None)
             self.model.set_value(iter, 0, option[0])
@@ -693,19 +704,19 @@ class GSettings2ComboBox(SettingsWidget):
 
     def on_my_value_changed(self, widget):
         tree_iter = widget.get_active_iter()
-        if tree_iter != None:
+        if tree_iter is not None:
             self.settings[widget.key] = self.model[tree_iter][0]
 
     def on_my_setting_changed1(self, *args):
         try:
             self.content_widget1.set_active_iter(self.option_map[self.settings[self.key1]])
-        except:
+        except Exception:
             self.content_widget1.set_active_iter(None)
 
     def on_my_setting_changed2(self, *args):
         try:
             self.content_widget2.set_active_iter(self.option_map[self.settings[self.key2]])
-        except:
+        except Exception:
             self.content_widget2.set_active_iter(None)
 
     def add_to_size_group(self, group):
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_privacy.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_privacy.py
index 32f181a..157c611 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_privacy.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_privacy.py
@@ -1,6 +1,12 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+
+import gettext
+
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 PRIVACY_SCHEMA = "org.cinnamon.desktop.privacy"
 GTK_RECENT_ENABLE_KEY = "remember-recent-files"
@@ -20,7 +26,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Privacy module"
+            print("Loading Privacy module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
@@ -63,7 +69,7 @@ class Module:
             else:
                 self.indefinite_switch.content_widget.set_active(False)
                 self.revealer.set_reveal_child(True)
-                if start_age == 0: # Shouldn't happen, unless someone manually sets the value
+                if start_age == 0:  # Shouldn't happen, unless someone manually sets the value
                     self.settings.set_int(GTK_RECENT_MAX_AGE, 30)
                 self.bind_spinner()
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_screensaver.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_screensaver.py
index 18b5560..c9065f5 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_screensaver.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_screensaver.py
@@ -1,15 +1,23 @@
 #!/usr/bin/python2
 
-import os, json, subprocess, re
+from __future__ import print_function
+
+import os
+import json
+import subprocess
+import re
+
 from xml.etree import ElementTree
 import gettext
 import signal
 
 import gi
-gi.require_version('Gtk', '3.0')
+gi.require_version('Gtk', '3.0')  # noqa
 from gi.repository import Gtk, Gdk, GLib, Pango
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 LOCK_DELAY_OPTIONS = [
     (0, _("Lock immediately")),
@@ -42,6 +50,7 @@ def list_header_func(row, before, user_data):
     if before and not row.get_header():
         row.set_header(Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL))
 
+
 class Module:
     name = "screensaver"
     category = "prefs"
@@ -59,7 +68,7 @@ class Module:
         if self.loaded:
             return
 
-        print "Loading Screensaver module"
+        print("Loading Screensaver module")
 
         schema = "org.cinnamon.desktop.screensaver"
         self.settings = Gio.Settings.new(schema)
@@ -168,7 +177,9 @@ class Module:
         widget.set_tooltip_text(_("When the default screensaver is active, allow the clock and album art widgets to float around randomly"))
         settings.add_row(widget)
 
+
 class ScreensaverBox(Gtk.Box):
+
     def __init__(self, title):
         Gtk.Box.__init__(self)
         self.set_orientation(Gtk.Orientation.VERTICAL)
@@ -303,7 +314,7 @@ class ScreensaverBox(Gtk.Box):
 
                     path = os.path.join(XSCREENSAVER_PATH, item)
                     try:
-                        tree = ElementTree.parse(path);
+                        tree = ElementTree.parse(path)
                         root = tree.getroot()
 
                         name = root.attrib["name"]
@@ -313,8 +324,8 @@ class ScreensaverBox(Gtk.Box):
                         description = _(description)
                         row = ScreensaverRow(name, label, description, XSCREENSAVER_PATH, "xscreensaver")
                         xscreensavers.append(row)
-                    except Exception, detail:
-                        print "Unable to parse xscreensaver information at %s: %s" % (path, detail)
+                    except Exception as detail:
+                        print("Unable to parse xscreensaver information at %s: %s" % (path, detail))
 
                 xscreensavers = sorted(xscreensavers, key=lambda x: x.name)
                 for xscreensaver in xscreensavers:
@@ -322,8 +333,8 @@ class ScreensaverBox(Gtk.Box):
                     if self.current_name == "xscreensaver-" + xscreensaver.uuid:
                         self.list_box.select_row(xscreensaver)
                 gettext.install("cinnamon", "/usr/share/locale")
-            except Exception, detail:
-                print "Unable to parse xscreensaver hacks: %s" % detail
+            except Exception as detail:
+                print("Unable to parse xscreensaver hacks: %s" % detail)
 
     def parse_dir(self, path, directory, ss_type):
         try:
@@ -347,8 +358,8 @@ class ScreensaverBox(Gtk.Box):
 
             if self.current_name == uuid:
                 self.list_box.select_row(row)
-        except:
-            print "Unable to parse screensaver information at %s" % path
+        except Exception:
+            print("Unable to parse screensaver information at %s" % path)
 
     def kill_plug(self):
         if not self.proc:
@@ -401,7 +412,7 @@ class ScreensaverBox(Gtk.Box):
         try:
             self.proc = Gio.Subprocess.new(command, Gio.SubprocessFlags.STDOUT_PIPE | Gio.SubprocessFlags.STDERR_SILENCE)
         except GLib.Error as e:
-            print e.message
+            print(e.message)
 
         pipe = self.proc.get_stdout_pipe()
         bytes_read = pipe.read_bytes(1024, None)
@@ -432,7 +443,9 @@ class ScreensaverBox(Gtk.Box):
     def add_row(self, row):
         self.list_box.add(row)
 
+
 class ScreensaverRow(Gtk.ListBoxRow):
+
     def __init__(self, uuid, name, description, path, ss_type):
         Gtk.ListBoxRow.__init__(self)
         self.uuid = uuid
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_sound.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_sound.py
index 5e804ce..a59ca27 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_sound.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_sound.py
@@ -1,12 +1,17 @@
 #!/usr/bin/python3
 
+from __future__ import print_function
+
+import gettext
 import gi
-gi.require_version('Cvc', '1.0')
-gi.require_version('Gtk', '3.0')
-from gi.repository import GLib, Gtk, Gdk, Cvc, GdkPixbuf, Gio
-from GSettingsWidgets import *
+gi.require_version('Cvc', '1.0')  # noqa
+gi.require_version('Gtk', '3.0')  # noqa
+from gi.repository import Gtk, Cvc, GdkPixbuf, Gio
+from GSettingsWidgets import *  # noqa
 import dbus
 
+_ = gettext.gettext
+
 CINNAMON_SOUNDS = "org.cinnamon.sounds"
 CINNAMON_DESKTOP_SOUNDS = "org.cinnamon.desktop.sound"
 DECAY_STEP = .15
@@ -24,7 +29,7 @@ EFFECT_LIST = [
     {"label": _("Inserting a device"),          "schema": CINNAMON_SOUNDS,         "file": "plug-file",         "enabled": "plug-enabled"},
     {"label": _("Removing a device"),           "schema": CINNAMON_SOUNDS,         "file": "unplug-file",       "enabled": "unplug-enabled"},
     {"label": _("Showing notifications"),       "schema": CINNAMON_SOUNDS,         "file": "notification-file", "enabled": "notification-enabled"},
-    {"label": _("Changing the sound volume"),   "schema": CINNAMON_DESKTOP_SOUNDS, "file": "volume-sound-file", "enabled": "volume-sound-enabled"}
+    {"label": _("Changing the sound volume"),   "schema": CINNAMON_DESKTOP_SOUNDS, "file": "volume-sound-file", "enabled": "volume-sound-enabled"},
 ]
 
 SOUND_TEST_MAP = [
@@ -37,14 +42,17 @@ SOUND_TEST_MAP = [
     [_("Rear Center"),   "rear-center",   "audio-speaker-center-back",  2,   1,      4],
     [_("Subwoofer"),     "lfe",           "audio-subwoofer",            1,   1,      7],
     [_("Side Left"),     "side-left",     "audio-speaker-left-side",    1,   0,      10],
-    [_("Side Right"),    "side-right",    "audio-speaker-right-side",   1,   2,      11]
+    [_("Side Right"),    "side-right",    "audio-speaker-right-side",   1,   2,      11],
 ]
 
+
 def list_header_func(row, before, user_data):
     if before and not row.get_header():
         row.set_header(Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL))
 
+
 class SoundBox(Gtk.Box):
+
     def __init__(self, title):
         Gtk.Box.__init__(self)
         self.set_orientation(Gtk.Orientation.VERTICAL)
@@ -92,19 +100,21 @@ class SoundBox(Gtk.Box):
     def add_row(self, row):
         self.list_box.add(row)
 
+
 class Slider(SettingsWidget):
+
     def __init__(self, title, minLabel, maxLabel, minValue, maxValue, sizeGroup, step=None, page=None, value=0, gicon=None, iconName=None):
         super(Slider, self).__init__()
         self.set_orientation(Gtk.Orientation.VERTICAL)
         self.set_spacing(5)
         self.set_margin_bottom(5)
 
-        if sizeGroup == None:
+        if sizeGroup is None:
             sizeGroup = Gtk.SizeGroup.new(Gtk.SizeGroupMode.HORIZONTAL)
 
-        if step == None:
+        if step is None:
             step = (maxValue - minValue) / 100
-        if page == None:
+        if page is None:
             page = (maxValue - minValue) / 10
         self.adjustment = Gtk.Adjustment.new(value, minValue, maxValue, step, page, 0)
 
@@ -117,10 +127,10 @@ class Slider(SettingsWidget):
 
         # add label and icon (if specified)
         labelBox = Gtk.Box(spacing=5)
-        if gicon != None:
+        if gicon is not None:
             appIcon = Gtk.Image.new_from_gicon(gicon, 2)
             labelBox.pack_start(appIcon, False, False, 0)
-        elif iconName != None:
+        elif iconName is not None:
             appIcon = Gtk.Image.new_from_icon_name(iconName, 2)
             labelBox.pack_start(appIcon, False, False, 0)
         self.label = Gtk.Label(title)
@@ -136,7 +146,7 @@ class Slider(SettingsWidget):
         self.slider = Gtk.Scale.new(Gtk.Orientation.HORIZONTAL, self.adjustment)
         self.slider.props.draw_value = False
 
-        min_label= Gtk.Label()
+        min_label = Gtk.Label()
         max_label = Gtk.Label()
         min_label.set_alignment(1.0, 0.75)
         max_label.set_alignment(0.0, 0.75)
@@ -158,11 +168,13 @@ class Slider(SettingsWidget):
     def setMark(self, val):
         self.slider.add_mark(val, Gtk.PositionType.TOP, "")
 
+
 class VolumeBar(Slider):
+
     def __init__(self, normVolume, maxVolume, title=_("Volume: "), gicon=None, sizeGroup=None):
         self.normVolume = normVolume
         self.maxVolume = maxVolume
-        self.maxPercent = 100*maxVolume/normVolume
+        self.maxPercent = 100 * maxVolume / normVolume
         self.volume = 0
         self.isMuted = False
         self.baseTitle = title
@@ -273,8 +285,10 @@ class VolumeBar(Slider):
             self.label.set_label(self.baseTitle + str(self.volume) + "%")
             self.muteSwitch.set_tooltip_text(_("Click to mute"))
 
+
 class BalanceBar(Slider):
-    def __init__(self, type, minVal = -1, norm = 1, sizeGroup=None):
+
+    def __init__(self, type, minVal=-1, norm=1, sizeGroup=None):
         self.type = type
         self.norm = norm
         self.value = 0
@@ -292,7 +306,7 @@ class BalanceBar(Slider):
             minLabel = _("Soft")
             maxLabel = _("Loud")
 
-        super(BalanceBar, self).__init__(title, minLabel, maxLabel, minVal, 1, sizeGroup, (1-minVal)/20.)
+        super(BalanceBar, self).__init__(title, minLabel, maxLabel, minVal, 1, sizeGroup, (1 - minVal) / 20.)
 
         self.setMark(0)
         self.slider.props.has_origin = False
@@ -302,11 +316,11 @@ class BalanceBar(Slider):
     def setChannelMap(self, channelMap):
         self.channelMap = channelMap
         self.channelMap.connect("volume-changed", self.getLevel)
-        self.set_sensitive(getattr(self.channelMap, "can_"+self.type)())
+        self.set_sensitive(getattr(self.channelMap, "can_" + self.type)())
         self.getLevel()
 
     def getLevel(self, a=None, b=None):
-        value = round(getattr(self.channelMap, "get_"+self.type)(), 3)
+        value = round(getattr(self.channelMap, "get_" + self.type)(), 3)
         if self.type == "lfe":
             value = value / self.norm
         if value == self.value:
@@ -321,9 +335,11 @@ class BalanceBar(Slider):
         self.value = value
         if self.type == "lfe":
             value = value * self.norm
-        getattr(self.channelMap, "set_"+self.type)(value)
+        getattr(self.channelMap, "set_" + self.type)(value)
+
 
 class VolumeLevelBar(SettingsWidget):
+
     def __init__(self, sizeGroup):
         super(VolumeLevelBar, self).__init__()
         self.set_orientation(Gtk.Orientation.VERTICAL)
@@ -352,7 +368,7 @@ class VolumeLevelBar(SettingsWidget):
         self.levelBar.set_min_value(0)
 
     def setStream(self, stream):
-        if self.stream != None:
+        if self.stream is not None:
             self.stream.remove_monitor()
             self.stream.disconnect(self.monitorId)
         self.stream = stream
@@ -366,7 +382,9 @@ class VolumeLevelBar(SettingsWidget):
 
         self.levelBar.set_value(value)
 
+
 class ProfileSelector(SettingsWidget):
+
     def __init__(self, controller):
         super(ProfileSelector, self).__init__()
         self.controller = controller
@@ -400,14 +418,16 @@ class ProfileSelector(SettingsWidget):
 
     def onProfileSelect(self, a):
         newProfile = self.combo.get_active_id()
-        if newProfile != self.profile and newProfile != None:
+        if newProfile != self.profile and newProfile is not None:
             self.profile = newProfile
             self.controller.change_profile_on_selected_device(self.device, newProfile)
 
     def testSpeakers(self, a):
         SoundTest(a.get_toplevel(), self.controller.get_default_sink())
 
+
 class Effect(GSettingsSoundFileChooser):
+
     def __init__(self, info, sizeGroup):
         super(Effect, self).__init__(info["label"], info["schema"], info["file"])
 
@@ -422,7 +442,9 @@ class Effect(GSettingsSoundFileChooser):
         self.settings.bind(self.enabled_key, self.enabled_switch, "active", Gio.SettingsBindFlags.DEFAULT)
         self.settings.bind(self.enabled_key, self.content_widget, "sensitive", Gio.SettingsBindFlags.DEFAULT)
 
+
 class SoundTest(Gtk.Dialog):
+
     def __init__(self, parent, stream):
         Gtk.Dialog.__init__(self, _("Test Sound"), parent)
 
@@ -449,7 +471,7 @@ class SoundTest(Gtk.Dialog):
             box.pack_start(icon, False, False, 0)
             box.pack_start(Gtk.Label(position[0]), False, False, 0)
 
-            info = {"index":index, "icon":icon, "button":button}
+            info = {"index": index, "icon": icon, "button": button}
 
             button.connect("clicked", self.test, info)
             container.add(button)
@@ -478,7 +500,7 @@ class SoundTest(Gtk.Dialog):
         if position[1] == "lfe":
             sound = "audio-test-signal"
         else:
-            sound = "audio-channel-"+position[1]
+            sound = "audio-channel-" + position[1]
 
         session_bus = dbus.SessionBus()
         sound_dbus = session_bus.get_object("org.cinnamon.SettingsDaemon.Sound", "/org/cinnamon/SettingsDaemon/Sound")
@@ -494,6 +516,7 @@ class SoundTest(Gtk.Dialog):
             else:
                 position["button"].hide()
 
+
 class Module:
     name = "sound"
     category = "hardware"
@@ -505,19 +528,19 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Sound module"
+            print("Loading Sound module")
 
-            self.outputDeviceList = Gtk.ListStore(str, # name
-                                                  str, # device
-                                                  bool, # active
-                                                  int, # id
-                                                  GdkPixbuf.Pixbuf) # icon
+            self.outputDeviceList = Gtk.ListStore(str,  # name
+                                                  str,  # device
+                                                  bool,  # active
+                                                  int,  # id
+                                                  GdkPixbuf.Pixbuf)  # icon
 
-            self.inputDeviceList = Gtk.ListStore(str, # name
-                                                 str, # device
-                                                 bool, # active
-                                                 int, # id
-                                                 GdkPixbuf.Pixbuf) # icon
+            self.inputDeviceList = Gtk.ListStore(str,  # name
+                                                 str,  # device
+                                                 bool,  # active
+                                                 int,  # id
+                                                 GdkPixbuf.Pixbuf)  # icon
 
             self.appList = {}
 
@@ -531,7 +554,7 @@ class Module:
         self.sidePage.stack = SettingsStack()
         self.sidePage.add_widget(self.sidePage.stack)
 
-        ## Output page
+        # Output page
         page = SettingsPage()
         self.sidePage.stack.add_titled(page, "output", _("Output"))
 
@@ -559,7 +582,7 @@ class Module:
         self.woofer = BalanceBar("lfe", 0, self.controller.get_vol_max_norm(), sizeGroup=sizeGroup)
         devSettings.add_row(self.woofer)
 
-        ## Input page
+        # Input page
         page = SettingsPage()
         self.sidePage.stack.add_titled(page, "input", _("Input"))
 
@@ -598,7 +621,7 @@ class Module:
         self.inputStack.add_named(noInputsMessage, "noInputsMessage")
         self.inputStack.show_all()
 
-        ## Effects page
+        # Effects page
         page = SettingsPage()
         self.sidePage.stack.add_titled(page, "effects", _("Sound Effects"))
 
@@ -612,7 +635,7 @@ class Module:
         for effect in EFFECT_LIST:
             effectsSection.add_row(Effect(effect, sizeGroup))
 
-        ## Applications page
+        # Applications page
         page = SettingsPage()
         self.sidePage.stack.add_titled(page, "applications", _("Applications"))
 
@@ -636,7 +659,7 @@ class Module:
         self.appStack.add_named(noAppsMessage, "noAppsMessage")
 
     def inializeController(self):
-        self.controller = Cvc.MixerControl(name = "cinnamon")
+        self.controller = Cvc.MixerControl(name="cinnamon")
         self.controller.connect("state-changed", self.setChannelMap)
         self.controller.connect("output-added", self.deviceAdded, "output")
         self.controller.connect("input-added", self.deviceAdded, "input")
@@ -668,13 +691,13 @@ class Module:
 
         model = view.get_model()
         newDevice = model.get_value(model.get_iter(selected[0]), 3)
-        id = getattr(self.controller, "lookup_"+type+"_id")(newDevice)
-        if id != None and id != getattr(self, type+"Id"):
-            getattr(self.controller, "change_"+type)(id)
+        id = getattr(self.controller, "lookup_" + type + "_id")(newDevice)
+        if id is not None and id != getattr(self, type + "Id"):
+            getattr(self.controller, "change_" + type)(id)
             self.profile.setDevice(id)
 
     def deviceAdded(self, c, id, type):
-        device = getattr(self.controller, "lookup_"+type+"_id")(id)
+        device = getattr(self.controller, "lookup_" + type + "_id")(id)
 
         iconTheme = Gtk.IconTheme.get_default()
         gicon = device.get_gicon()
@@ -691,13 +714,13 @@ class Module:
             else:
                 icon = iconTheme.load_icon("audio-card", 32, 0)
 
-        getattr(self, type+"DeviceList").append([device.get_description() + "\n" +  device.get_origin(), "", False, id, icon])
+        getattr(self, type + "DeviceList").append([device.get_description() + "\n" + device.get_origin(), "", False, id, icon])
 
         if type == "input":
             self.checkInputState()
 
     def deviceRemoved(self, c, id, type):
-        store = getattr(self, type+"DeviceList")
+        store = getattr(self, type + "DeviceList")
         for row in store:
             if row[3] == id:
                 store.remove(row.iter)
@@ -738,14 +761,14 @@ class Module:
 
     def defaultSinkChanged(self, c, id):
         defaultSink = self.controller.get_default_sink()
-        if defaultSink == None:
+        if defaultSink is None:
             return
         self.outVolume.setStream(defaultSink)
         self.setChannelMap()
 
     def defaultSourceChanged(self, c, id):
         defaultSource = self.controller.get_default_source()
-        if defaultSource == None:
+        if defaultSource is None:
             return
         self.inVolume.setStream(defaultSource)
         self.inLevel.setStream(defaultSource)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_startup.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_startup.py
index d39edaf..bd78b86 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_startup.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_startup.py
@@ -1,27 +1,34 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
 import os
 import glob
 import shutil
 
 import gi
-gi.require_version('Gtk', '3.0')
-from gi.repository import Gio, Gtk, GObject, Gdk, GdkPixbuf, GLib, Pango
+gi.require_version('Gtk', '3.0')  # noqa
+from gi.repository import Gio, Gtk, Gdk, GdkPixbuf, GLib, Pango
+
+from GSettingsWidgets import *  # noqa
 
-from GSettingsWidgets import *
+_ = gettext.gettext
 
 try:
     ENVIRON = os.environ['XDG_CURRENT_DESKTOP']
-except:
+except Exception:
     ENVIRON = ""
 D_GROUP = "Desktop Entry"
 DEFAULT_ICON = "system-run"
 AUTOSTART_APPS = []
 
+
 def list_header_func(row, before, user_data):
     if before and not row.get_header():
         row.set_header(Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL))
 
+
 class Module:
     name = "startup"
     comment = _("Manage your startup applications")
@@ -34,7 +41,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Startup Applications module"
+            print("Loading Startup Applications module")
 
             page = SettingsPage()
             page.expand = True
@@ -57,8 +64,8 @@ class Module:
         if not os.path.isdir(user_autostart_dir):
             try:
                 os.makedirs(user_autostart_dir)
-            except:
-                print "Could not create autostart dir: %s" % user_autostart_dir
+            except Exception:
+                print("Could not create autostart dir: %s" % user_autostart_dir)
 
     def gather_apps(self):
         system_files = []
@@ -81,7 +88,9 @@ class Module:
             if not found:
                 AUTOSTART_APPS.append(AutostartApp(sys_app, system_position=os.path.dirname(sys_app)))
 
+
 class AutostartApp():
+
     def __init__(self, app, user_position=None, system_position=None):
         self.app = app
         self.user_position = user_position
@@ -99,7 +108,7 @@ class AutostartApp():
         try:
             self.key_file.load_from_file(self.app, GLib.KeyFileFlags.KEEP_COMMENTS and GLib.KeyFileFlags.KEEP_TRANSLATIONS)
         except GLib.GError:
-            print "Failed to load %s" % self.app
+            print("Failed to load %s" % self.app)
             return
 
         self.key_file_loaded = True
@@ -120,7 +129,7 @@ class AutostartApp():
     def get_string(self, key_file, key, default_value=None):
         try:
             retval = key_file.get_string(D_GROUP, key)
-        except:
+        except Exception:
             retval = default_value
 
         return retval
@@ -128,7 +137,7 @@ class AutostartApp():
     def get_locale_string(self, key_file, key, default_value=None):
         try:
             retval = key_file.get_locale_string(D_GROUP, key, None)
-        except:
+        except Exception:
             retval = default_value
 
         return retval
@@ -136,7 +145,7 @@ class AutostartApp():
     def get_boolean(self, key_file, key, default_value):
         try:
             retval = key_file.get_boolean(D_GROUP, key)
-        except:
+        except Exception:
             retval = default_value
 
         return retval
@@ -144,7 +153,7 @@ class AutostartApp():
     def get_shown(self, key_file):
         try:
             only_show_in = key_file.get_string_list(D_GROUP, GLib.KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN)
-        except:
+        except Exception:
             only_show_in = False
 
         if only_show_in:
@@ -158,7 +167,7 @@ class AutostartApp():
 
         try:
             not_show_in = key_file.get_string_list(D_GROUP, GLib.KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN)
-        except:
+        except Exception:
             not_show_in = False
 
         if not_show_in:
@@ -195,7 +204,7 @@ class AutostartApp():
 
         try:
             key_file.load_from_file(use_path, GLib.KeyFileFlags.KEEP_COMMENTS and GLib.KeyFileFlags.KEEP_TRANSLATIONS)
-        except:
+        except Exception:
             key_file.set_string(D_GROUP, GLib.KEY_FILE_DESKTOP_KEY_TYPE, "Application")
             key_file.set_string(D_GROUP, GLib.KEY_FILE_DESKTOP_KEY_EXEC, "/bin/false")
 
@@ -236,7 +245,7 @@ class AutostartApp():
         return False
 
     def queue_save(self):
-        if self.user_position == None:
+        if self.user_position is None:
             self.user_position = os.path.join(GLib.get_user_config_dir(), "autostart")
             self.path = os.path.join(self.user_position, self.basename)
 
@@ -335,7 +344,9 @@ class AutostartApp():
 
         return current_locale
 
+
 class SaveMask():
+
     def __init__(self):
         self.contents = []
         self.all = ["enabled", "no-display", "hidden", "name", "comment", "command", "delay"]
@@ -350,7 +361,9 @@ class SaveMask():
         for item in self.contents:
             self.contents.remove(item)
 
+
 class AutostartBox(Gtk.Box):
+
     def __init__(self, title):
         Gtk.Box.__init__(self)
         self.set_orientation(Gtk.Orientation.VERTICAL)
@@ -461,7 +474,7 @@ class AutostartBox(Gtk.Box):
         self.on_edit_button_clicked(list_box)
 
     def on_run_button_clicked(self, button):
-        if self.infobar_holder.get_child() != None:
+        if self.infobar_holder.get_child() is not None:
             self.infobar_holder.get_child().destroy()
 
         row = self.list_box.get_selected_row()
@@ -570,7 +583,7 @@ class AutostartBox(Gtk.Box):
             try:
                 shutil.copyfile(desktop_file_dir, user_desktop_file)
             except IOError:
-                print "Failed to copy desktop file %s" % desktop_file_name
+                print("Failed to copy desktop file %s" % desktop_file_name)
 
             app = AutostartApp(user_desktop_file, user_position=os.path.dirname(user_desktop_file))
 
@@ -616,7 +629,7 @@ class AutostartBox(Gtk.Box):
 
         return None
 
-    def popup_menu_below_button (self, *args):
+    def popup_menu_below_button(self, *args):
         # the introspection for GtkMenuPositionFunc seems to change with each Gtk version,
         # this is a workaround to make sure we get the menu and the widget
         menu = args[0]
@@ -633,7 +646,9 @@ class AutostartBox(Gtk.Box):
         push_in = True
         return (x, y, push_in)
 
+
 class AutostartRow(Gtk.ListBoxRow):
+
     def __init__(self, app):
         Gtk.ListBoxRow.__init__(self)
         self.app = app
@@ -654,7 +669,7 @@ class AutostartRow(Gtk.ListBoxRow):
                 else:
                     pixbuf = icon_theme.load_icon(self.app.icon, 24, Gtk.IconLookupFlags.FORCE_SIZE)
                     img = Gtk.Image.new_from_pixbuf(pixbuf)
-            except:
+            except Exception:
                 img = Gtk.Image.new_from_gicon(Gio.ThemedIcon.new(DEFAULT_ICON), Gtk.IconSize.LARGE_TOOLBAR)
         else:
             img = Gtk.Image.new_from_gicon(Gio.ThemedIcon.new(DEFAULT_ICON), Gtk.IconSize.LARGE_TOOLBAR)
@@ -725,7 +740,9 @@ class AutostartRow(Gtk.ListBoxRow):
             self.desc_box.set_sensitive(False)
             self.delay_box.set_sensitive(False)
 
+
 class AppDialog(Gtk.Dialog):
+
     def __init__(self, app=None):
         super(AppDialog, self).__init__()
         self.app = app
@@ -866,7 +883,9 @@ class AppDialog(Gtk.Dialog):
 
         chooser.destroy()
 
+
 class AppChooserDialog(Gtk.Dialog):
+
     def __init__(self):
         Gtk.Dialog.__init__(self, title=_("Applications"))
 
@@ -914,7 +933,7 @@ class AppChooserDialog(Gtk.Dialog):
         self.get_content_area().set_border_width(6)
         self.get_content_area().pack_start(frame, True, True, 0)
         self.set_modal(True)
-        self.set_size_request(400,300)
+        self.set_size_request(400, 300)
 
         self.list_box = list_box
 
@@ -951,7 +970,7 @@ class AppChooserDialog(Gtk.Dialog):
                 else:
                     pixbuf = icon_theme.load_icon(icon.to_string(), 24, Gtk.IconLookupFlags.FORCE_SIZE)
                     img = Gtk.Image.new_from_pixbuf(pixbuf)
-            except:
+            except Exception:
                 img = Gtk.Image.new_from_gicon(Gio.ThemedIcon.new(DEFAULT_ICON), Gtk.IconSize.LARGE_TOOLBAR)
         else:
             img = Gtk.Image.new_from_gicon(Gio.ThemedIcon.new(DEFAULT_ICON), Gtk.IconSize.LARGE_TOOLBAR)
@@ -992,8 +1011,8 @@ class AppChooserDialog(Gtk.Dialog):
             if not self.entry.is_focus() and self.search_bar.get_search_mode():
                 if self.entry.im_context_filter_keypress(event):
                     self.entry.grab_focus()
-                    l = self.entry.get_text_length()
-                    self.entry.select_region(l, l)
+                    text_length = self.entry.get_text_length()
+                    self.entry.select_region(text_length, text_length)
                     return True
             return self.search_bar.handle_event(event)
 
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_themes.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_themes.py
index f0a8fee..91543f5 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_themes.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_themes.py
@@ -1,14 +1,18 @@
 #!/usr/bin/python2
 
-from gi.repository.Gtk import SizeGroup, SizeGroupMode
+from __future__ import print_function
 
-from GSettingsWidgets import *
+import gettext
+
+from GSettingsWidgets import *  # noqa
 from CinnamonGtkSettings import GtkSettingsSwitch
 from ExtensionCore import DownloadSpicesPage
 from Spices import Spice_Harvester
 
 import glob
 
+_ = gettext.gettext
+
 ICON_SIZE = 48
 
 
@@ -26,7 +30,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Themes module"
+            print("Loading Themes module")
 
             self.spices = Spice_Harvester('theme', self.window)
 
@@ -139,7 +143,7 @@ class Module:
                 if folder:
                     path = folder.get_filename()
                     chooser.add_picture(path, callback, title=theme, id=theme)
-                GLib.timeout_add(5, self.increment_progress, (chooser,inc))
+                GLib.timeout_add(5, self.increment_progress, (chooser, inc))
         else:
             if path_suffix == "cinnamon":
                 chooser.add_picture("/usr/share/cinnamon/theme/thumbnail.png", callback, title="cinnamon", id="cinnamon")
@@ -153,7 +157,7 @@ class Module:
                         if os.path.exists(path):
                             chooser.add_picture(path, callback, title=theme_name, id=theme_name)
                             break
-                except:
+                except Exception:
                     chooser.add_picture("/usr/share/cinnamon/thumbnails/%s/unknown.png" % path_suffix, callback, title=theme_name, id=theme_name)
                 GLib.timeout_add(5, self.increment_progress, (chooser, inc))
         GLib.timeout_add(500, self.hide_progress, chooser)
@@ -205,7 +209,7 @@ class Module:
                     if os.path.exists(path):
                         chooser.set_picture_from_file(path)
                         break
-            except:
+            except Exception:
                 chooser.set_picture_from_file("/usr/share/cinnamon/thumbnails/%s/unknown.png" % path_suffix)
         return chooser
 
@@ -214,8 +218,8 @@ class Module:
             self.settings.set_string("icon-theme", theme)
             self.icon_chooser.set_button_label(theme)
             self.icon_chooser.set_tooltip_text(theme)
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
         return True
 
     def _on_metacity_theme_selected(self, path, theme):
@@ -223,8 +227,8 @@ class Module:
             self.wm_settings.set_string("theme", theme)
             self.metacity_chooser.set_button_label(theme)
             self.metacity_chooser.set_tooltip_text(theme)
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
         return True
 
     def _on_gtk_theme_selected(self, path, theme):
@@ -232,8 +236,8 @@ class Module:
             self.settings.set_string("gtk-theme", theme)
             self.theme_chooser.set_button_label(theme)
             self.theme_chooser.set_tooltip_text(theme)
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
         return True
 
     def _on_cursor_theme_selected(self, path, theme):
@@ -241,8 +245,8 @@ class Module:
             self.settings.set_string("cursor-theme", theme)
             self.cursor_chooser.set_button_label(theme)
             self.cursor_chooser.set_tooltip_text(theme)
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
 
         self.update_cursor_theme_link(path, theme)
         return True
@@ -252,15 +256,15 @@ class Module:
             self.cinnamon_settings.set_string("name", theme)
             self.cinnamon_chooser.set_button_label(theme)
             self.cinnamon_chooser.set_tooltip_text(theme)
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
         return True
 
     def _load_gtk_themes(self):
         """ Only shows themes that have variations for gtk+-3 and gtk+-2 """
         dirs = ("/usr/share/themes", os.path.join(os.path.expanduser("~"), ".themes"))
         valid = walk_directories(dirs, self.filter_func_gtk_dir, return_directories=True)
-        valid.sort(lambda a,b: cmp(a[0].lower(), b[0].lower()))
+        valid.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
         res = []
         for i in valid:
             for j in res:
@@ -297,7 +301,7 @@ class Module:
                 except Exception as e:
                     print (e)
 
-        valid.sort(lambda a,b: cmp(a[0].lower(), b[0].lower()))
+        valid.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
         res = []
         for i in valid:
             for j in res:
@@ -312,7 +316,7 @@ class Module:
     def _load_cursor_themes(self):
         dirs = ("/usr/share/icons", os.path.join(os.path.expanduser("~"), ".icons"))
         valid = walk_directories(dirs, lambda d: os.path.isdir(d) and os.path.exists(os.path.join(d, "cursors")), return_directories=True)
-        valid.sort(lambda a,b: cmp(a[0].lower(), b[0].lower()))
+        valid.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
         res = []
         for i in valid:
             for j in res:
@@ -327,7 +331,7 @@ class Module:
     def _load_metacity_themes(self):
         dirs = ("/usr/share/themes", os.path.join(os.path.expanduser("~"), ".themes"))
         valid = walk_directories(dirs, lambda d: os.path.exists(os.path.join(d, "metacity-1")), return_directories=True)
-        valid.sort(lambda a,b: cmp(a[0].lower(), b[0].lower()))
+        valid.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
         res = [('Default', '/usr/share/muffin/theme')]
         for i in valid:
             for j in res:
@@ -342,7 +346,7 @@ class Module:
     def _load_cinnamon_themes(self):
         dirs = ("/usr/share/themes", os.path.join(os.path.expanduser("~"), ".themes"))
         valid = walk_directories(dirs, lambda d: os.path.exists(os.path.join(d, "cinnamon")), return_directories=True)
-        valid.sort(lambda a,b: cmp(a[0].lower(), b[0].lower()))
+        valid.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
         res = []
         for i in valid:
             for j in res:
@@ -360,7 +364,7 @@ class Module:
 
         try:
             os.makedirs(default_dir)
-        except os.error as e:
+        except os.error:
             pass
 
         if os.path.exists(index_path):
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_tiling.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_tiling.py
index 0ab035b..a5e78d9 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_tiling.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_tiling.py
@@ -1,6 +1,12 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+
+import gettext
+
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Module:
@@ -15,7 +21,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Tiling module"
+            print("Loading Tiling module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
@@ -29,7 +35,7 @@ class Module:
 
             settings.add_row(GSettingsSpinButton(_("Tiling HUD visibility threshold"), "org.cinnamon.muffin", "tile-hud-threshold", _("Pixels")))
 
-            modifiers = [["", _("Disabled")],["Super", _("Super (Windows)")],["Alt", _("Alt")],["Shift", _("Shift")],["Control", _("Control")]]
+            modifiers = [["", _("Disabled")], ["Super", _("Super (Windows)")], ["Alt", _("Alt")], ["Shift", _("Shift")], ["Control", _("Control")]]
             settings.add_row(GSettingsComboBox(_("Modifier to use for toggling between tile and snap mode"), "org.cinnamon.muffin", "snap-modifier", modifiers))
 
             settings.add_row(GSettingsSwitch(_("Maximize, instead of tile, when dragging a window to the top edge"), "org.cinnamon.muffin", "tile-maximize"))
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_user.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_user.py
index 8e4dcee..6754e7c 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_user.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_user.py
@@ -1,8 +1,11 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
 try:
     import PAM
-except:
+except Exception:
     import pam as PAM
 import pexpect
 import time
@@ -13,10 +16,12 @@ import subprocess
 
 import PIL
 import gi
-gi.require_version('AccountsService', '1.0')
+gi.require_version('AccountsService', '1.0')  # noqa
 from gi.repository import AccountsService, GLib
 
-from GSettingsWidgets import *
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Module:
@@ -31,7 +36,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading User module"
+            print("Loading User module")
 
             page = SettingsPage()
             self.sidePage.add_widget(page)
@@ -104,7 +109,7 @@ class Module:
 
             self.face_button.add_menuitem(self.face_browse_menuitem)
 
-    def update_preview_cb (self, dialog, preview):
+    def update_preview_cb(self, dialog, preview):
         filename = dialog.get_preview_filename()
         if filename is not None:
             if os.path.isfile(filename):
@@ -124,7 +129,7 @@ class Module:
 
         # streamer takes -t photos, uses /dev/video0
         if 0 != subprocess.call(["streamer", "-j90", "-t8", "-s800x600", "-o", "/tmp/temp-account-pic00.jpeg"]):
-            print "Error: Webcam not available"
+            print("Error: Webcam not available")
             return
 
         # Use the 8th frame (the webcam takes a few frames to "lighten up")
@@ -158,7 +163,6 @@ class Module:
         self.accountService.set_icon_file(face_path)
         self.face_button.set_picture_from_file(face_path)
 
-
     def _on_face_browse_menuitem_activated(self, menuitem):
         dialog = Gtk.FileChooserDialog(None, None, Gtk.FileChooserAction.OPEN, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
         dialog.set_current_folder(self.accountService.get_home_dir())
@@ -213,15 +217,15 @@ class Module:
 
     def _on_password_button_clicked(self, widget):
         dialog = PasswordDialog()
-        response = dialog.run()
+        dialog.run()
 
 
 class PasswordDialog(Gtk.Dialog):
 
-    def __init__ (self):
+    def __init__(self):
         super(PasswordDialog, self).__init__()
 
-        self.correct_current_password = False # Flag to remember if the current password is correct or not
+        self.correct_current_password = False  # Flag to remember if the current password is correct or not
 
         self.set_modal(True)
         self.set_skip_taskbar_hint(True)
@@ -260,7 +264,7 @@ class PasswordDialog(Gtk.Dialog):
         self.strengh_indicator = Gtk.ProgressBar()
         self.strengh_indicator.set_tooltip_text(_("Your new password needs to be at least 8 characters long"))
         self.strengh_indicator.set_fraction(0.0)
-        table.attach(self.strengh_indicator, 1, 2, 2, 3, xoptions=Gtk.AttachOptions.EXPAND|Gtk.AttachOptions.FILL)
+        table.attach(self.strengh_indicator, 1, 2, 2, 3, xoptions=Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL)
         self.strengh_indicator.set_size_request(-1, 1)
 
         self.strengh_label = Gtk.Label()
@@ -331,8 +335,8 @@ class PasswordDialog(Gtk.Dialog):
         self.show_password.set_active(True)
         characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-"
         newpass = ""
-        for i in range (8):
-            index = randint(0, len(characters) -1)
+        for i in range(8):
+            index = randint(0, len(characters) - 1)
             newpass = newpass + characters[index]
 
         self.new_password.set_text(newpass)
@@ -352,12 +356,12 @@ class PasswordDialog(Gtk.Dialog):
             try:
                 auth.authenticate()
                 auth.acct_mgmt()
-            except PAM.error, resp:
+            except PAM.error:
                 self.current_password.set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, Gtk.STOCK_DIALOG_WARNING)
                 self.current_password.set_icon_tooltip_text(Gtk.EntryIconPosition.SECONDARY, _("Wrong password"))
                 self.correct_current_password = False
-            except:
-                print 'Internal error'
+            except Exception:
+                print('Internal error')
             else:
                 self.current_password.set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)
                 self.correct_current_password = True
@@ -378,10 +382,10 @@ class PasswordDialog(Gtk.Dialog):
                 symbol += 1
         length = len(password)
 
-        length = min(length,4)
-        digit = min(digit,3)
-        upper = min(upper,3)
-        symbol = min(symbol,3)
+        length = min(length, 4)
+        digit = min(digit, 3)
+        upper = min(upper, 3)
+        symbol = min(symbol, 3)
         strength = (
             ((length * 0.1) - 0.2) +
             (digit * 0.1) +
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_windows.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_windows.py
index 011f7e7..d9e8be3 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_windows.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_windows.py
@@ -1,10 +1,15 @@
 #!/usr/bin/python2
 
+from __future__ import print_function
+
+import gettext
 import gi
-gi.require_version('Gtk', '3.0')
-from gi.repository import Gio, Gtk, GObject, Gdk
+gi.require_version('Gtk', '3.0')  # noqa
+from gi.repository import Gio, Gtk
+
+from GSettingsWidgets import *  # noqa
 
-from GSettingsWidgets import *
+_ = gettext.gettext
 
 
 class Module:
@@ -19,7 +24,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Windows module"
+            print("Loading Windows module")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
@@ -50,7 +55,7 @@ class Module:
             widget = GSettingsComboBox(_("Action on title bar right-click"), "org.cinnamon.desktop.wm.preferences", "action-right-click-titlebar", action_options, size_group=size_group)
             settings.add_row(widget)
 
-            scroll_options = [["none", _("Nothing")],["shade", _("Shade and unshade")],["opacity", _("Adjust opacity")]]
+            scroll_options = [["none", _("Nothing")], ["shade", _("Shade and unshade")], ["opacity", _("Adjust opacity")]]
 
             widget = GSettingsComboBox(_("Action on title bar with mouse scroll"), "org.cinnamon.desktop.wm.preferences", "action-scroll-titlebar", scroll_options, size_group=size_group)
             settings.add_row(widget)
@@ -92,7 +97,7 @@ class Module:
             widget = GSettingsComboBox(_("Location of newly opened windows"), "org.cinnamon.muffin", "placement-mode", placement_options, size_group=size_group)
             settings.add_row(widget)
 
-            special_key_options = [["", _("Disabled")], ["<Alt>", "<Alt>"],["<Super>", "<Super>"],["<Control>", "<Control>"]]
+            special_key_options = [["", _("Disabled")], ["<Alt>", "<Alt>"], ["<Super>", "<Super>"], ["<Control>", "<Control>"]]
             widget = GSettingsComboBox(_("Special key to move and resize windows"), "org.cinnamon.desktop.wm.preferences", "mouse-button-modifier", special_key_options, size_group=size_group)
             widget.set_tooltip_text(_("While the special key is pressed, windows can be dragged with the left mouse button and resized with the right mouse button."))
             settings.add_row(widget)
@@ -135,7 +140,9 @@ class Module:
             widget = GSettingsSwitch(_("Show windows from all workspaces"), "org.cinnamon", "alttab-switcher-show-all-workspaces")
             settings.add_row(widget)
 
+
 class TitleBarButtonsOrderSelector(SettingsBox):
+
     def __init__(self):
         self.schema = "org.cinnamon.muffin"
         self.key = "button-layout"
@@ -159,7 +166,7 @@ class TitleBarButtonsOrderSelector(SettingsBox):
 
         try:
             left_items, right_items = self.value.split(":")
-        except:
+        except Exception:
             left_items = right_items = ""
         if len(left_items) > 0:
             left_items = left_items.split(",")
diff --git a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_workspaces.py b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_workspaces.py
index de3534d..0ed63fd 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/modules/cs_workspaces.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/modules/cs_workspaces.py
@@ -1,6 +1,12 @@
 #!/usr/bin/python2
 
-from GSettingsWidgets import *
+from __future__ import print_function
+
+import gettext
+
+from GSettingsWidgets import *  # noqa
+
+_ = gettext.gettext
 
 
 class Module:
@@ -18,7 +24,7 @@ class Module:
 
     def on_module_selected(self):
         if not self.loaded:
-            print "Loading Workspaces module"
+            print("Loading Workspaces module")
 
             self.sidePage.stack = SettingsStack()
             self.sidePage.add_widget(self.sidePage.stack)
diff --git a/files/usr/share/cinnamon/cinnamon-settings/xlet-settings.py b/files/usr/share/cinnamon/cinnamon-settings/xlet-settings.py
index 9543014..b1b5ff4 100755
--- a/files/usr/share/cinnamon/cinnamon-settings/xlet-settings.py
+++ b/files/usr/share/cinnamon/cinnamon-settings/xlet-settings.py
@@ -1,15 +1,15 @@
 #!/usr/bin/python3
 
 import gi
-gi.require_version('Gtk', '3.0')
-gi.require_version('XApp', '1.0')
+gi.require_version('Gtk', '3.0')  # noqa
+gi.require_version('XApp', '1.0')  # noqa
 import sys
 
 import config
-sys.path.append(config.currentPath + "/bin")
+sys.path.append(config.currentPath + "/bin")  # noqa
 import gettext
 import json
-from JsonSettingsWidgets import *
+from JsonSettingsWidgets import *  # noqa
 from gi.repository import Gtk, Gio, XApp
 
 # i18n
@@ -22,27 +22,29 @@ translations = {}
 proxy = None
 
 XLET_SETTINGS_WIDGETS = {
-    "entry"             :   "JSONSettingsEntry",
-    "textview"          :   "JSONSettingsTextView",
-    "checkbox"          :   "JSONSettingsSwitch", # deprecated: please use switch instead
-    "switch"            :   "JSONSettingsSwitch",
-    "spinbutton"        :   "JSONSettingsSpinButton",
-    "filechooser"       :   "JSONSettingsFileChooser",
-    "scale"             :   "JSONSettingsRange",
-    "radiogroup"        :   "JSONSettingsComboBox", # deprecated: please use combobox instead
-    "combobox"          :   "JSONSettingsComboBox",
-    "colorchooser"      :   "JSONSettingsColorChooser",
-    "fontchooser"       :   "JSONSettingsFontButton",
-    "soundfilechooser"  :   "JSONSettingsSoundFileChooser",
-    "iconfilechooser"   :   "JSONSettingsIconChooser",
-    "tween"             :   "JSONSettingsTweenChooser",
-    "effect"            :   "JSONSettingsEffectChooser",
-    "datechooser"       :   "JSONSettingsDateChooser",
-    "keybinding"        :   "JSONSettingsKeybinding",
-    "list"              :   "JSONSettingsList"
+    "entry":            "JSONSettingsEntry",
+    "textview":         "JSONSettingsTextView",
+    "checkbox":         "JSONSettingsSwitch",    # deprecated: please use switch   instead
+    "switch":           "JSONSettingsSwitch",
+    "spinbutton":       "JSONSettingsSpinButton",
+    "filechooser":      "JSONSettingsFileChooser",
+    "scale":            "JSONSettingsRange",
+    "radiogroup":       "JSONSettingsComboBox",  # deprecated: please use combobox instead
+    "combobox":         "JSONSettingsComboBox",
+    "colorchooser":     "JSONSettingsColorChooser",
+    "fontchooser":      "JSONSettingsFontButton",
+    "soundfilechooser": "JSONSettingsSoundFileChooser",
+    "iconfilechooser":  "JSONSettingsIconChooser",
+    "tween":            "JSONSettingsTweenChooser",
+    "effect":           "JSONSettingsEffectChooser",
+    "datechooser":      "JSONSettingsDateChooser",
+    "keybinding":       "JSONSettingsKeybinding",
+    "list":             "JSONSettingsList",
 }
 
+
 class XLETSettingsButton(Button):
+
     def __init__(self, info, uuid, instance_id):
         super(XLETSettingsButton, self).__init__(info["description"])
         self.uuid = uuid
@@ -52,8 +54,9 @@ class XLETSettingsButton(Button):
     def on_activated(self):
         proxy.activateCallback('(sss)', self.xletCallback, self.uuid, self.instance_id)
 
+
 def translate(uuid, string):
-    #check for a translation for this xlet
+    # check for a translation for this xlet
     if uuid not in translations:
         try:
             translations[uuid] = gettext.translation(uuid, home + "/.local/share/locale").gettext
@@ -63,7 +66,7 @@ def translate(uuid, string):
             except IOError:
                 translations[uuid] = None
 
-    #do not translate whitespaces
+    # do not translate whitespaces
     if not string.strip():
         return string
 
@@ -72,14 +75,16 @@ def translate(uuid, string):
 
         try:
             result = result.decode("utf-8")
-        except:
+        except Exception:
             result = result
 
         if result != string:
             return result
     return _(string)
 
+
 class MainWindow(object):
+
     def __init__(self, xlet_type, uuid, instance_id=None):
         self.type = xlet_type
         self.uuid = uuid
@@ -102,7 +107,7 @@ class MainWindow(object):
         except dbus.exceptions.DBusException as e:
             print(e)
 
-    def _on_proxy_ready (self, object, result, data=None):
+    def _on_proxy_ready(self, object, result, data=None):
         global proxy
         proxy = Gio.DBusProxy.new_for_bus_finish(result)
 
@@ -112,7 +117,7 @@ class MainWindow(object):
         if proxy:
             proxy.highlightXlet('(ssb)', self.uuid, self.selected_instance["id"], True)
 
-    def load_xlet_data (self):
+    def load_xlet_data(self):
         self.xlet_dir = "/usr/share/cinnamon/%ss/%s" % (self.type, self.uuid)
         if not os.path.exists(self.xlet_dir):
             self.xlet_dir = "%s/.local/share/cinnamon/%ss/%s" % (home, self.type, self.uuid)
@@ -215,13 +220,13 @@ class MainWindow(object):
 
             instance_id = item[0:-5]
             if not multi_instance and instance_id != self.uuid:
-                continue # for single instance the file name should be [uuid].json
+                continue  # for single instance the file name should be [uuid].json
 
             if multi_instance:
                 try:
                     int(instance_id)
-                except:
-                    continue # multi-instance should have file names of the form [instance-id].json
+                except Exception:
+                    continue  # multi-instance should have file names of the form [instance-id].json
 
                 instance_exists = False
                 enabled = self.gsettings.get_strv('enabled-%ss' % self.type)
@@ -252,7 +257,7 @@ class MainWindow(object):
                         if key in ("description", "tooltip", "units"):
                             try:
                                 settings_map[setting][key] = translate(self.uuid, settings_map[setting][key])
-                            except:
+                            except Exception:
                                 pass
                         elif key in "options":
                             new_opt_data = collections.OrderedDict()
@@ -356,7 +361,7 @@ class MainWindow(object):
     def previous_instance(self, *args):
         self.instance_stack.set_transition_type(Gtk.StackTransitionType.OVER_RIGHT)
         index = self.instance_info.index(self.selected_instance)
-        self.set_instance(self.instance_info[index-1])
+        self.set_instance(self.instance_info[index - 1])
 
     def next_instance(self, *args):
         self.instance_stack.set_transition_type(Gtk.StackTransitionType.OVER_LEFT)
@@ -364,12 +369,9 @@ class MainWindow(object):
         if index == len(self.instance_info) - 1:
             index = 0
         else:
-            index +=1
+            index += 1
         self.set_instance(self.instance_info[index])
 
-    def unpack_args(self, props):
-        args = {}
-
     def backup(self, *args):
         dialog = Gtk.FileChooserDialog(_("Select or enter file to export to"),
                                        None,
@@ -421,6 +423,7 @@ class MainWindow(object):
         self.window.destroy()
         Gtk.main_quit()
 
+
 if __name__ == "__main__":
     import signal
     if len(sys.argv) < 3:
diff --git a/files/usr/share/cinnamon/cinnamon-slideshow/cinnamon-slideshow.py b/files/usr/share/cinnamon/cinnamon-slideshow/cinnamon-slideshow.py
index 3bd05f4..6f440bc 100755
--- a/files/usr/share/cinnamon/cinnamon-slideshow/cinnamon-slideshow.py
+++ b/files/usr/share/cinnamon/cinnamon-slideshow/cinnamon-slideshow.py
@@ -1,10 +1,15 @@
 #! /usr/bin/python2
 
+from __future__ import print_function
+
 from gi.repository import Gio, GLib
-import dbus, dbus.service, dbus.glib
+import dbus
+import dbus.service
+import dbus.glib
 from dbus.mainloop.glib import DBusGMainLoop
 import random
-import os, locale
+import os
+import locale
 from xml.etree import ElementTree
 
 SLIDESHOW_DBUS_NAME = "org.Cinnamon.Slideshow"
@@ -13,7 +18,9 @@ SLIDESHOW_DBUS_PATH = "/org/Cinnamon/Slideshow"
 BACKGROUND_COLLECTION_TYPE_DIRECTORY = "directory"
 BACKGROUND_COLLECTION_TYPE_XML = "xml"
 
+
 class CinnamonSlideshow(dbus.service.Object):
+
     def __init__(self):
         bus_name = dbus.service.BusName(SLIDESHOW_DBUS_NAME, bus=dbus.SessionBus())
         dbus.service.Object.__init__(self, bus_name, SLIDESHOW_DBUS_PATH)
@@ -114,6 +121,7 @@ class CinnamonSlideshow(dbus.service.Object):
     def gather_images_cb(self, obj, res, user_data):
         all_files = []
         enumerator = obj.enumerate_children_finish(res)
+
         def on_next_file_complete(obj, res, user_data=all_files):
             files = obj.next_files_finish(res)
             file_list = all_files
@@ -128,15 +136,15 @@ class CinnamonSlideshow(dbus.service.Object):
 
     def ensure_file_is_image(self, file_list):
         for item in file_list:
-            file_type = item.get_file_type();
+            file_type = item.get_file_type()
             if file_type is not Gio.FileType.DIRECTORY:
-                file_contents = item.get_content_type();
+                file_contents = item.get_content_type()
                 if file_contents.startswith("image"):
                     self.add_image_to_playlist(self.collection_path + "/" + item.get_name())
 
     def add_image_to_playlist(self, file_path):
         image = Gio.file_new_for_path(file_path)
-        image_uri = image.get_uri();
+        image_uri = image.get_uri()
         self.image_playlist.append(image_uri)
         if self.collection_type == BACKGROUND_COLLECTION_TYPE_DIRECTORY:
             self.image_playlist.sort()
@@ -165,7 +173,7 @@ class CinnamonSlideshow(dbus.service.Object):
     def on_monitored_folder_changed(self, monitor, file1, file2, event_type):
         try:
             if event_type == Gio.FileMonitorEvent.DELETED:
-                file_uri = file1.get_uri();
+                file_uri = file1.get_uri()
                 if self.image_playlist.count(file_uri) > 0:
                     index_to_remove = self.image_playlist.index(file_uri)
                     del self.image_playlist[index_to_remove]
@@ -178,10 +186,10 @@ class CinnamonSlideshow(dbus.service.Object):
                 file_info = file1.query_info("standard::type,standard::content-type", Gio.FileQueryInfoFlags.NONE, None)
                 file_type = file_info.get_file_type()
                 if file_type is not Gio.FileType.DIRECTORY:
-                    file_contents = file_info.get_content_type();
+                    file_contents = file_info.get_content_type()
                     if file_contents.startswith("image"):
                         self.add_image_to_playlist(file_path)
-        except:
+        except Exception:
             pass
 
     def on_random_order_changed(self, settings, key):
@@ -249,7 +257,7 @@ class CinnamonSlideshow(dbus.service.Object):
         self.used_image_playlist = []
 
 
-########### TAKEN FROM CS_BACKGROUND
+# TAKEN FROM CS_BACKGROUND
     def splitLocaleCode(self, localeCode):
         loc = localeCode.partition("_")
         loc = (loc[0], loc[2])
@@ -277,7 +285,6 @@ class CinnamonSlideshow(dbus.service.Object):
             locAttrName = "{http://www.w3.org/XML/1998/namespace}lang"
             loc = self.splitLocaleCode(locale.getdefaultlocale()[0])
             res = []
-            subLocaleFound = False
             f = open(filename)
             rootNode = ElementTree.fromstring(f.read())
             f.close()
@@ -293,7 +300,7 @@ class CinnamonSlideshow(dbus.service.Object):
                                 else:
                                     propAttr = prop.attrib
                                     wpName = prop.text
-                                    locName = self.splitLocaleCode(propAttr.get(locAttrName)) if propAttr.has_key(locAttrName) else ("", "")
+                                    locName = self.splitLocaleCode(propAttr.get(locAttrName)) if locAttrName in propAttr else ("", "")
                                     names.append((locName, wpName))
                         wallpaperData["name"] = self.getLocalWallpaperName(names, loc)
 
@@ -302,20 +309,21 @@ class CinnamonSlideshow(dbus.service.Object):
                                 wallpaperData["name"] = os.path.basename(wallpaperData["filename"])
                             res.append(wallpaperData)
             return res
-        except Exception, detail:
-            print detail
+        except Exception as detail:
+            print(detail)
             return []
 ###############
 
+
 if __name__ == "__main__":
     DBusGMainLoop(set_as_default=True)
 
-    sessionBus = dbus.SessionBus ()
+    sessionBus = dbus.SessionBus()
     request = sessionBus.request_name(SLIDESHOW_DBUS_NAME, dbus.bus.NAME_FLAG_DO_NOT_QUEUE)
     if request != dbus.bus.REQUEST_NAME_REPLY_EXISTS:
         slideshow = CinnamonSlideshow()
     else:
-        print "cinnamon-slideshow already running."
+        print("cinnamon-slideshow already running.")
         quit()
 
     ml = GLib.MainLoop.new(None, True)
